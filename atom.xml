<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deng | 不搭</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dengfuping.com/"/>
  <updated>2017-07-24T14:31:16.858Z</updated>
  <id>http://www.dengfuping.com/</id>
  
  <author>
    <name>Deng | 不搭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加密算法（一）：MD5 加密算法</title>
    <link href="http://www.dengfuping.com/2017/07/24/algorithm-md5-encryption/"/>
    <id>http://www.dengfuping.com/2017/07/24/algorithm-md5-encryption/</id>
    <published>2017-07-24T14:18:49.000Z</published>
    <updated>2017-07-24T14:31:16.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MD5（单向散列算法）的全称是 Message-Digest Algorithm 5（信息-摘要算法），是 Hash 算法的一种。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>数字指纹：输入任意长度的信息，经过处理，输出为 128 位的信息；</li>
<li>唯一性：不同的输入得到的不同的结果（唯一性）；</li>
<li>不可逆：根据128位的输出结果不可能反推出输入的信息。</li>
</ul>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><h2 id="信息加密"><a href="#信息加密" class="headerlink" title="信息加密"></a>信息加密</h2><p>在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的 MD5 值，也无法知道用户的密码(其实这样是不安全的，后面我会提到)。（比如在 UNIX 系统中用户的密码就是以 MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成 MD5 值，然后再去和保存在文件系统中的 MD5 值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</p>
<h3 id="文件效验（防止被篡改）"><a href="#文件效验（防止被篡改）" class="headerlink" title="文件效验（防止被篡改）"></a>文件效验（防止被篡改）</h3><ol>
<li>比如发送一个电子文档，发送前，我先得到 MD5 的输出结果 a。然后在对方收到电子文档后，对方也得到一个 MD5 的输出结果 b。如果 a 与 b 一样就代表中途未被篡改。</li>
<li>比如我提供文件下载，为了防止不法分子在安装程序中添加木马，我可以在网站上公布由安装文件得到的 MD5 输出结果。</li>
<li>SVN 在检测文件是否在 CheckOut 后被修改过，也是用到了 MD5。</li>
</ol>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>这需要一个第三方认证机构。例如 A 写了一个文件，认证机构对此文件用 MD5 算法产生摘要信息并做好记录。若以后 A 说这文件不是他写的，权威机构只需对此文件重新产生摘要信息，然后跟记录在册的摘要信息进行比对，相同的话，就证明是 A 写的了。这就是所谓的“数字签名”。</p>
<p>参考文章：</p>
<ol>
<li><a href="http://blog.csdn.net/forgotaboutgirl/article/details/7258109" target="_blank" rel="external">MD5算法原理</a></li>
<li><a href="http://www.cnblogs.com/hjgods/p/3998570.html" target="_blank" rel="external">MD5加密算法原理及实现</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;MD5（单向散列算法）的全称是 Message-Digest Algorithm 5（信息-摘要算法），是 Hash 算法的一种。&lt;/p&gt;

    
    </summary>
    
      <category term="算法" scheme="http://www.dengfuping.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="http://www.dengfuping.com/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：内存泄漏</title>
    <link href="http://www.dengfuping.com/2017/07/22/javascript-memory-leak/"/>
    <id>http://www.dengfuping.com/2017/07/22/javascript-memory-leak/</id>
    <published>2017-07-22T15:38:53.000Z</published>
    <updated>2017-07-22T15:41:52.734Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p>
<ul>
<li><a href="http://www.jb51.net/article/81117.htm" target="_blank" rel="external">深入理解JavaScript程序中内存泄漏</a></li>
<li><a href="http://www.cnblogs.com/sprying/archive/2013/05/31/3109517.html" target="_blank" rel="external">js内存泄露的几种情况</a></li>
<li><a href="http://blog.csdn.net/vuturn/article/details/45097353" target="_blank" rel="external">javascript内存泄露及解决方案详解</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/81117.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解JavaScript程序中内存泄漏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：垃圾回收机制和内存管理</title>
    <link href="http://www.dengfuping.com/2017/07/22/javascript-garbage-collection-and-memory-management/"/>
    <id>http://www.dengfuping.com/2017/07/22/javascript-garbage-collection-and-memory-management/</id>
    <published>2017-07-22T15:33:15.000Z</published>
    <updated>2017-07-22T15:36:04.781Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p>
<ul>
<li><a href="http://www.jb51.net/article/75292.htm" target="_blank" rel="external">跟我学习javascript的垃圾回收机制与内存管理</a></li>
<li><a href="http://www.cnblogs.com/lcw5945/p/4143050.html" target="_blank" rel="external">JavaScript 的垃圾回收和内存管理</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/75292.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;跟我学习javascript的垃圾回收机制与内存管理&lt;/a&gt;&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS：瀑布流布局实现方式</title>
    <link href="http://www.dengfuping.com/2017/07/14/css-waterfall-layout/"/>
    <id>http://www.dengfuping.com/2017/07/14/css-waterfall-layout/</id>
    <published>2017-07-14T14:08:52.000Z</published>
    <updated>2017-07-14T14:53:07.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-传统多列浮动"><a href="#1-传统多列浮动" class="headerlink" title="1. 传统多列浮动"></a>1. 传统多列浮动</h2><ol>
<li>各列固定宽度，并且左浮动；</li>
<li>一列中的数据块为一组，列中的每块依次排列；</li>
<li>更多数据加载时，需要分别插入到不同的列中。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.container</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">160px</span>;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.item</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#90EE90</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 230px"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 300px"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 250px"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"height: 200px"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://dengfuping-blog.oss-cn-hangzhou.aliyuncs.com/css-waterfall-layout/1.png" alt=""></p>
<ul>
<li>优点:布局简单，应该说没啥特别的难点；不用明确知道数据块高度，当数据块中有图片时，就不需要指定图片高度。</li>
<li>缺点:列数固定，扩展不易，当浏览器窗口大小变化时，只能固定的x列，如果要添加一列，很难调整数据块的排列；滚动加载更多数据时，还要指定插入到第几列中，还是不方便。</li>
</ul>
<h2 id="2-CSS3-样式定义"><a href="#2-CSS3-样式定义" class="headerlink" title="2. CSS3 样式定义"></a>2. CSS3 样式定义</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.container</span>&#123;</div><div class="line">            <span class="attribute">-webkit-column-width</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">-moz-column-width</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">-o-colum-width</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">-webkit-column-gap</span>:<span class="number">1px</span>;</div><div class="line">            <span class="attribute">-moz-column-gap</span>:<span class="number">1px</span>;</div><div class="line">            <span class="attribute">-o-column-gap</span>:<span class="number">1px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:not(.container)</span>&#123;</div><div class="line">            <span class="attribute">-webkit-border-radius</span>:<span class="number">5px</span>;</div><div class="line">            <span class="attribute">-moz-border-radius</span>:<span class="number">5px</span>;</div><div class="line">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</div><div class="line">            <span class="attribute">background</span>:<span class="number">#90EE90</span>;</div><div class="line">            <span class="attribute">border</span>::<span class="number">#CCC</span> <span class="number">1px</span> solid;</div><div class="line">            <span class="attribute">display</span>:inline-block;</div><div class="line">            <span class="attribute">width</span>:<span class="number">157px</span>;</div><div class="line">            <span class="attribute">position</span>:relative;</div><div class="line">            <span class="attribute">margin</span>:<span class="number">2px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.title</span>&#123;</div><div class="line">            <span class="attribute">line-height</span>:<span class="number">80px</span>; <span class="attribute">font-size</span>:<span class="number">18px</span>; <span class="attribute">color</span>:<span class="number">#999</span>;</div><div class="line">            <span class="attribute">text-align</span>:center;</div><div class="line">            <span class="attribute">font-family</span>:<span class="string">"Microsoft YaHei"</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:80px"</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>纯CSS3瀑布布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:260px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:65px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:120px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:145px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:90px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:145px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:160px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:65px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:230px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:140px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:85px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:20px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:145px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:50px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:65px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:230px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:140px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:85px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:20px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:145px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:50px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:145px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:160px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:240px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://dengfuping-blog.oss-cn-hangzhou.aliyuncs.com/css-waterfall-layout/2.png" alt=""></p>
<ul>
<li>优点:直接 CSS 定义，最方便了；扩展方便，直接往容器里添加内容即可。</li>
<li>缺点:只有高级浏览器中才能使用；还有一个缺点，他的数据块排列是从上到下排列到一定高度后，再把剩余元素依次添加到下一列，这个本质上就不一样了；</li>
</ul>
<p>鉴于这两个主要缺点，注定了该方法只能局限于高端浏览器，而且，更适合于文字多栏排列。</p>
<h2 id="3-绝对定位"><a href="#3-绝对定位" class="headerlink" title="3. 绝对定位"></a>3. 绝对定位</h2><p>思路：</p>
<ol>
<li>数据块排列（对容器中已有元素进行排列），算法步骤简述下：<br>设置（块元素宽度一致）</li>
</ol>
<ul>
<li>初始化时，对容器中已有数据块元素进行第一次计算，需要用户给定: a，容器元素 — 以此获取窗口总宽度； b，列宽度（块元素宽度）； c，最小列数；</li>
<li>计算显示列数：窗口宽度除以一个块框宽度向下取整，并设置waterfall显示的居中</li>
<li>存储每列的高度</li>
<li>获得列数后，需要保存每个列的当前高度，这样在添加每个数据块时，才知道起始高度是多少；</li>
<li>依次取容器中的所有数据块，先寻找当前高度最小的某列，之后根据列序号，确定数据块的left，top值，left 为所在列的序号乘以列宽，top 为所在列的当前高度，最后更新所在列的当前高度加上这个数据块元素的高度，至此，插入一个元素结束；</li>
<li>当所有元素插入完毕后，调整容器的高度为各列最大的高度值，结束依次调整。</li>
</ul>
<ol>
<li>异步加载数据，包含两个步骤：</li>
</ol>
<ul>
<li>绑定滚动事件，并确定预加载线高度值，即滚动到哪个高度后，需要去加载数据，其实这个就是列的最小高度值，这样当前滚动值和最小高度值比较一下即可判断出来，是否要触发加载数据；</li>
<li>加载数据，函数传参，能提供加载数据函数和停止加载（加载多少时停止）函数，以更方便的控制。</li>
</ul>
<ul>
<li>优点：最优的一种方案，方便添加数据内容，窗口变化，列数/数据块都会自动调整；方便添加数据内容，窗口变化，列数/数据块都会自动调整；</li>
<li>缺点:需要实现知道数据块高度，如果其中包含图片，需要知道图片高度；JS 动态计算数据块位置，当窗口缩放频繁，可能会狂耗性能。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-传统多列浮动&quot;&gt;&lt;a href=&quot;#1-传统多列浮动&quot; class=&quot;headerlink&quot; title=&quot;1. 传统多列浮动&quot;&gt;&lt;/a&gt;1. 传统多列浮动&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;各列固定宽度，并且左浮动；&lt;/li&gt;
&lt;li&gt;一列中的数据块为一组，列中的每
    
    </summary>
    
      <category term="CSS" scheme="http://www.dengfuping.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.dengfuping.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：数组去重</title>
    <link href="http://www.dengfuping.com/2017/07/14/javascript-remove-duplicated-element/"/>
    <id>http://www.dengfuping.com/2017/07/14/javascript-remove-duplicated-element/</id>
    <published>2017-07-14T08:55:09.000Z</published>
    <updated>2017-07-14T09:25:27.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>双重循环（复杂度较高）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [<span class="keyword">this</span>[<span class="number">0</span>]];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">var</span> repeat = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; ret.length; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] === ret[j])&#123;</div><div class="line">                repeat = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!repeat)&#123;</div><div class="line">            ret.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>先对数组进行排序， 然后比较俩数组一头一尾进行去重：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [<span class="keyword">this</span>[<span class="number">0</span>]];</div><div class="line">    <span class="keyword">this</span>.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x &lt; y)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] !== ret[ret.length - <span class="number">1</span>])&#123;</div><div class="line">            ret.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这种方法虽然降低了复杂度，但由于在去重前进行了排序，所以最后返回的去重结果也是排序后的。如果要求不改变数组的顺序去重，那这种方法便不可取了。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>遍历数组，利用 object 对象保存数组值，判断数组值是否已经保存在 object 中，未保存则 push 到新数组并用 <code>object[arrayItem] = 1</code> 的方式记录保存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!obj[arr[i]])&#123;</div><div class="line">            ret.push(arr[i]);</div><div class="line">            obj[arr[i]] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>利用 <code>indexOf()</code> 方法判断是否存在于新数组中，不存在则 push 到新数组中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ret.indexOf(arr[i]) === <span class="number">-1</span>)&#123;</div><div class="line">            ret.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h2><p>数组下标判断法, 遍历数组，利用 <code>indexOf()</code> 方法判断元素的值是否与当前索引相等，如相等则加入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (arr.indexOf(value) === index)&#123;</div><div class="line">            ret.push(value);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;双重循环（复杂度较高）：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.unique = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = [&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repeat = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; ret.length; j++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[i] === ret[j])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                repeat = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!repeat)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ret.push(arr[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 开发规范</title>
    <link href="http://www.dengfuping.com/2017/07/09/javascript-development-norm/"/>
    <id>http://www.dengfuping.com/2017/07/09/javascript-development-norm/</id>
    <published>2017-07-09T13:59:20.000Z</published>
    <updated>2017-07-09T14:02:09.635Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p>
<p><a href="http://www.cnblogs.com/polk6/p/4660195.html#Menu2-NoteStyle" target="_blank" rel="external">JavaScript 开发规范</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/polk6/p/4660195.html#Menu2-NoteStyle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 开发规范&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>五大浏览器内核</title>
    <link href="http://www.dengfuping.com/2017/07/09/browser-kernel/"/>
    <id>http://www.dengfuping.com/2017/07/09/browser-kernel/</id>
    <published>2017-07-09T13:35:39.000Z</published>
    <updated>2017-07-09T14:14:29.956Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器的内核是分为两个部分的，一是 <code>渲染引擎</code>，另一个是 <code>JS引擎</code>。现在 JS 引擎比较独立，内核更加倾向于说渲染引擎。<a id="more"></a></p>
<ol>
<li>Trident 内核：代表作品是IE，因IE捆绑在Windows中，所以占有极高的份额，又称为IE内核或MSHTML，此内核只能用于Windows平台，且不是开源的。代表作品还有腾讯、Maxthon（遨游）、360浏览器等。但由于市场份额比较大，曾经出现脱离了W3C标准的时候，同时IE版本比较多，存在很多的兼容性问题。</li>
<li>Gecko 内核：代表作品是 Firefox，即火狐浏览器。因火狐是其最多的用户，故常被称为 Firefox 内核它是开源的，最大优势是跨平台，在 Microsoft Windows、Linux、MacOS 等主要操作系统中使用。</li>
<li>Webkit 内核：代表作品是 Safari、曾经的 Chrome，是开源的项目。</li>
<li>Presto 内核：代表作品是 Opera，Presto 是由 Opera Software 开发的浏览器排版引擎，它是世界公认最快的渲染速度的引擎。在 2013 年，Opera宣布加入谷歌阵营，弃用了 Presto </li>
<li>Blink 内核：由 Google 和 Opera Software 开发的浏览器排版引擎，2013年4月发布。现在Chrome 内核是 Blink。谷歌还开发了自己的 JS 引擎（V8），使 JS 运行速度极大地提高了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器的内核是分为两个部分的，一是 &lt;code&gt;渲染引擎&lt;/code&gt;，另一个是 &lt;code&gt;JS引擎&lt;/code&gt;。现在 JS 引擎比较独立，内核更加倾向于说渲染引擎。
    
    </summary>
    
      <category term="前端开发" scheme="http://www.dengfuping.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="http://www.dengfuping.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="浏览器" scheme="http://www.dengfuping.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：caller 和 callee</title>
    <link href="http://www.dengfuping.com/2017/07/09/javascript-caller-and-callee/"/>
    <id>http://www.dengfuping.com/2017/07/09/javascript-caller-and-callee/</id>
    <published>2017-07-09T09:44:43.000Z</published>
    <updated>2017-07-10T10:32:28.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h2><p>caller 是函数对象的一个属性，返回一个函数的引用，该函数调用了当前函数。使用这个属性是要注意：</p>
<ul>
<li>这个属性只有当函数在执行时才有用；</li>
<li>如果在 JavaScript 程序中，函数是由顶层调用的，则返回 null。<a id="more"></a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(a.caller);   </div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    a();   </div><div class="line">&#125;</div><div class="line">   </div><div class="line">b();</div></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </div><div class="line">    a();   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但若是将代码改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(a.caller);   </div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    a();   </div><div class="line">&#125;</div><div class="line">   </div><div class="line">a();</div></pre></td></tr></table></figure>
<p>输出的结果为 <code>null</code>。</p>
<h2 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h2><p>callee 返回正在执行的函数本身的引用，它是 arguments 的一个属性。使用 callee 时要注意:</p>
<ul>
<li>这个属性只有在函数执行时才有效；</li>
<li>它有一个 length 属性，可以用来获得形参的个数，因此可以用来比较形参和实参个数是否一致，即比较 arguments.length 是否等于 arguments.callee.length；</li>
<li>它可以用来递归匿名函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);   </div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">    a();   </div><div class="line">&#125;</div><div class="line">   </div><div class="line">b();</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   </div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;caller&quot;&gt;&lt;a href=&quot;#caller&quot; class=&quot;headerlink&quot; title=&quot;caller&quot;&gt;&lt;/a&gt;caller&lt;/h2&gt;&lt;p&gt;caller 是函数对象的一个属性，返回一个函数的引用，该函数调用了当前函数。使用这个属性是要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个属性只有当函数在执行时才有用；&lt;/li&gt;
&lt;li&gt;如果在 JavaScript 程序中，函数是由顶层调用的，则返回 null。
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：单例模式的实现方法</title>
    <link href="http://www.dengfuping.com/2017/06/14/javascript-singleton/"/>
    <id>http://www.dengfuping.com/2017/06/14/javascript-singleton/</id>
    <published>2017-06-14T01:07:34.000Z</published>
    <updated>2017-06-14T01:10:48.350Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p>
<p><a href="https://juejin.im/post/593e116c61ff4b006c995c93?utm_source=gold_browser_extension" target="_blank" rel="external">JS 的平凡之路 – 单例模式的各种实现方式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/593e116c61ff4b006c995c93?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;J
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript：链式调用</title>
    <link href="http://www.dengfuping.com/2017/05/23/javascript-call-by-chaining/"/>
    <id>http://www.dengfuping.com/2017/05/23/javascript-call-by-chaining/</id>
    <published>2017-05-23T06:48:49.000Z</published>
    <updated>2017-07-14T09:29:50.603Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究 jQuery 的源码，发现自己对其链式调用还理解不是很深。今天趁此机会，就来谈一谈 JavaScript 中的链式调用。链式调用我们平常用到很多，比如 jQuery 中的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(ele).show().find(child).hide();</div></pre></td></tr></table></figure>
<p>再比如 angularjs 中的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$http.get(url).success(fn_s).error(fn_e);</div></pre></td></tr></table></figure>
<p>但这都是已经包装好的链式调用，我们只能体会链式调用带来的方便，却不知道形成这样一条函数链的原理是什么。<a id="more"></a></p>
<p>随着链式调用的普及，实现的方案也越来越多。最常见的，是 jQuery 直接返回 this 的方式，underscore 的可选式的方式，和 lodash 惰性求值的方式。我们分别来了解，并逐个完成它们的demo。</p>
<p>参考文章：</p>
<p><a href="http://www.cnblogs.com/tarol/p/5336666.html" target="_blank" rel="external">玩一把JS的链式调用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究 jQuery 的源码，发现自己对其链式调用还理解不是很深。今天趁此机会，就来谈一谈 JavaScript 中的链式调用。链式调用我们平常用到很多，比如 jQuery 中的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(ele).show().find(child).hide();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再比如 angularjs 中的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$http.get(url).success(fn_s).error(fn_e);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但这都是已经包装好的链式调用，我们只能体会链式调用带来的方便，却不知道形成这样一条函数链的原理是什么。
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：事件代理（委托）的兼容性</title>
    <link href="http://www.dengfuping.com/2017/05/14/javascript-event-delegate-compatibility/"/>
    <id>http://www.dengfuping.com/2017/05/14/javascript-event-delegate-compatibility/</id>
    <published>2017-05-14T03:46:37.000Z</published>
    <updated>2017-07-10T10:36:53.018Z</updated>
    
    <content type="html"><![CDATA[<p>由于网上的很多文章都介绍了 js 中的 <code>事件代理</code>，因此本文只探讨一些关于事件代理中容易被忽视的两个问题，那就是原生 js 实现和其在浏览器中的<code>兼容性问题</code>。<a id="more"></a></p>
<p>相信很多人都知道，借助 jQuery 中的 delegate() 和 on() 函数我们可以轻松实现事件代理，具体使用方式可以参考我的另外一篇文章：<a href="http://www.dengfuping.com/2017/04/24/javascript-jquery-bind-on-delegate/">jQuery 事件绑定函数解析：bind, on, delegate</a>。</p>
<p>但今天我们要探讨的是如何使用原生 js 来实现事件代理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件代理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第一个li元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第二个li元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第三个li元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第四个li元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第五个li元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</div><div class="line">    ul.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> myEvent = event || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> target = myEvent.target || myEvent.srcElement;</div><div class="line">        <span class="keyword">if</span> (target.nodeName.toLocaleLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">            alert(target.firstChild.nodeValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>针对上面的代码做几点说明：</p>
<ul>
<li>event对象用于存储事件的数据，例如触发事件的元素、鼠标的位置及状态、按下的键等等；event对象只在事件发生的过程中才有效。</li>
<li>firefox 跟其他浏览器中使用的 event 的方法不同，其他浏览器中的 event 是全局变量，随时可用；firefox需要在事件方法的参数里写 event 才能用，是运行时的临时变量。也就是说，在其他浏览器中，是 window.event，而在 firefox 中是 event；</li>
<li>要获取事件目标，其它浏览器调用的是 event.target 属性，而在 IE 中则需要调用的是 event.srcElement 属性。</li>
</ul>
<p>所以在使用原生的 js 实现事件代理时既要考虑 firefox 下的兼容性又要考虑 IE 下的兼容性，这也是面试和实际应用当中会遇到的问题。而在使用 jQuery 时它会帮你做这些兼容性处理。进一步来看，这也可以看成是 jQuery 实现事件委托的基本原理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于网上的很多文章都介绍了 js 中的 &lt;code&gt;事件代理&lt;/code&gt;，因此本文只探讨一些关于事件代理中容易被忽视的两个问题，那就是原生 js 实现和其在浏览器中的&lt;code&gt;兼容性问题&lt;/code&gt;。
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之 CSRF 攻击</title>
    <link href="http://www.dengfuping.com/2017/05/11/web-security-attack-csrf/"/>
    <id>http://www.dengfuping.com/2017/05/11/web-security-attack-csrf/</id>
    <published>2017-05-11T14:56:32.000Z</published>
    <updated>2017-07-10T10:44:58.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>跨站请求伪造</code>（Cross-site request forgery），通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。<a id="more"></a></p>
<blockquote>
<p>跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
</blockquote>
<p>参考文章：</p>
<p><a href="https://juejin.im/post/583d6384a22b9d006a93c868" target="_blank" rel="external">Token 验证防止 CSRF 攻击的原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;跨站请求伪造&lt;/code&gt;（Cross-site request forgery），通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。
    
    </summary>
    
      <category term="网络安全" scheme="http://www.dengfuping.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="http://www.dengfuping.com/tags/XSS/"/>
    
      <category term="网络安全" scheme="http://www.dengfuping.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全之 XSS 攻击</title>
    <link href="http://www.dengfuping.com/2017/05/11/web-security-attack-xss/"/>
    <id>http://www.dengfuping.com/2017/05/11/web-security-attack-xss/</id>
    <published>2017-05-11T14:25:55.000Z</published>
    <updated>2017-07-10T10:45:19.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>XSS，全称是 <code>跨站脚本攻击</code>（Cross-site scripting），为了不和层叠样式表(CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意的 script 代码，当用户浏览该页之时，嵌入其中的 script 代码会被执行，从而达到恶意攻击用户的目的，如盗取用户的 cookie 等敏感信息。<a id="more"></a></p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>数据库中存有的存在XSS攻击的数据，返回给客户端。若数据未经过任何转义。被浏览器渲染。就可能导致XSS攻击。</p>
<h3 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h3><p>将用户输入的存在XSS攻击的数据，发送给后台，后台并未对数据进行存储，也未经过任何过滤，直接返回给客户端。被浏览器渲染。就可能导致XSS攻击。</p>
<h3 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h3><p>纯粹发生在客户端的XSS攻击，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//www.some.site/page.html?default=French</span></div></pre></td></tr></table></figure>
<p>页面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt; </div><div class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;OPTION value=1&gt;"</span>+<span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"default="</span>)+<span class="number">8</span>)+<span class="string">"&lt;/OPTION&gt;"</span>);  </div><div class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;OPTION value=2&gt;English&lt;/OPTION&gt;"</span>);    </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>该XSS攻击实现条件：</p>
<p>（1）用户点击了如下连接：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//www.some.site/page.html?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span></div></pre></td></tr></table></figure>
<p>（2）后台对URL参数未做任何过滤处理，返回给客户端，前端直接从url上获取参数。</p>
<p>（3）打开网址的浏览器是低版本浏览器，常见ie8以下。</p>
<p>满足以上三者，就会导致URL上的js代码执行:alert(document.cookie)，但是攻击者可以利用这个，做你无法想象的事情。在现代浏览器中，已经做了xss过滤，一旦检测到xss,会提示报错如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The XSS Auditor refused to execute a script <span class="keyword">in</span> <span class="string">'file:///C:/Users/summerhxji/Desktop/taobao/xss.html?default=%3Cscript%3Ealert(document.cookie)%3C/script%3E'</span> because its source code was found within the request. The auditor was enabled <span class="keyword">as</span> the server did not send an <span class="string">'X-XSS-Protection'</span> header.</div><div class="line">(anonymous) @ xss.html?<span class="keyword">default</span>=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>以上便是学术上的划分的XSS攻击类型，2、3类型其实都是反射型的攻击。了解了这些，意识到XSS攻击无处不在啊。</p>
<h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>（1）从输入和输出进行过滤和转义。可以使用 htmlspecialchars() 等函数进行过滤转义，当然，一些文件上传等，也可能会造成此攻击，要限制上传文件的类型，比如只能传图片等。</p>
<p>参考文章：</p>
<p><a href="https://www.zhuyingda.com/blog/article.html?id=2" target="_blank" rel="external">XSS漏洞的原理</a></p>
<p><a href="http://mp.weixin.qq.com/s/6ChuUdOm7vej8vQ3dbC8fw" target="_blank" rel="external">XSS攻击和防御详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;XSS，全称是 &lt;code&gt;跨站脚本攻击&lt;/code&gt;（Cross-site scripting），为了不和层叠样式表(CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意的 script 代码，当用户浏览该页之时，嵌入其中的 script 代码会被执行，从而达到恶意攻击用户的目的，如盗取用户的 cookie 等敏感信息。
    
    </summary>
    
      <category term="网络安全" scheme="http://www.dengfuping.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="http://www.dengfuping.com/tags/XSS/"/>
    
      <category term="网络安全" scheme="http://www.dengfuping.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>React 虚拟 DOM 浅析</title>
    <link href="http://www.dengfuping.com/2017/05/10/react-virtual-dom/"/>
    <id>http://www.dengfuping.com/2017/05/10/react-virtual-dom/</id>
    <published>2017-05-10T02:45:47.000Z</published>
    <updated>2017-05-10T07:58:20.540Z</updated>
    
    <content type="html"><![CDATA[<p>在 Web 开发中，需要将数据的变化实时反映到UI上，这时就需要对 DOM 进行操作，但是复杂或频繁的DOM操作通常是性能瓶颈产生的原因，为此，React 引入了虚拟 DOM（Virtual DOM）的机制。<a id="more"></a></p>
<h2 id="什么是虚拟-DOM"><a href="#什么是虚拟-DOM" class="headerlink" title="什么是虚拟 DOM"></a>什么是虚拟 DOM</h2><p>在React中，render执行的结果得到的并不是真正的DOM节点，结果仅仅是轻量级的JavaScript对象，我们称之为virtual DOM。</p>
<p>虚拟DOM是React的一大亮点，具有batching(批处理)和高效的Diff算法。这让我们可以无需担心性能问题而”毫无顾忌”的随时“刷新”整个页面，由虚拟 DOM来确保只对界面上真正变化的部分进行实际的DOM操作。在实际开发中基本无需关心虚拟DOM是如何运作的，但是理解其运行机制不仅有助于更好的理解React组件的生命周期，而且对于进一步优化 React程序也会有很大帮助。</p>
<h2 id="虚拟DOM-vs-直接操作原生DOM？"><a href="#虚拟DOM-vs-直接操作原生DOM？" class="headerlink" title="虚拟DOM vs 直接操作原生DOM？"></a>虚拟DOM vs 直接操作原生DOM？</h2><p>如果没有 Virtual DOM，简单来说就是直接重置 innerHTML。这样操作，在一个大型列表所有数据都变了的情况下，还算是合理，但是，当只有一行数据发生变化时，它也需要重置整个 innerHTML，这时候显然就造成了大量浪费。</p>
<p>比较innerHTML 和Virtual DOM 的重绘过程如下：</p>
<ul>
<li>innerHTML: render html string + 重新创建所有 DOM 元素</li>
<li>Virtual DOM: render Virtual DOM + diff + 必要的 DOM 更新</li>
</ul>
<p>和 DOM 操作比起来，js 计算是非常便宜的。Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是，它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。当然，曾有人做过验证说React的性能不如直接操作真实DOM，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Raw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = _buildData(),</div><div class="line">        html = <span class="string">""</span>;</div><div class="line">    ...</div><div class="line">    for(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;data.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> render = template;</div><div class="line">        render = render.replace(<span class="string">"&#123;&#123;className&#125;&#125;"</span>, <span class="string">""</span>);</div><div class="line">        render = render.replace(<span class="string">"&#123;&#123;label&#125;&#125;"</span>, data[i].label);</div><div class="line">        html += render;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    container.innerHTML = html;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该测试用例中虽然构造了一个包含1000个Tag的String，并把它添加到DOM树中，但是只做了一次DOM操作。然而，在实际开发过程中，这1000个元素更新可能分布在20个逻辑块中，每个逻辑块中包含50个元素，当页面需要更新时，都会引起DOM树的更新，上述代码就近似变成了如下格式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Raw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = _buildData(),</div><div class="line">        html = <span class="string">""</span>;</div><div class="line">    ...</div><div class="line">    for(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;data.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> render = template;</div><div class="line">        render = render.replace(<span class="string">"&#123;&#123;className&#125;&#125;"</span>, <span class="string">""</span>);</div><div class="line">        render = render.replace(<span class="string">"&#123;&#123;label&#125;&#125;"</span>, data[i].label);</div><div class="line">        html += render;</div><div class="line">        <span class="keyword">if</span>(!(i % <span class="number">50</span>)) &#123;</div><div class="line">            container.innerHTML = html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样来看，React的性能就远胜于原生DOM操作了。而且，DOM 完全不属于Javascript (也不在Javascript 引擎中在)。Javascript 其实是一个非常独立的引擎，DOM其实是浏览器引出的一组让Javascript操作HTML文档的API而已。在即时编译的时代，调用DOM的开销是很大的。而Virtual DOM的执行完全都在Javascript 引擎中，完全不会有这个开销。</p>
<p>React.js 相对于直接操作原生DOM有很大的性能优势， 很大程度上都要归功于virtual DOM的batching 和diff。batching把所有的DOM操作搜集起来，一次性提交给真实的DOM。diff算法时间复杂度也从标准的的Diff算法的O(n^3)降到了O(n)。这里留到下一次博客单独讲。</p>
<h2 id="虚拟-DOM-vs-MVVM"><a href="#虚拟-DOM-vs-MVVM" class="headerlink" title="虚拟 DOM vs MVVM"></a>虚拟 DOM vs MVVM</h2><p>相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的 O(watcher count) 的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是 O(change)：</p>
<ul>
<li>脏检查：scope digest + 必要 DOM 更新</li>
<li>依赖收集：重新收集依赖 + 必要 DOM 更新</li>
</ul>
<p>可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。</p>
<p>MVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 “scope” 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 Virtual DOM 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。</p>
<p>Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快: dbmon (注意 Angular 默认版本无优化，优化过的在下面）</p>
<p>在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。Virtual DOM 为了提升小量数据更新时的性能，也需要针对性的优化，比如 shouldComponentUpdate 或是 immutable data。</p>
<ul>
<li>初始渲染：Virtual DOM &gt; 脏检查 &gt;= 依赖收集</li>
<li>小量数据更新：依赖收集 &gt;&gt; Virtual DOM + 优化 &gt; 脏检查（无法优化） &gt; Virtual DOM 无优化</li>
<li>大量数据更新：脏检查 + 优化 &gt;= 依赖收集 + 优化 &gt; Virtual DOM（无法/无需优化）&gt;&gt; MVVM 无优化</li>
</ul>
<h2 id="对-React-虚拟-DOM-的误解"><a href="#对-React-虚拟-DOM-的误解" class="headerlink" title="对 React 虚拟 DOM 的误解"></a>对 React 虚拟 DOM 的误解</h2><p>React 从来没有说过 “React 比原生操作 DOM 快”。React给我们的保证是，在不需要手动优化的情况下，它依然可以给我们提供过得去的性能。</p>
<p>React掩盖了底层的 DOM 操作，可以用更声明式的方式来描述我们目的，从而让代码更容易维护。下面还是借鉴了知乎上的回答：没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Web 开发中，需要将数据的变化实时反映到UI上，这时就需要对 DOM 进行操作，但是复杂或频繁的DOM操作通常是性能瓶颈产生的原因，为此，React 引入了虚拟 DOM（Virtual DOM）的机制。
    
    </summary>
    
      <category term="React" scheme="http://www.dengfuping.com/categories/React/"/>
    
    
      <category term="React" scheme="http://www.dengfuping.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：实现类继承的三种方法</title>
    <link href="http://www.dengfuping.com/2017/05/10/javascript-class-inheritence/"/>
    <id>http://www.dengfuping.com/2017/05/10/javascript-class-inheritence/</id>
    <published>2017-05-10T00:05:05.000Z</published>
    <updated>2017-05-10T02:49:58.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、通过扩展-Object-实现"><a href="#一、通过扩展-Object-实现" class="headerlink" title="一、通过扩展 Object 实现"></a>一、通过扩展 Object 实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">add</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.add = add;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义一个子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义一个全局都可以用的继承方法</span></div><div class="line"><span class="built_in">Object</span>.prototype.extend = <span class="function"><span class="keyword">function</span>(<span class="params">ParentObj</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> ParentObj)&#123;</div><div class="line">        <span class="keyword">this</span>[i] = ParentObj[i]</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Child.extend(Parent(<span class="string">'China'</span>)); <span class="comment">// 使用我们的方法进行继承</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Child(<span class="string">'lemon'</span>)   <span class="comment">// 实例化对象（初始化数据）</span></div><div class="line"><span class="built_in">console</span>.log(obj.add);  <span class="comment">// 此时我们就可以调用父类中的方法或属性了，输出结果：China</span></div></pre></td></tr></table></figure>
<p>这种方法的原理是通过 <code>浅拷贝</code> 实现的，实际上是将父类的所以属性复制到子类当中，从而使得子类可以访问父类的属性。<a id="more"></a></p>
<p>##</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>##</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、通过扩展-Object-实现&quot;&gt;&lt;a href=&quot;#一、通过扩展-Object-实现&quot; class=&quot;headerlink&quot; title=&quot;一、通过扩展 Object 实现&quot;&gt;&lt;/a&gt;一、通过扩展 Object 实现&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个父类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;add&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.add = add;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个子类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个全局都可以用的继承方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.extend = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ParentObj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ParentObj)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i] = ParentObj[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Child.extend(Parent(&lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 使用我们的方法进行继承&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child(&lt;span class=&quot;string&quot;&gt;&#39;lemon&#39;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;// 实例化对象（初始化数据）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.add);  &lt;span class=&quot;comment&quot;&gt;// 此时我们就可以调用父类中的方法或属性了，输出结果：China&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法的原理是通过 &lt;code&gt;浅拷贝&lt;/code&gt; 实现的，实际上是将父类的所以属性复制到子类当中，从而使得子类可以访问父类的属性。
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：继承方式</title>
    <link href="http://www.dengfuping.com/2017/05/09/javascript-inheritance/"/>
    <id>http://www.dengfuping.com/2017/05/09/javascript-inheritance/</id>
    <published>2017-05-09T09:08:47.000Z</published>
    <updated>2017-05-23T06:54:19.359Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p>
<p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">阮一峰：JavaScript 构造函数的继承</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">阮一峰：非构造函数的继承</a></p>
<p><a href="http://dudodo.cc/2017/04/11/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/" target="_blank" rel="external">理解 JS 中的继承</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/24964910?refer=muyichuanqi" target="_blank" rel="external">js原型链继承，借用构造函数继承,组合继承，寄生式继承，寄生组合继承</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&quot;&gt;阮一峰：JavaScript 构造函数的继承&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&quot;&gt;阮一峰：非构造函数的继承&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dudodo.cc/2017/04/11/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/&quot;&gt;理解 JS 中的继承&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24964910?refer=muyichuanqi&quot;&gt;js原型链继承，借用构造函数继承,组合继承，寄生式继承，寄生组合继承&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript：闭包</title>
    <link href="http://www.dengfuping.com/2017/05/06/javascript-closure/"/>
    <id>http://www.dengfuping.com/2017/05/06/javascript-closure/</id>
    <published>2017-05-06T10:32:37.000Z</published>
    <updated>2017-07-10T10:32:45.118Z</updated>
    
    <content type="html"><![CDATA[<p>一、什么是闭包？闭包有什么好处？使用闭包要注意什么？</p>
<p>闭包：函数嵌套函数，内部函数可以引用外部函数的参数和变量，变量和参数不会被垃圾回收机制所回收</p>
<p>好处：<br>（1）希望一个变量长期驻扎在内存之中</p>
<p>（2）避免全局变量的污染</p>
<p>（3）私有成员的存在</p>
<p>注意：可能会造成内存泄漏。<a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、什么是闭包？闭包有什么好处？使用闭包要注意什么？&lt;/p&gt;
&lt;p&gt;闭包：函数嵌套函数，内部函数可以引用外部函数的参数和变量，变量和参数不会被垃圾回收机制所回收&lt;/p&gt;
&lt;p&gt;好处：&lt;br&gt;（1）希望一个变量长期驻扎在内存之中&lt;/p&gt;
&lt;p&gt;（2）避免全局变量的污染&lt;/p&gt;
&lt;p&gt;（3）私有成员的存在&lt;/p&gt;
&lt;p&gt;注意：可能会造成内存泄漏。
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.dengfuping.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS（四）：垂直居中常用方法</title>
    <link href="http://www.dengfuping.com/2017/05/06/css-vertical-align/"/>
    <id>http://www.dengfuping.com/2017/05/06/css-vertical-align/</id>
    <published>2017-05-06T10:11:45.000Z</published>
    <updated>2017-05-06T10:25:59.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h2><p>若元素是单行文本, 则可设置 line-height 等于父元素高度</p>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>（1）使用 <code>flex</code> 布局，给 <code>父元素</code> 设置如下属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单行文本&quot;&gt;&lt;a href=&quot;#单行文本&quot; class=&quot;headerlink&quot; title=&quot;单行文本&quot;&gt;&lt;/a&gt;单行文本&lt;/h2&gt;&lt;p&gt;若元素是单行文本, 则可设置 line-height 等于父元素高度&lt;/p&gt;
&lt;h2 id=&quot;块级元素&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="CSS" scheme="http://www.dengfuping.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.dengfuping.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS（三）：水平居中常用方法</title>
    <link href="http://www.dengfuping.com/2017/05/06/css-horizontal-align/"/>
    <id>http://www.dengfuping.com/2017/05/06/css-horizontal-align/</id>
    <published>2017-05-06T09:49:42.000Z</published>
    <updated>2017-05-06T10:29:10.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>给其 <code>父元素</code> 设置 <code>text-align: center</code> ，即可实现行内元素水平居中。</p>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>（1）给 <code>该元素</code> 设置 <code>margin: 0 auto</code> 即可实现块级元素水平居中。适用于 <code>定宽块状元素</code> 。</p>
<p>（2）使用 <code>flex</code> 布局，给 <code>父元素</code> 设置如下属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;行内元素&quot;&gt;&lt;a href=&quot;#行内元素&quot; class=&quot;headerlink&quot; title=&quot;行内元素&quot;&gt;&lt;/a&gt;行内元素&lt;/h2&gt;&lt;p&gt;给其 &lt;code&gt;父元素&lt;/code&gt; 设置 &lt;code&gt;text-align: center&lt;/code&gt; ，即可实现行内
    
    </summary>
    
      <category term="CSS" scheme="http://www.dengfuping.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.dengfuping.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS（二）：BFC 深入理解</title>
    <link href="http://www.dengfuping.com/2017/05/04/css-BFC/"/>
    <id>http://www.dengfuping.com/2017/05/04/css-BFC/</id>
    <published>2017-05-04T08:54:58.000Z</published>
    <updated>2017-05-06T09:54:21.246Z</updated>
    
    <content type="html"><![CDATA[<p>请参考文章：<a href="https://juejin.im/post/5909db2fda2f60005d2093db" target="_blank" rel="external">布局概念之关于CSS-BFC深入理解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请参考文章：&lt;a href=&quot;https://juejin.im/post/5909db2fda2f60005d2093db&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;布局概念之关于CSS-BFC深入理解&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="CSS" scheme="http://www.dengfuping.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.dengfuping.com/tags/CSS/"/>
    
  </entry>
  
</feed>
