<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[操作系统原理作业（十）：ex01.pv作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-10/</url>
      <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>1、有一个仓库，可以存放 A 和 B 两种产品，仓库的存储空间足够大，但要求：<br>（1）一次只能存入一种产品（A 或 B）；<br>（2）-N &lt; (A 产品数量 - B 产品数量) &lt; M。<br>其中， N 和 M 是正整数。试用“存放 A”和“存放 B”以及 P、 V 操作描述产品 A 与产品 B 的入库过程。<a id="more"></a><br><strong>解答：</strong><br>由题中的表达式可得：<br>B产品数量 - A产品数量<n a产品数量="" -="" b产品数量<m="" 则此题意为：="" （1）若只放人a产品，而不放入b产品，则a产品最多可放m-1次便被阻塞，即a进程每操作一次就应当将计数器减1（计数器初值为m-1），当计数器值为0时，进程a被阻塞；每当放入一个b产品，则可令a产品的计数器增加1，表明a产品可以多一次放入产品的机会；="" （2）同理，若只放人b产品，而不放入a产品，则b产品最多可放n-1次便被阻塞，即a进程每操作一次就应当将计数器减1（计数器初值为n-1）。当计数器值为0时，进程b被阻塞；每当放人一个a产品，则可令b产品的计数器增加1，表明b产品可以多一次放入产品的机会。="" 由此可见，该问题是一个同步控制问题。实现其入库过程如下：="" <figure="" class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;  </div><div class="line">semaphore mutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line">semaphore a = M - <span class="number">1</span>；  <span class="comment">//存放A的资源信号量，初值为M-1</span></div><div class="line">semaphore b = N - <span class="number">1</span>;   <span class="comment">//存放B的资源信号量，初值为N-1</span></div><div class="line"></div><div class="line">PA:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;a);</div><div class="line">    P(&amp;mutex);</div><div class="line">    A 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PB:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;b);</div><div class="line">    P(&amp;mutex);</div><div class="line">    B 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;a);</div><div class="line">&#125;</div></pre></td></tr></table></n></p>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>2、桌子上有一只盘子，最多可容纳两个水果，每次只能放入或取出一个水果。爸爸专向盘子放苹果（ apple），妈妈专向盘子中放桔子（ orange）；两个儿子专等吃盘子中的桔子，两个女儿专等吃盘子中的苹果。请用 P、 V 操作来实现爸爸、妈妈、儿子、女儿之间的<br>同步与互斥关系。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mutex = <span class="number">1</span>;    <span class="comment">//互斥信号量, 其初值为1</span></div><div class="line">semaphore empty = <span class="number">2</span>;    <span class="comment">//记录允许向盘子中放入水果的个数，初值为2</span></div><div class="line">semaphore orange = <span class="number">0</span>;   <span class="comment">//盘子中已放入的苹果的个数，初值为0</span></div><div class="line">semaphore apple = <span class="number">0</span>;    <span class="comment">//盘子中已放入的桔子的个数，初值为0</span></div><div class="line"></div><div class="line">main() </div><div class="line">&#123;</div><div class="line">    Cobegin</div><div class="line">    &#123;</div><div class="line">        father      <span class="comment">//父亲进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                P(empty);     <span class="comment">//减少盘中可放入的水果数</span></div><div class="line">                P(mutex);     <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                向盘中放苹果;</div><div class="line">                V(mutex);     <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(apple);     <span class="comment">//递增盘中的苹果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mother     <span class="comment">//母亲进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(empty);     <span class="comment">//减少盘中可放入的水果数</span></div><div class="line">                P(mutex);     <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                向盘中放桔子;</div><div class="line">                V(mutex);     <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(orange);    <span class="comment">//递增盘中的桔子数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        daughteri（i = <span class="number">1</span>, <span class="number">2</span>）    <span class="comment">//两女儿进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(apple);       <span class="comment">//减少盘中苹果数</span></div><div class="line">                P(mutex);      <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                取盘中苹果;</div><div class="line">                V(mutex);      <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(empty);      <span class="comment">//递增盘中可放入的水果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sonj（j = <span class="number">1</span>, <span class="number">2</span>）         <span class="comment">//两儿子进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(orange);      <span class="comment">//减少盘中桔子数</span></div><div class="line">                P(mutex);      <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                取盘中桔子;</div><div class="line">                V(mutex);      <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(empty);      <span class="comment">//递增盘中可放入的水果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Coend</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>3、有一个理发师，一把理发椅和 N 把供等候理发的顾客坐的椅子。如果没有顾客，则理发师便在理发师椅子上睡觉；当一个顾客到来时，必须唤醒理发师进行理发；如果理发师正在理发时又有顾客来到，则如果有空椅子可坐，他就坐下来等，如果没有空椅子，他就离开。为理发师和顾客各编一段程序（伪代码）描述他们的行为，要求不能带有竞争条件。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mutex = <span class="number">1</span>;     <span class="comment">//互斥信号量，初值为1.</span></div><div class="line">semaphore wait = <span class="number">0</span>;      <span class="comment">//等待服务的顾客数</span></div><div class="line">semaphore barbers = <span class="number">0</span>;   <span class="comment">//等待顾客的理发师数</span></div><div class="line"><span class="keyword">int</span> custNum = <span class="number">0</span>;         <span class="comment">//等待的顾客(还没理发的)</span></div><div class="line"></div><div class="line">Costumer()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mutex);              <span class="comment">//申请理发</span></div><div class="line">        <span class="keyword">if</span> (custNum &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (custNum &lt; N)    <span class="comment">//若等待人数小于N</span></div><div class="line">            &#123;</div><div class="line">                V(mutex);      <span class="comment">//释放进程等待</span></div><div class="line">                CustNum++;   <span class="comment">//增加等待人数</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>               <span class="comment">//若等待人数超过N</span></div><div class="line">            &#123;</div><div class="line">                V(mutex);      <span class="comment">//释放进程等待</span></div><div class="line">                离开;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>                   <span class="comment">//若目前无人等待</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            V(barbers);         <span class="comment">//如果必要的话，唤醒理发师</span></div><div class="line">            理发;</div><div class="line">            离开;</div><div class="line">            P(mutex);          <span class="comment">//要求进程等待</span></div><div class="line">            custNum--;        <span class="comment">//顾客人数减1</span></div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            V(wait);            <span class="comment">//等待人数减1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Barber() </div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mutex);              <span class="comment">//要求进程等待</span></div><div class="line">        <span class="keyword">if</span> (custNum == <span class="number">0</span>)       <span class="comment">//目前无顾客</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            P(barbers);         <span class="comment">//理发师睡觉　　</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            理发;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>4、吸烟者问题。三个吸烟者在一间房间内，还有一个香烟供应者。为了制造并抽掉香烟，每个吸烟者需要三样东西：烟草、纸和火柴。供应者有丰富的货物提供。三个吸烟者中，第一个有自己的烟草，第二个有自己的纸，第三个有自己的火柴。供应者将两样东西放在桌子上，允许一个吸烟者进行对健康不利的吸烟。当吸烟者完成吸烟后唤醒供应者，供应者再放两样东西（随机地）在桌面上，然后唤醒另一个吸烟者。试为吸烟者和供应者编写程序解决问题。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore S = <span class="number">1</span>;       <span class="comment">//供应者</span></div><div class="line">semaphore S1 = <span class="number">0</span>, S2 = <span class="number">0</span>, S3 = <span class="number">0</span>;    <span class="comment">//三个吸烟者</span></div><div class="line"><span class="keyword">bool</span> flag1 = <span class="literal">true</span>, flag2 = <span class="literal">true</span>, flag3 = <span class="literal">true</span>;  <span class="comment">//三种吸烟原料</span></div><div class="line"></div><div class="line">Apply()           <span class="comment">//供应者</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S);</div><div class="line">        取两样香烟原料放桌上,由flagi标记;</div><div class="line">        <span class="keyword">if</span> (flag2 &amp;&amp; flag3)        <span class="comment">//供纸和火柴</span></div><div class="line">            V(S1);              <span class="comment">//唤醒吸烟者一</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag1 &amp;&amp; flag3)    <span class="comment">//供烟草和火柴</span></div><div class="line">            V(S2);              <span class="comment">//唤醒吸烟者二</span></div><div class="line">        <span class="keyword">else</span>                    <span class="comment">//供烟草和纸</span></div><div class="line">            V(S3);              <span class="comment">//唤醒吸烟者三</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker1()           <span class="comment">//吸烟者一</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S1);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker2()           <span class="comment">//吸烟者二</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S2);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker3()           <span class="comment">//吸烟者三</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S3);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h2><p>5、面包师问题。面包师有很多面包和蛋糕，由 n 个销售人员销售。每个顾客进店后先取一个号，并且等着叫号。当一个销售人员空闲下来，就叫下一个号。请分别编写销售人员和顾客进程的程序。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore buyer = <span class="number">0</span>;           <span class="comment">//顾客人数</span></div><div class="line">semaphore seller = n;          <span class="comment">//销售人员数</span></div><div class="line">semaphore mutex_s = <span class="number">1</span>;         <span class="comment">//用于销售人员的互斥信号量</span></div><div class="line">semaphore mutex_b = <span class="number">1</span>;         <span class="comment">//用于顾客的互斥信号量</span></div><div class="line"><span class="keyword">int</span> count_s = <span class="number">0</span>;               <span class="comment">//记录取号的值</span></div><div class="line"><span class="keyword">int</span> count_b = <span class="number">0</span>;               <span class="comment">//记录叫号的值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buy</span><span class="params">()</span>                     <span class="comment">//顾客进程</span></span></div><div class="line">&#123;</div><div class="line">    进店;</div><div class="line">    P(mutex_b);        <span class="comment">//取号</span></div><div class="line">    count_b++;</div><div class="line">    V(mutex_b);</div><div class="line">    V(buyer);</div><div class="line">    P(seller);         <span class="comment">//等待叫号</span></div><div class="line">    买面包;</div><div class="line">    离开;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sell</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">    &#123;</div><div class="line">        P(buyer);</div><div class="line">        P(mutex_s);     <span class="comment">//叫号</span></div><div class="line">        count_s++;</div><div class="line">        叫编号为count_s的顾客;</div><div class="line">        V(mutex_s);</div><div class="line">        V(seller);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h2><p>6、桌上有一空盘，运行存放一只水果，爸爸可向盘中放苹果，也可放桔子，儿子专等吃盘中的桔子，女儿专等吃盘中的苹果。规定当盘中空时一次只能放一个水果供吃者取用，用P、V原语实现爸爸儿子和女儿3个并发进程的同步。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore S = <span class="number">1</span>;      <span class="comment">//S 表示盘子是否为空；</span></div><div class="line">semaphore Sa = <span class="number">0</span>;     <span class="comment">//Sa 表示盘中是否有苹果；</span></div><div class="line">semaphore Sb = <span class="number">0</span>;     <span class="comment">//Sb 表示盘中是否有桔子；</span></div><div class="line"></div><div class="line">Father()              <span class="comment">//父亲进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S);</div><div class="line">        将水果放入盘中;</div><div class="line">        <span class="keyword">if</span> (放入的是桔子)</div><div class="line">            V(Sb);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            V(Sa);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Son()                  <span class="comment">//儿子进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(Sb);</div><div class="line">        从盘中取出桔子;</div><div class="line">        V(S);</div><div class="line">        吃桔子;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Daughter()             <span class="comment">//女儿进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(Sa);</div><div class="line">        从盘中取出苹果;</div><div class="line">        V(S);</div><div class="line">        吃苹果;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h2><p>7、写者优先的读者－－写者问题。读者-写者问题为数据库访问建立了一个模型。例如,一个系统,其中有许多竞争的进程试图读写其中的数据,多个进程同时读是可以接受的,但如果一个进程正在更新数据库,则所有的其他进程都不能访问数据库，即使读操作也不行。写者优先是指当一个写者到达时，将阻止其后面的读者进入数据库，直到其离开为止。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mut1 = <span class="number">1</span>, mut2 = <span class="number">1</span>, wmutex = <span class="number">1</span>, fmutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line"><span class="keyword">int</span> rcount = <span class="number">0</span>, wcount = <span class="number">0</span>;     <span class="comment">//读写者人数</span></div><div class="line"></div><div class="line">Writer()                        <span class="comment">//写者进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mut1);</div><div class="line">        wcount = wcount + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (wcount == <span class="number">1</span>)</div><div class="line">            P(fmutex);          <span class="comment">//如有读者，则写者阻塞在此处</span></div><div class="line">        V(mut1);</div><div class="line">        P(wmutex);</div><div class="line">        写;</div><div class="line">        V(wmutex);</div><div class="line">        P(mut1);</div><div class="line">        wcount = wcount - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (wcount == <span class="number">0</span>)</div><div class="line">            V(fmutex);</div><div class="line">        V(mut1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Reader()                        <span class="comment">//读者进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mut2);</div><div class="line">        rcount = rcount + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (rcount == <span class="number">1</span>)</div><div class="line">            P(fmutex);</div><div class="line">        V(mut2);</div><div class="line">        读;</div><div class="line">        P(mut2);</div><div class="line">        rcount = rcount - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (rcount == <span class="number">0</span>)</div><div class="line">            V(fmutex);</div><div class="line">        V(mut2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h2><p>8、在天津大学与南开大学之间有一条弯曲的小路，这条路上每次每个方向上只允许一辆自行车通过。但其中有一个小的安全岛 M，同时允许两辆自行车停留，可供两辆自行车已从两端进入小路的情况下错车使用。如图所示。<br><img src="http://p1.bpimg.com/567571/0fd906b50c1f4ed1.png" alt=""><br>下面的算法可以使来往的自行车均可顺利通过。其中使用了4个信号量，T代表天大路口资源，S代表南开路口资源，L代表从天大到安全岛一段路的资源，K 代表从南开到安全岛一段路的资源。程序如下，请在空白位置处填写适当的 PV 操作语句，每处空白可能包含若干个 PV 操作语句。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">begin</div><div class="line">    t:=<span class="number">1</span>;s:=<span class="number">1</span>;l:=<span class="number">1</span>;k:=<span class="number">1</span>;</div><div class="line">    cobegin</div><div class="line">    从天大到南开的进程</div><div class="line">        begin</div><div class="line">            ______(<span class="number">1</span>)______</div><div class="line">            通过 L 路段;</div><div class="line">            进入安全岛 M；</div><div class="line">            ______(<span class="number">2</span>)______</div><div class="line">            通过 K 路段</div><div class="line">            ______(<span class="number">3</span>)______</div><div class="line">        end</div><div class="line">    从南开到天大的进程</div><div class="line">        begin</div><div class="line">            略，与“从天大到南开的进程”相反。</div><div class="line">        end</div><div class="line">    coend</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p><strong>解答：</strong><br>(1) P(t); P(l);<br>(2) V(l); P(k);<br>(3) V(k); V(t);</p>
<h2 id="题目9"><a href="#题目9" class="headerlink" title="题目9"></a>题目9</h2><p>9、三个进程 P1、P2、P3 互斥使用一个包含N(N&gt;0)个单元的缓冲区。P1每次用 produce()生成一个正整数并用put()送入缓冲区某一空单元中;P2每次用 getodd()从该缓冲区中取出一个奇数并用countodd()统计奇数个数;P3每次用 geteven()从该缓冲区中取出一个偶数并用counteven()统计偶数个数。请用信号量机制实现这三个进程的同步与互斥活动,并说明所定义信号量的含义。要求用伪代码描述。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">P1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        X = produce();      <span class="comment">//生成一个数</span></div><div class="line">        P(empty);           <span class="comment">//是否有空单元格</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        Put();</div><div class="line">        <span class="keyword">if</span> (X % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">            V(s2);          <span class="comment">//如果是偶数，向P3发出信号</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            V(s1);          <span class="comment">//如果是奇数，向P2发出信号</span></div><div class="line">        V(mutex);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">P2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(s1);              <span class="comment">//收到P1发送来的信号，已产生奇数</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        getodd();</div><div class="line">        countodd():=countodd() + <span class="number">1</span>;</div><div class="line">        V(mutex);</div><div class="line">        V(empty);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">P3()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(s2);              <span class="comment">//收到P1发送来的信号，已产生偶数</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        geteven();</div><div class="line">        counteven() := counteven() + <span class="number">1</span>;</div><div class="line">        V(mutex);</div><div class="line">        V(empty);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（九）：Barriers]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-9/</url>
      <content type="html"><![CDATA[<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>使用环境变量（condition variables）来实现barrier，以在多线程的并行计算中达到同步的目的。其中barrier相当于一堵“墙”，先到达barrier的线程需要等待后到达barrier的线程。对于源代码中的一组线程来说，只有其它线程都到达了这堵“墙”，系统才会允许其中的线程继续运行。可以说，这堵“墙”起到了拦截的作用，以便达到让所有的线程实现同步运行的目的。<a id="more"></a></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>下载barrier.c源文件，并在Linux环境下进行编译运行，出现“Assertion failed”错误：<br><img src="http://p1.bqimg.com/567571/2fcc9be79e34e946.png" alt=""></p>
<p>修改barrier.c中的barrier()函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">barrier</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//对临界区进行加锁，barrier_mutex是开头定义的信号量</span></div><div class="line">  pthread_mutex_lock(&amp;bstate.barrier_mutex);</div><div class="line">  <span class="comment">//将到达barrier的线程数加1       </span></div><div class="line">  bstate.nthread++; </div><div class="line">  <span class="comment">//当所有的线程都到达barrier时</span></div><div class="line">  <span class="keyword">if</span> (bstate.nthread == nthread) &#123;</div><div class="line">      <span class="comment">//针对barrier_cond这个环境变量广播，表示激活所有线程以继续执行</span></div><div class="line">      pthread_cond_broadcast(&amp;bstate.barrier_cond);</div><div class="line">      bstate.nthread = <span class="number">0</span>;</div><div class="line">      bstate.round++;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//否则进入sleep状态，并释放互斥锁</span></div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">      pthread_cond_wait(&amp;bstate.barrier_cond, &amp;bstate.barrier_mutex);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  pthread_mutex_unlock(&amp;bstate.barrier_mutex);</div><div class="line"></div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再次运行barrier.c，运行成功：<br><img src="http://i1.piimg.com/567571/42077968a9fa91eb.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（八）：bigger files for xv6]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-8/</url>
      <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>修改Makefile文件：将CPUS的值设为1，,并添加如下语句。目的是加快xv6创建大文件时的qemu的运行速度：<a id="more"></a><br><img src="http://p1.bqimg.com/567571/ef39f193fcc39b12.png" alt=""></p>
<p>修改param.h文件，将文件系统的最大数据块数设置为20000：<br><img src="http://p1.bpimg.com/567571/dce5d3e509538fe3.png" alt=""></p>
<p>下载big.c文件放入xv6的目录下，并在Makefile文件中的UPROGS列表中增加对big命令的引用：<br><img src="http://i1.piimg.com/567571/f06e9fbf7f72ded6.png" alt=""></p>
<p>启动xv6，输入big命令，显示“wrote 140 sectors”，说明所有的准备工作已完成：<br><img src="http://i1.piimg.com/567571/c7be50364293978d.png" alt=""></p>
<p>修改fs.c中的bmap()函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> uint</span></div><div class="line"><span class="title">bmap</span><span class="params">(<span class="keyword">struct</span> inode *ip, uint bn)</span></div><div class="line">&#123;</div><div class="line">  uint addr, *a, *indirect, *double_indirect,indirect_idx, double_indirect_idx;</div><div class="line">  <span class="keyword">struct</span> buf *bp, *bp2;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(bn &lt; NDIRECT)&#123;</div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[bn] = addr =balloc(ip-&gt;dev);</div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line">  bn -= NDIRECT;</div><div class="line">  <span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</div><div class="line">    <span class="comment">// Load indirect block, allocating ifnecessary.</span></div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[NDIRECT] = addr =balloc(ip-&gt;dev);</div><div class="line"></div><div class="line">    bp = bread(ip-&gt;dev, addr);</div><div class="line">    a = (uint*)bp-&gt;data;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</div><div class="line">      a[bn] = addr = balloc(ip-&gt;dev);</div><div class="line">      log_write(bp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    brelse(bp);</div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  bn -= NINDIRECT;</div><div class="line">  <span class="keyword">if</span> (bn &lt; NINDIRECT*NINDIRECT) &#123;</div><div class="line">    <span class="comment">// Load first indirect block, allocating ifnecessary.</span></div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT + <span class="number">1</span>]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[NDIRECT + <span class="number">1</span>] = addr =balloc(ip-&gt;dev);</div><div class="line">    bp = bread(ip-&gt;dev, addr);</div><div class="line"></div><div class="line">    indirect = (uint *) bp-&gt;data;</div><div class="line">    indirect_idx = bn / NINDIRECT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((addr = indirect[indirect_idx]) == <span class="number">0</span>) &#123;</div><div class="line">      addr = indirect[indirect_idx] =balloc(ip-&gt;dev);</div><div class="line">      log_write(bp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bp2 = bread(ip-&gt;dev, addr);</div><div class="line">    double_indirect = (uint *) bp2-&gt;data;</div><div class="line">    double_indirect_idx = bn % NINDIRECT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((addr = double_indirect[double_indirect_idx]) == <span class="number">0</span>) &#123;</div><div class="line">      addr =double_indirect[double_indirect_idx] = balloc(ip-&gt;dev);</div><div class="line">      log_write(bp2);</div><div class="line">    &#125;</div><div class="line">    brelse(bp2);</div><div class="line">    brelse(bp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  panic(<span class="string">"bmap: out of range"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打开fs.h文件，将NDIRECT的值改为11，对应的架构数据块地址的索引由加1变为加2，最后将MAXFILE修改成如下值：<br><img src="http://p1.bqimg.com/567571/55f507096f88ec58.png" alt=""></p>
<p>保存后重新启动xv6，输入big命令，得到如下运行结果说明实验成功：<br><img src="http://p1.bqimg.com/567571/ca4dc9f8bd60a027.png" alt=""></p>
<p>其中，16523 = 128*128（doubly-indirectblocks） + 11(singly-indirect blocks) + 128(directblocks)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（六）：xv6 lazy page allocation]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-6/</url>
      <content type="html"><![CDATA[<h2 id="Eliminate-allocation-from-sbrk"><a href="#Eliminate-allocation-from-sbrk" class="headerlink" title="Eliminate allocation from sbrk()"></a>Eliminate allocation from sbrk()</h2><h3 id="修改sys-sbrk-函数"><a href="#修改sys-sbrk-函数" class="headerlink" title="修改sys_sbrk()函数"></a>修改sys_sbrk()函数</h3><p>对系统调用sbrk的实际实现sys_sbrk进行修改，只将进程的内存空间大小增加n而不进行实际的分配，即把调用growproc()函数的部分注释掉并增加内存大小。修改后的sys_sbrk()函数如下：<br><a id="more"></a><br><img src="http://p1.bpimg.com/567571/cab4cebf8cb60fdd.png" alt=""></p>
<p>其中，返回的地址是新分配的地址空间的开头，在此处就是原来地址空间的末尾。我们增加了proc-&gt;sz，但实际却并未增加进程大小。</p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>启动xv6后输入echo hi命令，得到如下错误提示：<br><img src="http://p1.bpimg.com/567571/3dfb755048cfa8c9.png" alt=""></p>
<p>原因是当程序试图操作该内存区域的时候，发现该内存区域不是当前进程所有的，因为在sys_sbrk中根本没分配。</p>
<h2 id="Lazy-allocation"><a href="#Lazy-allocation" class="headerlink" title="Lazy allocation"></a>Lazy allocation</h2><h3 id="去除static关键字"><a href="#去除static关键字" class="headerlink" title="去除static关键字"></a>去除static关键字</h3><p>由于我们需要在trap.c中调用vm.c中的int mappages()函数，所以要去除原本的static关键字。<br><img src="http://i1.piimg.com/567571/82ceee72c19f689b.png" alt=""></p>
<h3 id="声明int-mappages-函数"><a href="#声明int-mappages-函数" class="headerlink" title="声明int mappages()函数"></a>声明int mappages()函数</h3><p>在trap.c中在调用之前使用extern关键字声明int mappages()函数。<br><img src="http://i1.piimg.com/567571/b1c2ef193728d56d.png" alt=""></p>
<h3 id="修改trap-c中void-trap-函数"><a href="#修改trap-c中void-trap-函数" class="headerlink" title="修改trap.c中void trap()函数"></a>修改trap.c中void trap()函数</h3><p>在trap.c中的void trap(struct trapframe *tf)的defaut部分添加以下代码，放置的位置为if模块后。<br><img src="http://i1.piimg.com/567571/0624084e31be7576.png" alt=""></p>
<h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p>重新启动xv6后输入echo hi命令，输出结果如下：<br><img src="http://i1.piimg.com/567571/e81661df030b9b0d.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（五）：xv6 CPU alarm]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-5/</url>
      <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="添加alarm系统调用"><a href="#添加alarm系统调用" class="headerlink" title="添加alarm系统调用"></a>添加alarm系统调用</h3><p>使用grep命令筛选出出现uptime字样的文件和文件中所在行号，以便仿照uptime系统调用实现alarm系统调用：<br><img src="http://i1.piimg.com/567571/b449eb3650ec4c8c.png" alt=""><br><a id="more"></a><br>在syscall.c中添加系统调用函数的外部声明，共有两处地方需要添加：<br><img src="http://p1.bqimg.com/567571/eda2df5a78f77959.png" alt=""></p>
<p><img src="http://p1.bqimg.com/567571/135d3a90b9996530.png" alt=""></p>
<p>在syscall.h中添加系统调用号：<br><img src="http://p1.bqimg.com/567571/0a6babf17226d707.png" alt=""></p>
<p>在sysproc.c中添加系统调用函数sys_alarm()的实现：<br><img src="http://p1.bqimg.com/567571/a43d46dfb8420e8d.png" alt=""></p>
<p>在user.h中添加用户态函数的定义：<br><img src="http://p1.bqimg.com/567571/5046f03de31588b6.png" alt=""></p>
<p>在usys.S中添加用户态函数的实现：<br><img src="http://p1.bqimg.com/567571/80960fe721a22aa1.png" alt=""></p>
<h3 id="创建用户程序alarmtest-c"><a href="#创建用户程序alarmtest-c" class="headerlink" title="创建用户程序alarmtest.c"></a>创建用户程序alarmtest.c</h3><p>由于我们还需要在用户空间来对内核提供的系统命令进行调用，新建用户程序alarmtest.c文件，写入以下代码：<br><img src="http://p1.bqimg.com/567571/7d42436daf478335.png" alt=""></p>
<h3 id="修改Makefile文件"><a href="#修改Makefile文件" class="headerlink" title="修改Makefile文件"></a>修改Makefile文件</h3><p>在Makefile文件UPROGS处添加_alarmtest：<br><img src="http://p1.bqimg.com/567571/4ae5aea7adfda51e.png" alt=""></p>
<h3 id="修改proc-h文件"><a href="#修改proc-h文件" class="headerlink" title="修改proc.h文件"></a>修改proc.h文件</h3><p>在proc.h文件的proc结构体中，添加以下三个属性：<br><img src="http://p1.bqimg.com/567571/3a02394c1382a3d7.png" alt=""></p>
<h3 id="修改trap-c文件"><a href="#修改trap-c文件" class="headerlink" title="修改trap.c文件"></a>修改trap.c文件</h3><p>在trap.c文件中的“case T_IRQ0 + IRQ_TIMER”位置处添加以下代码：<br><img src="http://p1.bqimg.com/567571/19c29f3ddddb7149.png" alt=""></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="http://p1.bqimg.com/567571/42e8413eb6f94c0f.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（四）：xv6 system calls]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-4/</url>
      <content type="html"><![CDATA[<h2 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>第一部分的主要任务是在进行系统调用时，打印出系统调用的名字和返回值。<br><a id="more"></a></p>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>系统调用函数syscall()在syscall.c文件中，我们只需要修改syscall()函数即可，即在syscall()函数内添加对应的printf语句。</p>
<h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">syscall</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> num;</div><div class="line"></div><div class="line">  num = proc-&gt;tf-&gt;eax;</div><div class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</div><div class="line">    proc-&gt;tf-&gt;eax = syscalls[num]();</div><div class="line">    <span class="keyword">switch</span> (num) &#123;</div><div class="line">      <span class="keyword">case</span> SYS_fork:</div><div class="line">        cprintf(<span class="string">"fork -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_exit:</div><div class="line">        cprintf(<span class="string">"exit -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_wait:</div><div class="line">        cprintf(<span class="string">"wait -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_pipe:</div><div class="line">        cprintf(<span class="string">"pipe -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_read:</div><div class="line">        cprintf(<span class="string">"read -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_kill:</div><div class="line">        cprintf(<span class="string">"kill -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_exec:</div><div class="line">        cprintf(<span class="string">"exec -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_fstat:</div><div class="line">        cprintf(<span class="string">"fstat -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_chdir:</div><div class="line">        cprintf(<span class="string">"chdir -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_dup:</div><div class="line">        cprintf(<span class="string">"dup -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_getpid:</div><div class="line">        cprintf(<span class="string">"getpid -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_sbrk:</div><div class="line">        cprintf(<span class="string">"sbrk -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_sleep:</div><div class="line">        cprintf(<span class="string">"sleep -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_uptime:</div><div class="line">        cprintf(<span class="string">"uptime -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_open:</div><div class="line">        cprintf(<span class="string">"open -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_write:</div><div class="line">        cprintf(<span class="string">"write -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_mknod:</div><div class="line">        cprintf(<span class="string">"mknod -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_unlink:</div><div class="line">        cprintf(<span class="string">"unlink -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_link:</div><div class="line">        cprintf(<span class="string">"link -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_mkdir:</div><div class="line">        cprintf(<span class="string">"mkdir -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_close:</div><div class="line">        cprintf(<span class="string">"close -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_date:</div><div class="line">        cprintf(<span class="string">"date -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        panic(<span class="string">"should never get here\n"</span>);</div><div class="line">    &#125;</div><div class="line">    cprintf(<span class="string">"%d\n"</span>, proc-&gt;tf-&gt;eax);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    cprintf(<span class="string">"%d %s: unknown sys call %d\n"</span>,</div><div class="line">            proc-&gt;pid, proc-&gt;name, num);</div><div class="line">    proc-&gt;tf-&gt;eax = <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://i1.piimg.com/567571/a1b83057184a1ee0.png" alt=""></p>
<h2 id="Date-system-call"><a href="#Date-system-call" class="headerlink" title="Date system call"></a>Date system call</h2><h3 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h3><p>第二部分的主要任务是想xv6系统中添加并实现一个date系统调用，用以输出当前的UTC时间。</p>
<h3 id="实验思路-1"><a href="#实验思路-1" class="headerlink" title="实验思路"></a>实验思路</h3><p>要实现date系统调用主要是添加系统调用号和添加对应的系统调用函数，具体过程可以仿照uptime系统调用的实现。</p>
<h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>使用grep命令筛选出出现uptime字样的文件和文件中所在行号，以便仿照uptime系统调用实现date系统调用：<br><img src="http://i1.piimg.com/567571/b449eb3650ec4c8c.png" alt=""></p>
<p>在syscall.c中添加系统调用函数的外部声明，共有两处地方需要添加：<br><img src="http://i1.piimg.com/567571/754313e85d8b68a3.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/977b1f2eec01c705.png" alt=""></p>
<p>在syscall.h中添加系统调用号：<br><img src="http://p1.bqimg.com/567571/e260f6e430b3a752.png" alt=""></p>
<p>在sysproc.c中添加系统调用函数sys_date()的实现：<br><img src="http://p1.bqimg.com/567571/cbf00e5837332ae7.png" alt=""></p>
<p>在user.h中添加用户态函数的定义：<br><img src="http://p1.bqimg.com/567571/5aa3aba5e841340a.png" alt=""></p>
<p>在usys.S中添加用户态函数的实现：<br><img src="http://p1.bqimg.com/567571/ff544777d4709eab.png" alt=""></p>
<p>由于我们还需要在用户空间来对内核提供的系统命令进行调用，新建用户程序date.c文件，写入以下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"types.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"user.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"date.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">struct</span> rtcdate r;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (date(&amp;r)) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"date failed\n"</span>);</div><div class="line">    <span class="built_in">exit</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// your code to print the time in any format you like...</span></div><div class="line">  <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"The current UTC time:     %d:%d:%d, %d/%d, %d\n"</span>, r.hour, r.minute, r.second, r.month, r.day, r.year);</div><div class="line">  <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"The current Beijing time: %d:%d:%d, %d/%d, %d\n"</span>, r.hour+<span class="number">8</span>, r.minute, r.second, r.month, r.day, r.year);</div><div class="line"></div><div class="line">  <span class="built_in">exit</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://p1.bqimg.com/567571/cc3c3f090edbf567.png" alt=""></p>
<p>由于北京时间与UTC时间相差8个小时，因此 <code>输出的北京时间 = UTC时间 + 8小时</code>，与实际情况相符，说明 <code>date</code> 这一系统调用添加成功。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（三）：IPC编程问题]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-3/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>有一个仓库，可以存放 A 和 B 两种产品，仓库的存储空间足够大，但要求：<br>（1）一次只能存入一种产品（A 或 B）；<br>（2）-N &lt; (A 产品数量 - B 产品数量) &lt; M。<br>其中， N 和 M 是正整数。试在POSIX系统平台上实现产品A和产品B的入库过程。<br><a id="more"></a></p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;  </div><div class="line">semaphore mutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line">semaphore a = M - <span class="number">1</span>；  <span class="comment">//存放A的资源信号量，初值为M-1</span></div><div class="line">semaphore b = N - <span class="number">1</span>;   <span class="comment">//存放B的资源信号量，初值为N-1</span></div><div class="line"></div><div class="line">PA:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;a);</div><div class="line">    P(&amp;mutex);</div><div class="line">    A 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PB:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;b);</div><div class="line">    P(&amp;mutex);</div><div class="line">    B 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="init-c"><a href="#init-c" class="headerlink" title="init.c"></a>init.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,producer_pid,consumer_pid,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;    </div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line"></div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">    sem_union.val = <span class="number">1</span>;   <span class="comment">//将互斥信号量初始化为1</span></div><div class="line">    <span class="keyword">if</span> (semctl(mutex, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    sem_union.val = <span class="number">10</span>;   <span class="comment">//将产品B的资源信号量初始化为10</span></div><div class="line">    <span class="keyword">if</span> (semctl(b, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sem_union.val = <span class="number">10</span>;  <span class="comment">//将产品A的资源信号量初始化为10</span></div><div class="line">    <span class="keyword">if</span> (semctl(a, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;BUFFER_SIZE;i++)</div><div class="line">	&#123;</div><div class="line">		shared_stuff-&gt;buffer[i] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	shared_stuff -&gt; lo = <span class="number">0</span>;</div><div class="line">	shared_stuff -&gt; hi = <span class="number">0</span>;</div><div class="line">	shared_stuff -&gt; cur = <span class="number">0</span>;</div><div class="line"></div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="proa-c"><a href="#proa-c" class="headerlink" title="proa.c"></a>proa.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;</div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line">	<span class="comment">//产品A的入库过程</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</div><div class="line">	&#123;</div><div class="line">		item = ++(shared_stuff-&gt;cur);</div><div class="line">		sleep(<span class="number">1</span>);      <span class="comment">//等待1s</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Putting product A of No.%d\n"</span>, item);  <span class="comment">//输出正在入库的产品A的序号</span></div><div class="line">		sem_p(a);      <span class="comment">//将产品A的资源信号量减1</span></div><div class="line">		sem_p(mutex);  <span class="comment">//获取互斥锁</span></div><div class="line">		(shared_stuff-&gt;buffer)[(shared_stuff-&gt;hi)] = item;</div><div class="line">		(shared_stuff-&gt;hi) = ((shared_stuff-&gt;hi)+<span class="number">1</span>) % BUFFER_SIZE;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The number of A in resposity is %d\n"</span>, item);  <span class="comment">//输出仓库中产品A的数量</span></div><div class="line">		sem_v(mutex);  <span class="comment">//释放互斥锁</span></div><div class="line">		sem_v(b);     <span class="comment">//将产品B的资源信号量加1</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (shmdt(shared_memory) == <span class="number">-1</span>) &#123;</div><div class="line">       	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmdt failed\n"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Finish!\n"</span>);</div><div class="line">	getchar();</div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="prob-c"><a href="#prob-c" class="headerlink" title="prob.c"></a>prob.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;</div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line"></div><div class="line">	<span class="comment">//产品B的入库过程</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</div><div class="line">	&#123;</div><div class="line">		sem_p(b);</div><div class="line">		sem_p(mutex);  <span class="comment">//获取互斥信号量</span></div><div class="line">		item = shared_stuff-&gt;buffer[shared_stuff-&gt;lo];</div><div class="line">		(shared_stuff-&gt;buffer)[(shared_stuff-&gt;lo)]=<span class="number">0</span>;</div><div class="line">		(shared_stuff-&gt;lo) = ((shared_stuff-&gt;lo)+<span class="number">1</span>) % BUFFER_SIZE;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Putting product A of No.%d\n"</span>, item);  <span class="comment">//输出正在入库的产品B的序号</span></div><div class="line">		sem_v(mutex);  <span class="comment">//释放互斥锁</span></div><div class="line">		sem_v(a);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The number of B in resposity is %d\n"</span>, item);  <span class="comment">//输出仓库中产品B的数量</span></div><div class="line">		sleep(<span class="number">2</span>);  <span class="comment">//等待2s</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (shmdt(shared_memory) == <span class="number">-1</span>) &#123;</div><div class="line">       	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmdt failed\n"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Finish!\n"</span>);</div><div class="line">	getchar();</div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">default: myipc init.c proa.c prob.c</div><div class="line">	gcc -o init myipc.o init.c</div><div class="line">	gcc -o proa myipc.o proa.c</div><div class="line">	gcc -o prob myipc.o prob.c</div><div class="line">myipc: myipc.c</div><div class="line">	gcc -c myipc.c</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="产品A的入库情况"><a href="#产品A的入库情况" class="headerlink" title="产品A的入库情况"></a>产品A的入库情况</h3><p><img src="http://p1.bpimg.com/567571/c78294ab78e96c7d.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/95fdfc3dcb3ed2aa.png" alt=""></p>
<h3 id="产品B的入库情况"><a href="#产品B的入库情况" class="headerlink" title="产品B的入库情况"></a>产品B的入库情况</h3><h2 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h2><p>完整的源代码可以移步至我的 <a href="https://github.com/dengfuping/operating-system-and-xv6" target="_blank" rel="external">Github个人主页</a> 进行查看和下载^-^。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（二）：xv6 shell编程作业之实现shell的基础命令]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-2/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>要求在原有代码的基础上，实现shell的三类基础命令，它们包括：<br><a id="more"></a></p>
<ol>
<li>简单命令（可执行的程序命令，如ls等）</li>
<li>I/O重定向命令，如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"6.828 is cool"</span> &gt; x.txt</div><div class="line">$ cat &lt; x.txt</div></pre></td></tr></table></figure>
<ol>
<li>管道命令（pipe）,如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls | sort | uniq | wc</div></pre></td></tr></table></figure>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>原有代码中定义了输入命令的基础结构体，即 struct cmd。这个结构体就一个成员type，用于记录输入命令的类型： ‘ ‘ 表示简单可执行命令 ‘|’ 表示管道命令, ‘&lt;’ 和’&gt;’ 表示I/O重定向命令。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cmd &#123;</div><div class="line">    <span class="keyword">int</span> type;    <span class="comment">// ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>每一个类型分别继承cmd基础结构体，派生出对应的三类结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> execcmd &#123;</div><div class="line">    <span class="keyword">int</span> type;              <span class="comment">// ' '</span></div><div class="line">    <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> redircmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt;</span></div><div class="line">    <span class="keyword">struct</span> cmd *cmd;   <span class="comment">// the command to be run (e.g., an execcmd)</span></div><div class="line">    <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></div><div class="line">    <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></div><div class="line">    <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> pipecmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// |</span></div><div class="line">    <span class="keyword">struct</span> cmd *left;  <span class="comment">// left side of pipe</span></div><div class="line">    <span class="keyword">struct</span> cmd *right; <span class="comment">// right side of pipe</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>经过分析，设计了以下的运行流程，其中，管道命令的解析和运行是通过递归函数实现的。<br><img src="http://p1.bqimg.com/567571/10acf80cf500c5b2.png" alt=""></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在所给代码中，void runcmd(struct cmd *cmd)这个函数是真正驱动调用实现shell基础功能的核心。通过调用系统接口函数 execv(), open(), close(), dup(), pipe()和在原有代码的基础上，来实现目标功能。</p>
<h3 id="实现简单命令"><a href="#实现简单命令" class="headerlink" title="实现简单命令"></a>实现简单命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">ecmd = (<span class="keyword">struct</span> execcmd*)cmd;</div><div class="line"><span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">execv(search_path(ecmd-&gt;argv[<span class="number">0</span>]), ecmd-&gt;argv);</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"execv returned with error: %s\n"</span>, strerror(errno));</div><div class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">search_path</span><span class="params">(<span class="keyword">char</span> *exe)</span></span></div><div class="line">&#123;</div><div class="line">    DIR *d;</div><div class="line">    <span class="keyword">struct</span> dirent *dir;</div><div class="line">    <span class="keyword">char</span> *paths = getenv(<span class="string">"PATH"</span>);</div><div class="line">    <span class="keyword">char</span> *path_dir = strtok(paths, <span class="string">":"</span>);</div><div class="line">    <span class="keyword">while</span> (path_dir != <span class="literal">NULL</span>) &#123;</div><div class="line">        d = opendir(path_dir);</div><div class="line">        <span class="keyword">if</span> (d == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot open dir: %s"</span>, strerror(errno));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">while</span> ((dir = readdir(d)) != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dir-&gt;d_name, exe) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">char</span> *final_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(path_dir) + <span class="built_in">strlen</span>(exe) + <span class="number">2</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, path_dir);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, <span class="string">"/"</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, exe);</div><div class="line">                    <span class="keyword">return</span> final_path;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        path_dir = strtok(<span class="literal">NULL</span>, <span class="string">":"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exe;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现I-O重定向命令"><a href="#实现I-O重定向命令" class="headerlink" title="实现I/O重定向命令"></a>实现I/O重定向命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">rcmd = (<span class="keyword">struct</span> redircmd*)cmd;</div><div class="line">setup_redirection(rcmd);</div><div class="line">runcmd(rcmd-&gt;cmd);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd *cmd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> redirection_fd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (cmd-&gt;type == <span class="string">'&gt;'</span>) &#123;  </div><div class="line">        <span class="comment">// output redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode, S_IRWXU);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="comment">// input redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (redirection_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open file for redirection: %s\n"</span>,\</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    dup2_wrapped(redirection_fd, cmd-&gt;fd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrapper around the dup2 system call used to check for errors</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span> old_fd, <span class="keyword">int</span> new_fd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> result = dup2(old_fd, new_fd);</div><div class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to dup file descriptors: %s\n"</span>, \</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现管道（pipe）命令"><a href="#实现管道（pipe）命令" class="headerlink" title="实现管道（pipe）命令"></a>实现管道（pipe）命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</div><div class="line"><span class="keyword">int</span> result = pipe(p);</div><div class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pipe system call did not complete successfully: %s\n"</span>,\</div><div class="line">          strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (fork1() == <span class="number">0</span>)</div><div class="line">&#123;  </div><div class="line">    <span class="comment">// child1 executes pcmd-&gt;left</span></div><div class="line">    close(p[<span class="number">0</span>]);</div><div class="line">    dup2_wrapped(p[<span class="number">1</span>], STDOUT_FILENO);</div><div class="line">    close(p[<span class="number">1</span>]);</div><div class="line">    runcmd(pcmd-&gt;left);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (fork1() == <span class="number">0</span>) </div><div class="line">&#123; </div><div class="line">    <span class="comment">// child2 executes pcmd-&gt;right</span></div><div class="line">    close(p[<span class="number">1</span>]);</div><div class="line">    dup2_wrapped(p[<span class="number">0</span>], STDIN_FILENO);</div><div class="line">    close(p[<span class="number">0</span>]);</div><div class="line">    runcmd(pcmd-&gt;right);</div><div class="line">&#125;</div><div class="line">close(p[<span class="number">0</span>]);</div><div class="line">close(p[<span class="number">1</span>]);</div><div class="line">wait(&amp;r);</div><div class="line">wait(&amp;r);</div><div class="line"><span class="built_in">exit</span>(EXIT_SUCCESS);</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Simplifed xv6 shell.</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></div><div class="line"></div><div class="line"><span class="comment">// All commands have at least a type. Having looked at the type, the code</span></div><div class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></div><div class="line"><span class="keyword">struct</span> cmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> execcmd &#123;</div><div class="line">    <span class="keyword">int</span> type;              <span class="comment">// ' '</span></div><div class="line">    <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> redircmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt;</span></div><div class="line">    <span class="keyword">struct</span> cmd *cmd;   <span class="comment">// the command to be run (e.g., an execcmd)</span></div><div class="line">    <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></div><div class="line">    <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></div><div class="line">    <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> pipecmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// |</span></div><div class="line">    <span class="keyword">struct</span> cmd *left;  <span class="comment">// left side of pipe</span></div><div class="line">    <span class="keyword">struct</span> cmd *right; <span class="comment">// right side of pipe</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// Fork but exits on failure.</span></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">search_path</span><span class="params">(<span class="keyword">char</span>*)</span></span>; <span class="comment">// Recursively search through all paths listed</span></div><div class="line"><span class="comment">// in $PATH to find the given executabe</span></div><div class="line"></div><div class="line"><span class="comment">// Execute cmd.  Never returns. Executes in the child.</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">runcmd</span><span class="params">(<span class="keyword">struct</span> cmd *cmd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> p[<span class="number">2</span>], r;</div><div class="line">    <span class="keyword">struct</span> execcmd *ecmd;</div><div class="line">    <span class="keyword">struct</span> pipecmd *pcmd;</div><div class="line">    <span class="keyword">struct</span> redircmd *rcmd;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cmd == <span class="number">0</span>)</div><div class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line"></div><div class="line">    errno = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span>(cmd-&gt;type)&#123;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unknown commnad type\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">            ecmd = (<span class="keyword">struct</span> execcmd*)cmd;</div><div class="line">            <span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</div><div class="line">                <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">            execv(search_path(ecmd-&gt;argv[<span class="number">0</span>]), ecmd-&gt;argv);</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"execv returned with error: %s\n"</span>, strerror(errno));</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">            rcmd = (<span class="keyword">struct</span> redircmd*)cmd;</div><div class="line">            setup_redirection(rcmd);</div><div class="line">            runcmd(rcmd-&gt;cmd);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'|'</span>:</div><div class="line">            pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</div><div class="line">            <span class="keyword">int</span> result = pipe(p);</div><div class="line">            <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pipe system call did not complete successfully: %s\n"</span>,\</div><div class="line">                      strerror(errno));</div><div class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123;  <span class="comment">// child1 executes pcmd-&gt;left</span></div><div class="line">                close(p[<span class="number">0</span>]);</div><div class="line">                dup2_wrapped(p[<span class="number">1</span>], STDOUT_FILENO);</div><div class="line">                close(p[<span class="number">1</span>]);</div><div class="line">                runcmd(pcmd-&gt;left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123; <span class="comment">// child2 executes pcmd-&gt;right</span></div><div class="line">                close(p[<span class="number">1</span>]);</div><div class="line">                dup2_wrapped(p[<span class="number">0</span>], STDIN_FILENO);</div><div class="line">                close(p[<span class="number">0</span>]);</div><div class="line">                runcmd(pcmd-&gt;right);</div><div class="line">            &#125;</div><div class="line">            close(p[<span class="number">0</span>]);</div><div class="line">            close(p[<span class="number">1</span>]);</div><div class="line">            wait(&amp;r);</div><div class="line">            wait(&amp;r);</div><div class="line">            <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// should never get here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd *cmd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> redirection_fd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (cmd-&gt;type == <span class="string">'&gt;'</span>) &#123; <span class="comment">// output redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode, S_IRWXU);</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// input redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (redirection_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open file for redirection: %s\n"</span>,\</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    dup2_wrapped(redirection_fd, cmd-&gt;fd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrapper around the dup2 system call used to check for errors</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span> old_fd, <span class="keyword">int</span> new_fd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> result = dup2(old_fd, new_fd);</div><div class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to dup file descriptors: %s\n"</span>, \</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// List through directories in $PATH to find given executable.</span></div><div class="line"><span class="comment">// Returns the given executable if not found in any of the $PATH</span></div><div class="line"><span class="comment">// directoties.</span></div><div class="line"><span class="function"><span class="keyword">char</span> *</span></div><div class="line"><span class="title">search_path</span><span class="params">(<span class="keyword">char</span> *exe)</span></div><div class="line">&#123;</div><div class="line">    DIR *d;</div><div class="line">    <span class="keyword">struct</span> dirent *dir;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *paths = getenv(<span class="string">"PATH"</span>);</div><div class="line">    <span class="keyword">char</span> *path_dir = strtok(paths, <span class="string">":"</span>);</div><div class="line">    <span class="keyword">while</span> (path_dir != <span class="literal">NULL</span>) &#123;</div><div class="line">        d = opendir(path_dir);</div><div class="line">        <span class="keyword">if</span> (d == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot open dir: %s"</span>, strerror(errno));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">while</span> ((dir = readdir(d)) != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dir-&gt;d_name, exe) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">char</span> *final_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(path_dir) + <span class="built_in">strlen</span>(exe) + <span class="number">2</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, path_dir);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, <span class="string">"/"</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, exe);</div><div class="line">                    <span class="keyword">return</span> final_path;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        path_dir = strtok(<span class="literal">NULL</span>, <span class="string">":"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> exe;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">getcmd</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> nbuf)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isatty(fileno(<span class="built_in">stdin</span>)))</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"6.828$ "</span>);</div><div class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, nbuf);</div><div class="line">    fgets(buf, nbuf, <span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="number">0</span>) <span class="comment">// EOF</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> r;</div><div class="line"></div><div class="line">    <span class="comment">// Read and run input commands.</span></div><div class="line">    <span class="keyword">while</span>(getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>)&#123;</div><div class="line">            <span class="comment">// Clumsy but will have to do for now.</span></div><div class="line">            <span class="comment">// Chdir has no effect on the parent if run in the child.</span></div><div class="line">            buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></div><div class="line">            <span class="keyword">if</span>(chdir(buf+<span class="number">3</span>) &lt; <span class="number">0</span>)</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf+<span class="number">3</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</div><div class="line">            runcmd(parsecmd(buf));</div><div class="line">        wait(&amp;r);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">    pid = fork();</div><div class="line">    <span class="keyword">if</span>(pid == <span class="number">-1</span>)</div><div class="line">        perror(<span class="string">"fork"</span>);</div><div class="line">    <span class="keyword">return</span> pid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">execcmd</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> execcmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = <span class="string">' '</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">redircmd</span><span class="params">(<span class="keyword">struct</span> cmd *subcmd, <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> redircmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = type;</div><div class="line">    cmd-&gt;cmd = subcmd;</div><div class="line">    cmd-&gt;file = file;</div><div class="line">    cmd-&gt;mode = (type == <span class="string">'&lt;'</span>) ?  O_RDONLY : O_WRONLY|O_CREAT|O_TRUNC;</div><div class="line">    cmd-&gt;fd = (type == <span class="string">'&lt;'</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">pipecmd</span><span class="params">(<span class="keyword">struct</span> cmd *left, <span class="keyword">struct</span> cmd *right)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> pipecmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = <span class="string">'|'</span>;</div><div class="line">    cmd-&gt;left = left;</div><div class="line">    cmd-&gt;right = right;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Parsing</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> whitespace[] = <span class="string">" \t\r\n\v"</span>;</div><div class="line"><span class="keyword">char</span> symbols[] = <span class="string">"&lt;|&gt;"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">gettoken</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> **q, <span class="keyword">char</span> **eq)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    s = *ps;</div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    <span class="keyword">if</span>(q)</div><div class="line">        *q = s;</div><div class="line">    ret = *s;</div><div class="line">    <span class="keyword">switch</span>(*s)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'|'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">            s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">            s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            ret = <span class="string">'a'</span>;</div><div class="line">            <span class="keyword">while</span>(s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s))</div><div class="line">                s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(eq)</div><div class="line">        *eq = s;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    *ps = s;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">peek</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> *toks)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s;</div><div class="line"></div><div class="line">    s = *ps;</div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    *ps = s;</div><div class="line">    <span class="keyword">return</span> *s &amp;&amp; <span class="built_in">strchr</span>(toks, *s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parseline</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parseexec</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// make a copy of the characters in the input buffer, starting from s through es.</span></div><div class="line"><span class="comment">// null-terminate the copy to make it a string.</span></div><div class="line"><span class="function"><span class="keyword">char</span></span></div><div class="line">*<span class="title">mkcopy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = es - s;</div><div class="line">    <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(n+<span class="number">1</span>);</div><div class="line">    assert(c);</div><div class="line">    <span class="built_in">strncpy</span>(c, s, n);</div><div class="line">    c[n] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span> *s)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *es;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line"></div><div class="line">    es = s + <span class="built_in">strlen</span>(s);</div><div class="line">    cmd = parseline(&amp;s, es);</div><div class="line">    peek(&amp;s, es, <span class="string">""</span>);</div><div class="line">    <span class="keyword">if</span>(s != es)&#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"leftovers: %s\n"</span>, s);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseline</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line">    cmd = parsepipe(ps, es);</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line"></div><div class="line">    cmd = parseexec(ps, es);</div><div class="line">    <span class="keyword">if</span>(peek(ps, es, <span class="string">"|"</span>))&#123;</div><div class="line">        gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        cmd = pipecmd(cmd, parsepipe(ps, es));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseredirs</span><span class="params">(<span class="keyword">struct</span> cmd *cmd, <span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tok;</div><div class="line">    <span class="keyword">char</span> *q, *eq;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(peek(ps, es, <span class="string">"&lt;&gt;"</span>))&#123;</div><div class="line">        tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(gettoken(ps, es, &amp;q, &amp;eq) != <span class="string">'a'</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"missing file for redirection\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span>(tok)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">                cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&lt;'</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">                cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&gt;'</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseexec</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *q, *eq;</div><div class="line">    <span class="keyword">int</span> tok, argc;</div><div class="line">    <span class="keyword">struct</span> execcmd *cmd;</div><div class="line">    <span class="keyword">struct</span> cmd *ret;</div><div class="line"></div><div class="line">    ret = execcmd();</div><div class="line">    cmd = (<span class="keyword">struct</span> execcmd*)ret;</div><div class="line"></div><div class="line">    argc = <span class="number">0</span>;</div><div class="line">    ret = parseredirs(ret, ps, es);</div><div class="line">    <span class="keyword">while</span>(!peek(ps, es, <span class="string">"|"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>((tok=gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(tok != <span class="string">'a'</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        cmd-&gt;argv[argc] = mkcopy(q, eq);</div><div class="line">        argc++;</div><div class="line">        <span class="keyword">if</span>(argc &gt;= MAXARGS) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        ret = parseredirs(ret, ps, es);</div><div class="line">    &#125;</div><div class="line">    cmd-&gt;argv[argc] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><p><img src="http://i1.piimg.com/567571/2b03083d7bd0141d.png" alt=""></p>
<h3 id="I-O重定向命令"><a href="#I-O重定向命令" class="headerlink" title="I/O重定向命令"></a>I/O重定向命令</h3><p><img src="http://i1.piimg.com/567571/8ff6892c524ed107.png" alt=""></p>
<h3 id="管道（pipe）命令"><a href="#管道（pipe）命令" class="headerlink" title="管道（pipe）命令"></a>管道（pipe）命令</h3><p><img src="http://i1.piimg.com/567571/12b5e5e7b3ad4e67.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（一）：利用Linux多线程机制和积分中值定理计算π的值]]></title>
      <url>http://www.dengfuping.com/2017/01/13/operating-system-homework-1/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>Write a program to figure out π with pthread. The formula is here as follows</p>
<p><img src="http://p1.bpimg.com/567571/9f2c9da32b98fa85.png" alt=""></p>
<a id="more"></a>
<p>You should choose the appropriate N and the number the threads and evaluate how do these two factors affect the performance. Try it in the multi-CPUs or multi-cores system if possible and compare the time consumed in the single CPU with one core system. Remember to add the option of -lpthread in gcc.</p>
<p>Programming guide:<br>Beginning Linux Programming 4e (Chapter 12: POSIX Threads)</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>把线程的执行任务分成若干段，每个线程执行一段，最后将每一段得到的结果相加即可得到π的近似值。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="线程的操作和函数有："><a href="#线程的操作和函数有：" class="headerlink" title="线程的操作和函数有："></a>线程的操作和函数有：</h3><p>（1）线程句柄： pthread_t。下面创建了4个指向线程的句柄：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">pthread_t</span> hThread[numThreads];</div></pre></td></tr></table></figure></p>
<p>（2）创建线程：pthread_create()：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numThreads; i++)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">    hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同步和互斥"><a href="#同步和互斥" class="headerlink" title="同步和互斥"></a>同步和互斥</h3><p>由于同一进程的线程之间大部分的数据都是共享的，在涉及到对共享数据进行读写操作时，就必须使用同步机制，否则就会造成线程们哄抢共享的数据,造成数据混乱甚至是丢失。在此，我们通过给线程加锁（互斥锁）来解决这一问题。</p>
<p>（1）互斥锁句柄：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div></pre></td></tr></table></figure></p>
<p>（2）加锁和解锁：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pthread_mutex_lock(&amp;mut);     <span class="comment">//给线程加锁</span></div><div class="line">pthread_mutex_unlock(&amp;mut);   <span class="comment">//给线程解锁</span></div></pre></td></tr></table></figure></p>
<p>（3）初始化互斥锁：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>);   <span class="comment">//初始化互斥锁</span></div></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> N = <span class="number">100000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">double</span> step;</div><div class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div><div class="line"></div><div class="line"><span class="comment">//依据计算Pi值的积分中值定理实现公式计算</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *pArg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">int</span> temp = *((<span class="keyword">int</span> *)pArg);</div><div class="line">    <span class="keyword">int</span> start = temp * (N / <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> end = start + N / <span class="number">4</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, temp, start, end);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) </div><div class="line">    &#123;</div><div class="line">        pthread_mutex_lock(&amp;mut);   <span class="comment">//给线程加锁</span></div><div class="line">        x = (i + <span class="number">0.5</span>) * step;</div><div class="line">        sum = sum + <span class="number">4.0</span> / (<span class="number">1.0</span> + x * x);</div><div class="line">        pthread_mutex_unlock(&amp;mut);  <span class="comment">//给线程解锁</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">clock_t</span> t1 = clock();</div><div class="line">    <span class="keyword">pthread_t</span> hThread[numThreads];</div><div class="line">    pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>); <span class="comment">//初始化互斥锁</span></div><div class="line">    step = <span class="number">1.0</span> / (<span class="keyword">double</span>)N;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">        hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> pi = step * sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Pi = %12.9f\n"</span>, pi);</div><div class="line">    <span class="keyword">clock_t</span> t2 = clock();</div><div class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(t2 - t1) / CLOCKS_PER_SEC;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The whole computing time is %f seconds\n"</span>, duration);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><ul>
<li><p>运行时链接-lpthread库，结果如下（设置计算的次数N=100000）：</p>
<p>  <img src="http://p1.bpimg.com/567571/9032a0d07640d2b4.png" alt=""></p>
</li>
<li><p>经过分析发现，子线程在主线程完成的时候都还来不及执行，故所得π值为0。解决方法是在创建线程的时候等待1秒，以保证子线程能够得到执行。修改后的代码和运行结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">    hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);    </div><div class="line">    <span class="comment">//让主线程等待1秒，确保子线程能够得到执行</span></div><div class="line">    sleep(<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <img src="http://p1.bpimg.com/567571/6204082eeb18aa56.png" alt=""></p>
</li>
<li><p>将线程数减为2，运行结果如下：</p>
<p>  <img src="http://p1.bpimg.com/567571/00ab91044ae5afcf.png" alt=""></p>
</li>
<li><p>当线程数为1（单线程）时，运行结果如下：</p>
<p>  <img src="http://p1.bpimg.com/567571/81f76033dca3172b.png" alt=""></p>
</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> N = <span class="number">100000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">double</span> step;</div><div class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div><div class="line"></div><div class="line"><span class="comment">//依据计算Pi值的积分中值定理实现公式计算</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *pArg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">int</span> temp = *((<span class="keyword">int</span> *)pArg);</div><div class="line">    <span class="keyword">int</span> start = temp * (N / <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> end = start + N / <span class="number">4</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, temp, start, end);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) </div><div class="line">    &#123;</div><div class="line">        pthread_mutex_lock(&amp;mut);   <span class="comment">//给线程加锁</span></div><div class="line">        x = (i + <span class="number">0.5</span>) * step;</div><div class="line">        sum = sum + <span class="number">4.0</span> / (<span class="number">1.0</span> + x * x);</div><div class="line">        pthread_mutex_unlock(&amp;mut);  <span class="comment">//给线程解锁</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">clock_t</span> t1 = clock();</div><div class="line">    <span class="keyword">pthread_t</span> hThread[numThreads];</div><div class="line">    pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>); <span class="comment">//初始化互斥锁</span></div><div class="line">    step = <span class="number">1.0</span> / (<span class="keyword">double</span>)N;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">        hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);</div><div class="line">        <span class="comment">//让主线程等待1秒，确保子线程能够得到执行</span></div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> pi = step * sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Pi = %12.9f\n"</span>, pi);</div><div class="line">    <span class="keyword">clock_t</span> t2 = clock();</div><div class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(t2 - t1) / CLOCKS_PER_SEC;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The whole computing time is %f seconds\n"</span>, duration);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL入门学习（二）]]></title>
      <url>http://www.dengfuping.com/2016/10/26/opengl-learning-2/</url>
      <content type="html"><![CDATA[<h2 id="第一个OpenGL程序"><a href="#第一个OpenGL程序" class="headerlink" title="第一个OpenGL程序"></a>第一个OpenGL程序</h2><p>一个简单的OpenGL程序如下：（注意，如果需要编译并运行，需要正确安装GlUT，安装方法请参考 <a href="">OpenGL环境搭建</a>）.</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">     glClear(GL_COLOR_BUFFER_BIT);</div><div class="line">     glRectf(<span class="number">-0.5</span>f, <span class="number">-0.5</span>f, <span class="number">0.5f</span>, <span class="number">0.5f</span>);</div><div class="line">     glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">     glutInit(&amp;argc, argv);</div><div class="line">     glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</div><div class="line">     glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">     glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</div><div class="line">     glutCreateWindow(<span class="string">"第一个OpenGL程序"</span>);</div><div class="line">     glutDisplayFunc(&amp;myDisplay);</div><div class="line">     glutMainLoop();</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://p1.bqimg.com/567571/aa7cb6bd8e0a2912.png" alt=""></p>
<h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><p>该程序的作用是在一个黑色的窗口中央画一个白色的矩形。<br>首先，需要包含头文件#include <gl glut.h="">，这是GLUT的头文件。<br>本来OpenGL程序一般还要包含<gl gl.h="">和<gl glu.h="">，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。</gl></gl></gl></p>
<h3 id="main-函数说明"><a href="#main-函数说明" class="headerlink" title="main()函数说明"></a>main()函数说明</h3><ul>
<li>int main(int argc, char *argv[])，这个是带命令行参数的main函数，各位应该见过吧？没见过的同志们请多翻翻书，等弄明白了再往下看。</li>
<li>注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍。<ol>
<li>glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较死板，一般照抄这句glutInit(&amp;argc, argv)就可以了。</li>
<li>glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，请自己Google。当然以后的教程也会有一些讲解。</li>
<li>glutInitWindowPosition，这个简单，设置窗口在屏幕中的位置。</li>
<li>glutInitWindowSize，这个也简单，设置窗口的大小。</li>
<li>glutCreateWindow，根据前面设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。</li>
<li>glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（这个说法不够准确，但准确的说法可能初学者不太好理解，暂时这样说吧）。</li>
<li>glutMainLoop，进行一个消息循环。（这个可能初学者也不太明白，现在只需要知道这个函数可以显示窗口，并且等待窗口关闭后才会返回，这就足够了。）</li>
</ol>
</li>
</ul>
<h3 id="glutDisplayFunc-和myDisplay-函数说明"><a href="#glutDisplayFunc-和myDisplay-函数说明" class="headerlink" title="glutDisplayFunc()和myDisplay()函数说明"></a>glutDisplayFunc()和myDisplay()函数说明</h3><ul>
<li>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。<ol>
<li>glClear，清除。GL_COLOR_BUFFER_BIT表示清除颜色，glClear函数还可以清除其它的东西，但这里不作介绍。</li>
<li>glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。</li>
<li>glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。其作用跟fflush(stdout)类似。</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像处理第2次大作业]]></title>
      <url>http://www.dengfuping.com/2016/10/16/image-processing-assignment-2/</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/39a50e63c48a0019.jpg" alt=""></p>
<p>这是图像处理最近的一次大作业，主要的 topic 是图像处理问题中常见的边缘检测问题 (Edge Detection)。涉及到了常用的边缘检测算子 Prewitt、Sobel、Canny、Laplacian 以及最近几年新出现的 FDoG。作业中相关算法主要是借助 OpenCV 和 Matlab 进行实现，有兴趣的同学可以参考以下我提交的大作业。<br><a id="more"></a></p>
<h2 id="Assignment-2-1"><a href="#Assignment-2-1" class="headerlink" title="Assignment #2-1"></a>Assignment #2-1</h2><p><a href="http://www.dengfuping.name/pages/study/display/image-processing/Assignment2-1.pdf" target="_blank" rel="external">点击下载</a></p>
<h2 id="Assignment-2-2"><a href="#Assignment-2-2" class="headerlink" title="Assignment #2-2"></a>Assignment #2-2</h2><p><a href="http://www.dengfuping.name/pages/study/display/image-processing/Assignment2-2.pdf" target="_blank" rel="external">点击下载</a></p>
<h2 id="Assignment-2-3"><a href="#Assignment-2-3" class="headerlink" title="Assignment #2-3"></a>Assignment #2-3</h2><p><a href="http://www.dengfuping.name/pages/study/display/image-processing/Assignment2-3.pdf" target="_blank" rel="external">点击下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xampp 常见问题及其解决方式]]></title>
      <url>http://www.dengfuping.com/2016/10/15/xampp-configuration-and-attention/</url>
      <content type="html"><![CDATA[<p>最近在可视化的一个小实验中需要使用 xampp 这个建站集成的软件包。在帮同学解决问题的过程中，想到自己去年刚刚接触这个的时候也是各种小问题不断。今天正好趁此机会，将常见的问题及其解决方式一并总结如下。<br><a id="more"></a></p>
<h2 id="xampp-安装及需要了解的常识"><a href="#xampp-安装及需要了解的常识" class="headerlink" title="xampp 安装及需要了解的常识"></a>xampp 安装及需要了解的常识</h2><p>虽然安装时会提示你将杀毒软件关闭，否则可能安装失败。但实际测试的效果是，关不关都没什么区别。</p>
<p>另外，需要注意的是，如果你的电脑已经安装有以下组件，要么先删除再安装，，要么在安装 xampp 是将你已经安装过的组件取消勾选，以免发生冲突。这里，我们采取的是全部安装。</p>
<p><img src="http://p1.bpimg.com/567571/d9a3de3a3d2f9a85.png" alt=""></p>
<p>默认端口号</p>
<ul>
<li>Apache: 80 和 443</li>
<li>MySQL： 3306</li>
<li>Tomcat： 8080</li>
</ul>
<p>MySQL 默认用户名为 root ，密码为空</p>
<h2 id="端口占用问题"><a href="#端口占用问题" class="headerlink" title="端口占用问题"></a>端口占用问题</h2><p>一般网上的教程都是建议将端口号改成未被占用的端口号。此处，我建议采取将占用端口的进程关闭的解决方案。一来是方便以后的开发，二来改端口号需要改动配置文件的多处地方，比较麻烦。</p>
<p>那如何查看端口被哪个进程占用呢？我们可以在命令行下输入 <code>netstat -ano</code> 来进行查看。结果发现 Apache需要使用的 443 端口被占用。</p>
<p><img src="http://i1.piimg.com/567571/813e79cd24b5d0fc.png" alt=""></p>
<p>当然，也可以不采取这种方式就可以达到查看进程信息的目的。在 xampp 的控制面板的右上角有一 netstat 的按钮，其实就告诉我们它就已经集成了查看进程信息的功能。</p>
<p><img src="http://i1.piimg.com/567571/c58bb8f75c0554af.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/698a95aae068605f.png" alt=""></p>
<p>找到与端口号相对应的进程编号 PID。右键任务栏-&gt;任务管理器，进入任务管理器界面。在“详细信息”一栏中找到对应的 PID 进程编号，选中以后直接选择“结束任务”即可。</p>
<p>重新启动 Apache，发现启动成功。</p>
<p><img src="http://p1.bpimg.com/567571/93fdae831d8b7c1f.png" alt=""></p>
<p>其他类似端口号被占用的问题都可以用同样的方法解决。</p>
<h2 id="Apache-相关问题"><a href="#Apache-相关问题" class="headerlink" title="Apache 相关问题"></a>Apache 相关问题</h2><p>当我们新建 Web 项目（尤其是涉及到后台开发）的时候，我们需要将项目保存到 xampp 目录下的 htdocs 文件夹中，其中， htdocs 是 xampp 中 Apache 的服务器根目录。但这样既麻烦又不方便管理项目，那有没有办法不放在这个目录中呢？答案是有的。 </p>
<p>在 xamp 控制面板点击 MySQL 对应的 Config 按钮选中并进入 httpd.conf 配置文件，将原有的服务器根目录改为你自己喜欢的目录。为了项目的方便管理，此处我将我的一个 PhpProjects 目录映射为 apache 的服务器根目录。</p>
<p><img src="http://p1.bqimg.com/567571/76d9e0560a90082f.png" alt=""></p>
<h3 id="MySQL-相关问题"><a href="#MySQL-相关问题" class="headerlink" title="MySQL 相关问题"></a>MySQL 相关问题</h3><h3 id="修改数据库密码"><a href="#修改数据库密码" class="headerlink" title="修改数据库密码"></a>修改数据库密码</h3><p>如前面所讲到的，安装的 MySQL 数据库密码默认为空，那如何修改数据库密码呢？其实很简单，只需要一条命令即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -p password admin</div><div class="line">Enter password: (在此处输入你原有的密码，原先密码为空，因此我们直接回车即可，之后会提示你输入你的新密码)</div></pre></td></tr></table></figure>
<h3 id="修改数据库密码后-phpMyAdmin-无法打开"><a href="#修改数据库密码后-phpMyAdmin-无法打开" class="headerlink" title="修改数据库密码后 phpMyAdmin 无法打开"></a>修改数据库密码后 phpMyAdmin 无法打开</h3><p>找到 phpMyAdmin 的安装目录，打开 config.inc.php 文件，将 password 改为你的新密码即可通过 <a href="http://localhost/phpMyAdmin" target="_blank" rel="external">http://localhost/phpMyAdmin</a> 进行访问。</p>
<h3 id="MySQL-数据库中中文乱码问题"><a href="#MySQL-数据库中中文乱码问题" class="headerlink" title="MySQL 数据库中中文乱码问题"></a>MySQL 数据库中中文乱码问题</h3><p>同样的，在 xamp 控制面板点击 MySQL 对应的 Config 按钮选中并进入 my.ini （这是 MySQL 的配置文件）文件，将 UTF 8 Settings 中的设置全部解除注释（默认是非 UTF-8 编码），如下图所示，保存以后即不会再出现乱码。</p>
<p><img src="http://p1.bpimg.com/567571/82339639e5e64322.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用VTK调用Marching Cubes和Volume Rendering]]></title>
      <url>http://www.dengfuping.com/2016/10/14/VTK-MarchingCubes-VolumeRendering/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/3f17b3c63b0588f6.png" alt=""></p>
<p>前一段时间在可视化的实验课上，我第一次接触了VTK (The Visualization Toolkit)这一开源项目。在本篇文章中，将给出如何通过VTK来调用 Marching Cubes 和 Volume Rendering的方法。要说明的一点是，以下内容是基于 Ubuntu 16.04 的平台上运行的，其中VTK的版本为最新的7.0.0。至于 Ubuntu 下 VTK的编译安装将不属于本文的讨论范围，有兴趣的同学可以参考网上的相关教程进行环境搭建。<br><a id="more"></a></p>
<h2 id="调用-Marching-Cubes"><a href="#调用-Marching-Cubes" class="headerlink" title="调用 Marching Cubes"></a>调用 Marching Cubes</h2><h3 id="Marching-Cubes-cxx-文件："><a href="#Marching-Cubes-cxx-文件：" class="headerlink" title="Marching Cubes.cxx 文件："></a>Marching Cubes.cxx 文件：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">#include &lt;vtkVersion.h&gt;</div><div class="line">#include &lt;vtkSmartPointer.h&gt;</div><div class="line">#include &lt;vtkMarchingCubes.h&gt;</div><div class="line">#include &lt;vtkVoxelModeller.h&gt;</div><div class="line">#include &lt;vtkSphereSource.h&gt;</div><div class="line">#include &lt;vtkImageData.h&gt;</div><div class="line">#include &lt;vtkDICOMImageReader.h&gt;</div><div class="line"></div><div class="line">#include &lt;vtkActor.h&gt;</div><div class="line">#include &lt;vtkPolyDataMapper.h&gt;</div><div class="line">#include &lt;vtkRenderWindowInteractor.h&gt;</div><div class="line">#include &lt;vtkRenderWindow.h&gt;</div><div class="line">#include &lt;vtkRenderer.h&gt;</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    vtkSmartPointer &lt;vtkImageData&gt; volume =</div><div class="line">            vtkSmartPointer&lt;vtkImageData&gt;::New();</div><div class="line">    double isoValue;</div><div class="line">    if (argc &lt; 3) &#123;</div><div class="line">        vtkSmartPointer &lt;vtkSphereSource&gt; sphereSource =</div><div class="line">                vtkSmartPointer&lt;vtkSphereSource&gt;::New();</div><div class="line">        sphereSource-&gt;SetPhiResolution(20);</div><div class="line">        sphereSource-&gt;SetThetaResolution(20);</div><div class="line">        sphereSource-&gt;Update();</div><div class="line"></div><div class="line">        double bounds[6];</div><div class="line">        sphereSource-&gt;GetOutput()-&gt;GetBounds(bounds);</div><div class="line">        for (unsigned int i = 0; i &lt; 6; i += 2) &#123;</div><div class="line">            double range = bounds[i + 1] - bounds[i];</div><div class="line">            bounds[i] = bounds[i] - .1 * range;</div><div class="line">            bounds[i + 1] = bounds[i + 1] + .1 * range;</div><div class="line">        &#125;</div><div class="line">        vtkSmartPointer &lt;vtkVoxelModeller&gt; voxelModeller =</div><div class="line">                vtkSmartPointer&lt;vtkVoxelModeller&gt;::New();</div><div class="line">        voxelModeller-&gt;SetSampleDimensions(50, 50, 50);</div><div class="line">        voxelModeller-&gt;SetModelBounds(bounds);</div><div class="line">        voxelModeller-&gt;SetScalarTypeToFloat();</div><div class="line">        voxelModeller-&gt;SetMaximumDistance(.1);</div><div class="line"></div><div class="line">        voxelModeller-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</div><div class="line">        voxelModeller-&gt;Update();</div><div class="line">        isoValue = 0.5;</div><div class="line">        volume-&gt;DeepCopy(voxelModeller-&gt;GetOutput());</div><div class="line">    &#125; else &#123;</div><div class="line">        vtkSmartPointer &lt;vtkDICOMImageReader&gt; reader =</div><div class="line">                vtkSmartPointer&lt;vtkDICOMImageReader&gt;::New();</div><div class="line">        reader-&gt;SetDirectoryName(argv[1]);</div><div class="line">        reader-&gt;Update();</div><div class="line">        volume-&gt;DeepCopy(reader-&gt;GetOutput());</div><div class="line">        isoValue = atof(argv[2]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkMarchingCubes&gt; surface =</div><div class="line">            vtkSmartPointer&lt;vtkMarchingCubes&gt;::New();</div><div class="line"></div><div class="line">#if VTK_MAJOR_VERSION &lt;= 5</div><div class="line">    surface-&gt;SetInput(volume);</div><div class="line">#else</div><div class="line">    surface-&gt;SetInputData(volume);</div><div class="line">#endif</div><div class="line">    surface-&gt;ComputeNormalsOn();</div><div class="line">    surface-&gt;SetValue(0, isoValue);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkRenderer&gt; renderer =</div><div class="line">            vtkSmartPointer&lt;vtkRenderer&gt;::New();</div><div class="line">    renderer-&gt;SetBackground(.1, .2, .3);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkRenderWindow&gt; renderWindow =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</div><div class="line">    renderWindow-&gt;AddRenderer(renderer);</div><div class="line">    vtkSmartPointer &lt;vtkRenderWindowInteractor&gt; interactor =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</div><div class="line">    interactor-&gt;SetRenderWindow(renderWindow);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkPolyDataMapper&gt; mapper =</div><div class="line">            vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</div><div class="line">    mapper-&gt;SetInputConnection(surface-&gt;GetOutputPort());</div><div class="line">    mapper-&gt;ScalarVisibilityOff();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkActor&gt; actor =</div><div class="line">            vtkSmartPointer&lt;vtkActor&gt;::New();</div><div class="line">    actor-&gt;SetMapper(mapper);</div><div class="line"></div><div class="line">    renderer-&gt;AddActor(actor);</div><div class="line"></div><div class="line">    renderWindow-&gt;Render();</div><div class="line">    interactor-&gt;Start();</div><div class="line">    return EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CMakeLists-txt文件："><a href="#CMakeLists-txt文件：" class="headerlink" title="CMakeLists.txt文件："></a>CMakeLists.txt文件：</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</div><div class="line"></div><div class="line"><span class="keyword">PROJECT</span>(MarchingCubes)</div><div class="line"></div><div class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</div><div class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</div><div class="line"></div><div class="line"><span class="keyword">add_executable</span>(MarchingCubes MACOSX_BUNDLE MarchingCubes)</div><div class="line"></div><div class="line"><span class="keyword">if</span>(VTK_LIBRARIES)</div><div class="line">    <span class="keyword">target_link_libraries</span>(MarchingCubes <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</div><div class="line"><span class="keyword">else</span>()</div><div class="line">    <span class="keyword">target_link_libraries</span>(MarchingCubes vtkHybrid vtkWidgets)</div><div class="line"><span class="keyword">endif</span>()</div></pre></td></tr></table></figure>
<p>这是已经写好的完整项目 <a href="https://github.com/lorensen/VTKWikiExamplesTarballs/raw/master/MarchingCubes.tar" target="_blank" rel="external">MarchingCubes</a>。下载以后进行解压，并且：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> MarchingCubes/build</div><div class="line">$ cmake ..</div></pre></td></tr></table></figure>
<p>生成项目并且运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ make</div><div class="line">$ ./MarchingCubes</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<p><img src="http://i1.piimg.com/567571/87a3b5aae10ca9f1.png" alt=""></p>
<p>如果使用外部 Marching Cubes Data Sets数据集中的 <a href="https://placid.nlm.nih.gov/community/21" target="_blank" rel="external">MarchingMan</a> 数据文件，则将其解压至 build 文件夹中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Marching\ Man 1000</div></pre></td></tr></table></figure>
<p>此处是在运行时传入两个参数：一个是数据文件所在目录 Marching Man，另一个是 ISO 感光度的值1000。并且，需要注意的是，由于解压后的数据文件夹为 Marching Man ，中间含有空格，因此须用反斜杠 \ 进行转义。当然，你也可以将其重命名为 MarchingMan ，这样在运行传参的时候就不需要对空格进行转义了，即可写为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes MarchingMan 1000</div></pre></td></tr></table></figure>
<p>最后的运行结果为：</p>
<p><img src="http://p1.bpimg.com/567571/164ff93929c1684a.png" alt=""></p>
<p>如果使用 Mummies 中的 Male 数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Mummies/Male 100</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/ce8a6cd196245bf5.png" alt=""></p>
<p>如果使用 Mummies 中的 Female 数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Mummies/Female 1000</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/afd3d0c66ceaddfa.png" alt=""></p>
<p>如果使用 PlasticSkull 中的数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes PlasticSkull 1000</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/27dc0858828f87c2.png" alt=""></p>
<h2 id="调用-Volume-Rendering"><a href="#调用-Volume-Rendering" class="headerlink" title="调用 Volume Rendering"></a>调用 Volume Rendering</h2><p>由于在 VTK 中 Volume Rendering 的调用方式有多种，这里我们选取其中的 SmartVolumeMapper 进行讲解。</p>
<h3 id="MinIntensityRendering-cxx"><a href="#MinIntensityRendering-cxx" class="headerlink" title="MinIntensityRendering.cxx"></a>MinIntensityRendering.cxx</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCamera.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkFiniteDifferenceGradientEstimator.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageClip.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPiecewiseFunction.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkStructuredPoints.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkStructuredPointsReader.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolume.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolumeProperty.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkFixedPointVolumeRayCastMapper.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkColorTransferFunction.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Required arguments: vtkFile"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename = argv[<span class="number">1</span>]; <span class="comment">//  "/Data/ironProt.vtk";</span></div><div class="line"></div><div class="line">    <span class="comment">// Create the renderers, render window, and interactor</span></div><div class="line">    vtkSmartPointer &lt;vtkRenderWindow&gt; renWin =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</div><div class="line">    vtkSmartPointer &lt;vtkRenderWindowInteractor&gt; iren =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</div><div class="line">    iren-&gt;SetRenderWindow(renWin);</div><div class="line">    vtkSmartPointer &lt;vtkRenderer&gt; ren =</div><div class="line">            vtkSmartPointer&lt;vtkRenderer&gt;::New();</div><div class="line">    renWin-&gt;AddRenderer(ren);</div><div class="line"></div><div class="line">    <span class="comment">// Read the data from a vtk file</span></div><div class="line">    vtkSmartPointer &lt;vtkStructuredPointsReader&gt; reader =</div><div class="line">            vtkSmartPointer&lt;vtkStructuredPointsReader&gt;::New();</div><div class="line">    reader-&gt;SetFileName(filename.c_str());</div><div class="line">    reader-&gt;Update();</div><div class="line"></div><div class="line">    <span class="comment">// Create a transfer function mapping scalar value to opacity</span></div><div class="line">    vtkSmartPointer &lt;vtkPiecewiseFunction&gt; oTFun =</div><div class="line">            vtkSmartPointer&lt;vtkPiecewiseFunction&gt;::New();</div><div class="line">    oTFun-&gt;AddSegment(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">256</span>, <span class="number">0.1</span>);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkColorTransferFunction&gt; cTFun =</div><div class="line">            vtkSmartPointer&lt;vtkColorTransferFunction&gt;::New();</div><div class="line">    cTFun-&gt;AddRGBPoint(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</div><div class="line">    cTFun-&gt;AddRGBPoint(<span class="number">255</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Need to crop to actually see minimum intensity</span></div><div class="line">    vtkSmartPointer &lt;vtkImageClip&gt; clip =</div><div class="line">            vtkSmartPointer&lt;vtkImageClip&gt;::New();</div><div class="line">    clip-&gt;SetInputConnection(reader-&gt;GetOutputPort());</div><div class="line">    clip-&gt;SetOutputWholeExtent(<span class="number">0</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">30</span>, <span class="number">37</span>);</div><div class="line">    clip-&gt;ClipDataOn();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkVolumeProperty&gt; property =</div><div class="line">            vtkSmartPointer&lt;vtkVolumeProperty&gt;::New();</div><div class="line">    property-&gt;SetScalarOpacity(oTFun);</div><div class="line">    property-&gt;SetColor(cTFun);</div><div class="line">    property-&gt;SetInterpolationTypeToLinear();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkFixedPointVolumeRayCastMapper&gt; mapper =</div><div class="line">            vtkSmartPointer&lt;vtkFixedPointVolumeRayCastMapper&gt;::New();</div><div class="line">    mapper-&gt;SetBlendModeToMinimumIntensity();</div><div class="line">    mapper-&gt;SetInputConnection(clip-&gt;GetOutputPort());</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkVolume&gt; volume =</div><div class="line">            vtkSmartPointer&lt;vtkVolume&gt;::New();</div><div class="line">    volume-&gt;SetMapper(mapper);</div><div class="line">    volume-&gt;SetProperty(property);</div><div class="line"></div><div class="line">    ren-&gt;AddViewProp(volume);</div><div class="line">    renWin-&gt;Render();</div><div class="line">    iren-&gt;Start();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</div><div class="line"> </div><div class="line"><span class="keyword">PROJECT</span>(MinIntensityRendering)</div><div class="line"> </div><div class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</div><div class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</div><div class="line"> </div><div class="line"><span class="keyword">add_executable</span>(MinIntensityRendering MACOSX_BUNDLE MinIntensityRendering)</div><div class="line"> </div><div class="line"><span class="keyword">if</span>(VTK_LIBRARIES)</div><div class="line">	<span class="keyword">target_link_libraries</span>(MinIntensityRendering <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</div><div class="line"><span class="keyword">else</span>()</div><div class="line">	<span class="keyword">target_link_libraries</span>(MinIntensityRendering vtkHybrid vtkWidgets)</div><div class="line"><span class="keyword">endif</span>()</div></pre></td></tr></table></figure>
<p>在这里，同样提供已经写好的 <a href="https://raw.githubusercontent.com/lorensen/VTKWikiExamplesTarballs/master/MinIntensityRendering.tar" target="_blank" rel="external">MinIntensityRendering</a> 项目工程文件和运行所需要的 VTK 文件 <a href="https://midas3.kitware.com/midas/item/206383" target="_blank" rel="external">ironProt.vtk</a> 。下载解压，将 ironProt.vtk 放入 build 文件夹中，然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> M<span class="keyword">in</span>IntensityRendering/build</div><div class="line">$ cmake ..</div><div class="line">$ make</div><div class="line">$ ./M<span class="keyword">in</span>IntensityRendering ironProt.vtk</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://p1.bpimg.com/567571/2c34f33003a74203.png" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>
