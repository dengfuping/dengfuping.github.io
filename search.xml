<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaScript 正则表达式]]></title>
      <url>http://www.dengfuping.com/2017/04/23/javascript-regular-expression/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/aa45ebe58e9a229f.jpg" alt=""><br><a id="more"></a></p>
<ol>
<li>^ 匹配一个输入或一行的开头，<code>/^a/</code> 匹配”an A”，而不匹配”An a” </li>
<li>$ 匹配一个输入或一行的结尾，<code>/a$/</code> 匹配”An a”，而不匹配”an A” </li>
<li><ul>
<li>匹配前面元字符0次或多次，<code>/ba*/</code> 将匹配b,ba,baa,baaa </li>
</ul>
</li>
<li><ul>
<li>匹配前面元字符1次或多次，<code>/ba*/</code> 将匹配ba,baa,baaa </li>
</ul>
</li>
<li>? 匹配前面元字符0次或1次，<code>/ba*/</code> 将匹配b,ba </li>
<li>(x) 匹配 x 保存 x 在名为 $1…$9 的变量中 </li>
<li>x|y 匹配 x 或 y </li>
<li>{n} 精确匹配 n 次 </li>
<li>{n,} 匹配 n 次以上 </li>
<li>{n, m} 匹配 n-m 次 </li>
<li><code>[xyz]</code> 字符集(character set)，匹配这个集合中的任一一个字符(或元字符) </li>
<li><code>[^xyz]</code> 不匹配这个集合中的任何一个字符 </li>
<li>[\b] 匹配一个退格符 </li>
<li>\b 匹配一个单词的边界 </li>
<li>\B 匹配一个单词的非边界 </li>
<li>\cX 这儿，X 是一个控制符，<code>/\cM/</code> 匹配 Ctrl-M </li>
<li>\d 匹配一个字数字符，<code>/\d/ = /[0-9]/</code> </li>
<li>\D 匹配一个非字数字符，<code>/\D/ = /[^0-9]/</code> </li>
<li>\n 匹配一个换行符 </li>
<li>\r 匹配一个回车符 </li>
<li>\s 匹配一个空白字符，包括 \n, \r, \f, \t, \v 等 </li>
<li>\S 匹配一个非空白字符，等于 <code>/[^\n\f\r\t\v]/</code> </li>
<li>\t 匹配一个制表符 </li>
<li>\v 匹配一个重直制表符 </li>
<li>\w 匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如 <code>[\w]</code> 匹配 “$5.98” 中的 5，等于 <code>[a-zA-Z0-9]</code> </li>
<li>\W 匹配一个不可以组成单词的字符，如 [\W] 匹配 “$5.98” 中的 $，等于 <code>[^a-zA-Z0-9]</code></li>
<li>.（点符号）：除了换行符之外的任意字符,等价于 <code>[^\n]</code>（在2017年阿里巴巴春季实习生招聘的前端模拟笔试考察过这一知识点） </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS 常用技巧（一）：文本溢出显示省略号]]></title>
      <url>http://www.dengfuping.com/2017/04/23/css-text-overflow-ellipsis/</url>
      <content type="html"><![CDATA[<p>这是在网易技术二面的时候面试官问到的一个问题，当时没有答出来，今天在这里作一次解决该问题方法的总结。</p>
<h2 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h2><p>可以使用 <code>text-overflow: ellipsis</code> 属性来实现单行文本溢出显示省略号，当然还需要加宽度 <code>width</code> 属性来兼容部分浏览器。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.single-text</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">490px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>overflow: hidden; 溢出元素内容区的内容不可见的。</li>
<li>white-space: nowrap; 文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。用以保证为单行文本</li>
<li>text-overflow: ellipsis; 使用显示省略符号来代表溢出的文本。</li>
</ol>
<p>效果如图：<br><img src="http://i2.muimg.com/567571/58e7e8d5d001d16a.png" alt=""></p>
<h2 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h2><h3 id="方法（一）"><a href="#方法（一）" class="headerlink" title="方法（一）"></a>方法（一）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.multi-text</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>-webkit-line-clamp 用来限制在一个块元素显示的文本的行数。为了实现该效果，它需要组合其他的 WebKit 属性。</li>
<li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示。</li>
<li>-webkit-box-orient; 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式。</li>
</ol>
<p>效果如图：<br><img src="http://i4.buimg.com/567571/751b758d27ab9971.png" alt=""></p>
<p>适用范围：<br>由于使用了 WebKit 的 CSS 扩展属性，该方法适用于 WebKit 浏览器及移动端，其中移动端大部分是 WebKit 内核的浏览器。</p>
<h3 id="方法（二）"><a href="#方法（二）" class="headerlink" title="方法（二）"></a>方法（二）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.multi-text-complete</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">max-height</span>: <span class="number">60px</span>;   <span class="comment">/*将 height设为 line-height 的整数倍，防止超出的文字露出*/</span></div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.multi-text-complete</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"..."</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, transparent, #fff 55%);</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, transparent, #fff 55%);</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, transparent, #fff 55%);</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, #fff 55%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>将 height 设置为 line-height 的整数倍，防止超出的文字露出。</li>
<li>给 p::after 添加渐变背景可避免文字只显示一半。</li>
<li>由于 ie6-7 不显示 content 内容，所以要添加标签兼容 ie6-7（如：<span>…<span>）；兼容ie8需要将 ::after 替换成 :after。</span></span></li>
</ol>
<p>效果如图：<br><img src="http://i1.piimg.com/567571/ea8ba4c779ae4ef7.png" alt=""></p>
<p>适用范围：该方法适用范围广，但文字未超出行的情况下也会出现省略号，可结合js优化该方法。</p>
<h2 id="源代码和运行效果"><a href="#源代码和运行效果" class="headerlink" title="源代码和运行效果"></a>源代码和运行效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本溢出显示省略号<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.single-text</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">490px</span>;</div><div class="line">            <span class="attribute">overflow</span>: hidden;</div><div class="line">            <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">            <span class="attribute">white-space</span>: nowrap;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.multi-text</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">            <span class="attribute">overflow</span>: hidden;</div><div class="line">            <span class="attribute">display</span>: -webkit-box;</div><div class="line">            <span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line">            <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.multi-text-complete</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">            <span class="attribute">position</span>: relative;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">max-height</span>: <span class="number">60px</span>;</div><div class="line">            <span class="attribute">overflow</span>: hidden;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.multi-text-complete</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">            <span class="attribute">content</span>: <span class="string">"..."</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">padding-left</span>: <span class="number">40px</span>;</div><div class="line">            <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, transparent, #fff 55%);</div><div class="line">            <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, transparent, #fff 55%);</div><div class="line">            <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, transparent, #fff 55%);</div><div class="line">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, #fff 55%);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"single-text"</span>&gt;</span></div><div class="line">        CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"multi-text"</span>&gt;</span></div><div class="line">        CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"multi-text-complete"</span>&gt;</span></div><div class="line">        CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号CSS实现单行文本溢出显示省略号</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如图：<br><img src="http://i4.buimg.com/567571/c83e04c2079c8b4f.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6 学习笔记（一）：spread operator（展开运算符）]]></title>
      <url>http://www.dengfuping.com/2017/04/23/es6-spread-operator/</url>
      <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>ES6 中的 spread operator （展开运算符）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])                 <span class="comment">// 1 2 3  </span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)           <span class="comment">// 1 2 3 4 5  </span></div><div class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]     <span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>该运算符主要用于函数调用:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;  </div><div class="line">    array.push(...items);  </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> x + y;  </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];  </div><div class="line">add(...numbers)             <span class="comment">// 42</span></div></pre></td></tr></table></figure>
<p>上面代码中，array.push(…items)和add(…numbers)这两行，都是函数的调用，它们的都使用了扩展运算符。该运算符将一个数组，变为参数序列。</p>
<p>扩展运算符与正常的函数参数可以结合使用，非常灵活:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v, w, x, y, z</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>];  </div><div class="line">f(<span class="number">-1</span>, ...args, <span class="number">2</span>, ...[<span class="number">3</span>]);</div></pre></td></tr></table></figure>
<h2 id="替代数组的-apply-方法"><a href="#替代数组的-apply-方法" class="headerlink" title="替代数组的 apply 方法"></a>替代数组的 apply 方法</h2><p>由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 的写法  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;  </div><div class="line"><span class="comment">// ...  </span></div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];  </div><div class="line">f.apply(<span class="literal">null</span>, args);</div><div class="line">  </div><div class="line"><span class="comment">// ES6 的写法  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;  </div><div class="line"><span class="comment">// ...  </span></div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];  </div><div class="line">f(...args);</div></pre></td></tr></table></figure>
<p>下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 的写法  </span></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])  </div><div class="line"><span class="comment">// ES6 的写法  </span></div><div class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])  </div><div class="line"><span class="comment">//  等同于  </span></div><div class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</div></pre></td></tr></table></figure>
<p>上面代码表示，由于 JavaScript 不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。</p>
<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 的写法  </span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</div><div class="line"> </div><div class="line"><span class="comment">// ES6 的写法  </span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];  </div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </div><div class="line">arr1.push(...arr2);</div></pre></td></tr></table></figure>
<p>上面代码的 ES5 写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。</p>
<p>下面是另外一个例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5  </span></div><div class="line"><span class="keyword">new</span> (<span class="built_in">Date</span>.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>]));</div><div class="line"> </div><div class="line"><span class="comment">// ES6  </span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>]);</div></pre></td></tr></table></figure>
<h2 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h2><h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><p>扩展运算符提供了数组合并的新写法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5  </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</div><div class="line"></div><div class="line"><span class="comment">// ES6  </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]  </div><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];  </div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];  </div><div class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line"> </div><div class="line"><span class="comment">// ES5 的合并数组  </span></div><div class="line">arr1.concat(arr2, arr3);        <span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]  </span></div><div class="line"><span class="comment">// ES6 的合并数组  </span></div><div class="line">[...arr1, ...arr2, ...arr3]     <span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure>
<h3 id="与-ES6-中的解构赋值结合"><a href="#与-ES6-中的解构赋值结合" class="headerlink" title="与 ES6 中的解构赋值结合"></a>与 ES6 中的解构赋值结合</h3><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5  </span></div><div class="line">a = list[<span class="number">0</span>], rest = list.slice(<span class="number">1</span>)  </div><div class="line"><span class="comment">// ES6  </span></div><div class="line">[a, ...rest] = list</div></pre></td></tr></table></figure>
<p>下面是另外一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </div><div class="line">first      <span class="comment">// 1  </span></div><div class="line">rest       <span class="comment">// [2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [first, ...rest] = [];  </div><div class="line">first      <span class="comment">// undefined  </span></div><div class="line">rest       <span class="comment">// []</span></div><div class="line">  </div><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];  </div><div class="line">first      <span class="comment">// "foo"  </span></div><div class="line">rest       <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];          <span class="comment">//  报错  </span></div><div class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];    <span class="comment">//  报错</span></div></pre></td></tr></table></figure>
<h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><p>JavaScript 的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。扩展运算符提供了解决这个问题的一种变通方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dateFields = readDateFields(database);  </div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(...dateFields);</div></pre></td></tr></table></figure>
<p>上面代码从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数Date。</p>
<h3 id="转换字符串为数组"><a href="#转换字符串为数组" class="headerlink" title="转换字符串为数组"></a>转换字符串为数组</h3><p>扩展运算符还可以将字符串转为真正的数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[...<span class="string">'hello'</span>]        <span class="comment">// [ "h", "e", "l", "l", "o" ]</span></div></pre></td></tr></table></figure>
<p>上面的写法，有一个重要的好处，那就是能够正确识别 32 位的 Unicode 字符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x\uD83D\uDE80y'</span>.length         <span class="comment">// 4  </span></div><div class="line">[...<span class="string">'x\uD83D\uDE80y'</span>].length    <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>上面代码的第一种写法， JavaScript 会将 32 位 Unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> [...str].length;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">length(<span class="string">'x\uD83D\uDE80y'</span>)         <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>凡是涉及到操作 32 位 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'x\uD83D\uDE80y'</span>;  </div><div class="line">str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)  <span class="comment">// 'y\uDE80\uD83Dx'  </span></div><div class="line">[...str].reverse().join(<span class="string">''</span>)       <span class="comment">// 'y\uD83D\uDE80x'</span></div></pre></td></tr></table></figure>
<p>上面代码中，如果不用扩展运算符，字符串的reverse操作就不正确。</p>
<h3 id="将-Iterator-接口对象转换为数组"><a href="#将-Iterator-接口对象转换为数组" class="headerlink" title="将 Iterator 接口对象转换为数组"></a>将 Iterator 接口对象转换为数组</h3><p>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);  </div><div class="line"><span class="keyword">var</span> array = [...nodeList];</div></pre></td></tr></table></figure>
<p>上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了 Iterator 接口。</p>
<p>对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arrayLike = &#123;  </div><div class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,  </div><div class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,  </div><div class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,  </div><div class="line">    <span class="attr">length</span>: <span class="number">3</span>  </div><div class="line">&#125;;</div><div class="line">    </div><div class="line"><span class="keyword">let</span> arr = [...arrayLike];    <span class="comment">// TypeError: Cannot spread non-iterable object.</span></div></pre></td></tr></table></figure>
<p>上面代码中，arrayLike 是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这时，可以改为使用 <code>Array.from</code> 方法将 <code>arrayLike</code> 转为真正的数组。</p>
<h3 id="Map、Set-和-Generator-函数"><a href="#Map、Set-和-Generator-函数" class="headerlink" title="Map、Set 和 Generator 函数"></a>Map、Set 和 Generator 函数</h3><p>扩展运算符内部调用的是数据结构的 <code>Iterator</code> 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([  </div><div class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],  </div><div class="line">    [<span class="number">2</span>, <span class="string">'two'</span>],  </div><div class="line">    [<span class="number">3</span>, <span class="string">'three'</span>],  </div><div class="line">]);</div><div class="line">  </div><div class="line"><span class="keyword">let</span> arr = [...map.keys()];       <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;  </div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;  </div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;  </div><div class="line">&#125;;</div><div class="line"> </div><div class="line">[...go()];        <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>上面代码中，变量 go 是一个 <code>Generator</code> 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</p>
<p>如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;  </div><div class="line"><span class="keyword">let</span> arr = [...obj];    <span class="comment">// TypeError: Cannot spread non-iterable object</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[判断某个对象是否为数组的四种方法]]></title>
      <url>http://www.dengfuping.com/2017/04/21/judge-object-is-array-or-not/</url>
      <content type="html"><![CDATA[<h2 id="instanceof-操作符（有限制）"><a href="#instanceof-操作符（有限制）" class="headerlink" title="instanceof 操作符（有限制）"></a>instanceof 操作符（有限制）</h2><p>我们可以使用 instanceof 操作符来检测某个对象是否是数组的实例，该检测会返回一个布尔型值(boolean)。如果是数组的话，返回 true，否则的话返回 false</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);      <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+/g</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>使用 instanceof 操作符有一个问题就是，它假定只有一个全局作用域。如果一个网页中有多个框架（iframe 元素），那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。传入的数组在该框架中用 instanceof 操作符判断就会返回 false。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> b = [];</div><div class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);              <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>);               <span class="comment">//true</span></div><div class="line">  </div><div class="line"><span class="keyword">var</span> frame = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);  <span class="comment">//创建一个框架</span></div><div class="line"><span class="built_in">document</span>.body.appendChild(frame);</div><div class="line"><span class="keyword">var</span> c = <span class="built_in">window</span>.frames[<span class="number">0</span>].Array;                <span class="comment">//取得框架全局执行环境中的Array构造函数</span></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> c();                               <span class="comment">//在框架全局执行环境中创建一个数组d</span></div><div class="line"></div><div class="line"><span class="comment">//在当前页面的执行环境中用instanceof 操作符判断 d 是否为数组，返回 false</span></div><div class="line"><span class="built_in">console</span>.log(d <span class="keyword">instanceof</span> <span class="built_in">Array</span>);   </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(d));                 <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="constructor-属性（有限制）"><a href="#constructor-属性（有限制）" class="headerlink" title="constructor 属性（有限制）"></a>constructor 属性（有限制）</h2><p>在javascript中，每个对象都有一个constructor属性，它引用了初始化该对象的构造函数，比如判断未知对象的类型，因此我们可以通过如下方法进行判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIsArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'object'</span> &amp;&amp; obj.constructor == <span class="built_in">Array</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与使用 instanceof 操作符一样，当存在多个全局作用域时，使用constructor 属性无法进行判断。</p>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>使用 <code>ES 5</code> 新增的Array.isArray()方法。这个方法的作用就是确定某个值到底是不是数组，而不管它到底是在哪个全局执行环境中创建的。</p>
<h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><p>该方法返回一个 <code>[object NativeConstructorName]</code> 格式的字符串。每个类在内部都有一个 <code>[[Class]]</code> 属性，这个属性中就指定了上述字符串中的构造函数名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIsArray</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) == <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 常用基础函数解析]]></title>
      <url>http://www.dengfuping.com/2017/04/21/javascript-basic-function/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/ffcf817d274532d9.png" alt=""></p>
<p>此文主要是对 JavaScript 的常用函数做一个总结和解析，方便理解和参考。</p>
<a id="more"></a>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><ul>
<li>操作对象：Array 和 String 对象</li>
<li>原对象是否变化：<code>不变化</code></li>
<li>函数用法：slice(start, end)</li>
<li>函数功能：对数组或字符串进行 <code>截取</code> ，并返回一个数组副本。即原数组或字符串 <code>不会被修改</code> 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>, <span class="number">3</span>);  <span class="comment">// b = [1,2,3]</span></div><div class="line"></div><div class="line"><span class="comment">//如果不传入参数二，那么将从参数一的索引位置开始截取，一直到数组或字符串结尾</span></div><div class="line"><span class="keyword">var</span> c = a.slice(<span class="number">3</span>);     <span class="comment">// c = [4,5,6]</span></div><div class="line"></div><div class="line"><span class="comment">// 此时数组 a = [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure>
<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><ul>
<li>操作对象：String 对象</li>
<li>原对象是否发生变化：<code>不变化</code></li>
<li>函数用法：split(start, end)</li>
<li>函数功能：把这个字符串分割成片段来创建一个字符串数组。可选参数 <code>limit</code> 可以限制被分割的片段数量。<code>separator</code> 参数可以是一个字符串或一个正则表达式。如果 <code>separator</code> 是一个空字符，会返回一个单字符的数组。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"Hello World Are You Ok"</span>;</div><div class="line"><span class="keyword">var</span> b = a.split(<span class="string">" "</span>);        <span class="comment">// 分隔符为一个空格，返回 ["Hello", "World", "Are", "You", "Ok"]</span></div><div class="line"><span class="keyword">var</span> c = a.split(<span class="string">" "</span>, <span class="number">2</span>);     <span class="comment">// 分隔符为一个空格，且设置 limit 参数，则返回 ["Hello", "World"]</span></div><div class="line"><span class="keyword">var</span> d = a.split(<span class="string">""</span>);        <span class="comment">// 分隔符为空字符，返回 ["H", "e", "l", ... , "O", "k"]</span></div></pre></td></tr></table></figure>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><ul>
<li>操作对象：Array 对象</li>
<li>原对象是否发生变化：<code>变化</code></li>
<li>函数用法：splice(start, deleteCount, item1, item2,…)</li>
<li>函数功能：参数 <code>start</code> 是从数组中移除元素的开始位置。参数 <code>deleteCount</code> 是要移除的元素的个数。后面的 item1, item2…是可选参数，表示会插入到被移除元素的位置上。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> b = a.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'e'</span>, <span class="string">'f'</span>);  <span class="comment">//a = ['a', 'e', 'f', 'c'], b = ['b']</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[腾讯 2017 暑期实习生招聘电话一面总结]]></title>
      <url>http://www.dengfuping.com/2017/03/28/tencent-the-first-interview-summary/</url>
      <content type="html"><![CDATA[<p><img src="http://i2.muimg.com/567571/12498fa06454beda.png" alt=""><br>我是3月份在牛客网上找腾讯的内部员工内推的，当时就把自己的个人信息（姓名-邮箱-电话-学校）和自己的简历用邮箱发给他，然后第二天就收到了内推的邮件，要求在腾讯的官网上完善自己的简历。我申请的是 <code>前端开发</code> 的暑期实习生岗位。<a id="more"></a></p>
<p>后来看腾讯的招聘流程，发现4月2号和3号有在线笔试，我还以为腾讯的内推也要经过笔试呢。今天快中午的时候接到了腾讯面试官的电话，问我现在方不方便面试，正好那个时候我翘掉了毛概，想想再约时间也一样，就说现在就可以开始。以下是面试时的问题总结：</p>
<ol>
<li><p>开始就问我做过哪些项目。由于我只做过自己的一些个人项目和 demo，没有过正式的项目经验，所以就直接说没有。不过谈到了我最近自己在鼓捣的一个仿知乎类的一个问答网站，主要是讲了用到了哪些技术，遇到的难点是什么。其中说到的 <code>Vue.js</code>，面试官问有没有看过它的源代码，知不知道它的实现原理。哈哈，这就 gg 了。数据绑定的实现原理好像看到过，但记得不是很深，就胡乱答了一通，感觉不是很好。</p>
</li>
<li><p>谈谈你对浏览器兼容问题的看法</p>
</li>
<li><p><code>http</code> 和 <code>https</code> 的区别（我说的是 <code>https</code> 是 <code>http</code> + <code>SSL</code>,比传统的 <code>http</code> 更加安全），然后面试官又接着问为什么 <code>https</code> 更安全，要求说出原理和指出具体的发送过程（我只知道需要公钥私钥一起才能实现对加密传输的信息进行解密，一问到具体的发送过程就不知道了）。</p>
</li>
<li><p>在浏览器中输入网页地址并进行访问的流程是什么？这是前两年的面试题了，恰好之前准备面试的时候专门复习过，所以流程答得还不错。但当我谈到查找缓存的时候，他就让我说查找缓存的原理是什么。这就尴尬了，反正就照着自己的理解答了一下。但一直被追问底层原理，所以个人感觉答得不是很好。</p>
</li>
<li><p>有哪些实现缓存的方法？（由于我只知道实现浏览器本地缓存的方法，所以就答了 <code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>这三个）</p>
</li>
<li><p><code>ES6</code> 中的 <code>promise</code> 对象，作用是什么？</p>
</li>
<li><p>前端优化问题，有哪些优化或提高性能的方法？</p>
</li>
<li><p>谈谈你对分布式系统的理解。发送网络请求时如何选择请求的网络服务器？是按照什么原则进行选择的？</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB学习笔记（二）：常见问题和常用技巧]]></title>
      <url>http://www.dengfuping.com/2017/02/04/mongodb-learning-2/</url>
      <content type="html"><![CDATA[<h3 id="使用pretty-方法格式化输出数据"><a href="#使用pretty-方法格式化输出数据" class="headerlink" title="使用pretty()方法格式化输出数据"></a>使用pretty()方法格式化输出数据</h3><p>使用 db.collection_name.find() 是以非结构化的方式返回数据，每一条占一整行，一点格式都没有，很难阅读。<br><img src="http://p1.bpimg.com/567571/fe3fc2378bab0ae9.png" alt=""><a id="more"></a></p>
<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：db.collection_name.find().pretty()<br><img src="http://p1.bpimg.com/567571/0a0a728416a3034e.png" alt=""></p>
<p>当然，你也可以使用在MongoDB shell执行以下命令将全局的数据输出都格式化，这样也就不用每次都调用pretty()方法了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;DBQuery.prototype._prettyShell = true&quot; &gt;&gt; ~/.mongorc.js</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB学习笔记（一）：安装与配置]]></title>
      <url>http://www.dengfuping.com/2017/02/03/mongodb-learning-1/</url>
      <content type="html"><![CDATA[<h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><p>MongoDB提供了可用于32位和64位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB预编译二进制包下载地址：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a><br><img src="http://i1.piimg.com/567571/aeb5ffe8372aa4a2.png" alt=""><a id="more"></a></p>
<p>下载对应的.msi文件后双击该文件，按操作提示安装即可。此处我的安装路径为：F:\Program Files\MongoDB</p>
<h3 id="添加系统路径"><a href="#添加系统路径" class="headerlink" title="添加系统路径"></a>添加系统路径</h3><p>“我的电脑-&gt;系统属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;Path变量”，选中Path变量然后点击“编辑”，将“F:\Program Files\MongoDB\Server\3.4\bin”追加到已有值的后面，注意使用英文状态下的分号进行分隔。<br><img src="http://p1.bpimg.com/567571/0f16c739dfe6f7a8.png" alt=""></p>
<p>这样可以不用每次都进入MongoDB的bin目录下也能在全局执行mongod命令了。</p>
<h3 id="创建数据和日志目录"><a href="#创建数据和日志目录" class="headerlink" title="创建数据和日志目录"></a>创建数据和日志目录</h3><p>MongoDB将数据目录存储在db目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。在本教程中，我在F盘的根目录下创建data目录，然后在data目录里创建db目录和log目录。</p>
<h3 id="命令行下运行MongoDB服务器"><a href="#命令行下运行MongoDB服务器" class="headerlink" title="命令行下运行MongoDB服务器"></a>命令行下运行MongoDB服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath F:\data\db</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/5e882e11c8b296a7.png" alt=""></p>
<p>如果觉得每次运行都要输入数据路径比较麻烦，也可以将其写入一个配置文件中，然后通过 -f 属性将其引入即可。具体操作为：新建一个mongodb.cnf文件，写入如下命令并保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dbpath=F:\data\db</div></pre></td></tr></table></figure></p>
<p><img src="http://p1.bpimg.com/567571/411c10cd3ce5b2d4.png" alt=""></p>
<p>此时可以在“F:\Program Files\MongoDB\Server\3.4”目录下通过以下命令来运行MongoDB服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -f mongodb.cnf</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/567571/5e5807dee5b4b4e0.png" alt=""></p>
<p>若在其它目录下，则需要指定mongodb.cnf的绝对路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -f &quot;F:\Program Files\MongoDB\Server\3.4\mongodb.cnf&quot;</div></pre></td></tr></table></figure></p>
<h3 id="将MongoDB设置成Windows启动服务"><a href="#将MongoDB设置成Windows启动服务" class="headerlink" title="将MongoDB设置成Windows启动服务"></a>将MongoDB设置成Windows启动服务</h3><p>在“F:\Program Files\MongoDB\Server\3.4”目录下新建名为mongod.cfg的配置文件，并写入如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">systemLog:</div><div class="line">    destination: file</div><div class="line">    path: f:\data\log\mongod.log</div><div class="line">storage:</div><div class="line">    dbPath: f:\data\db</div></pre></td></tr></table></figure></p>
<p>使用管理员身份运行命令行终端，然后输入如下命令来安装MongoDB服务（注意不要开启MongoDB）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config &quot;F:\Program Files\MongoDB\Server\3.4\mongod.cfg&quot; --install</div></pre></td></tr></table></figure></p>
<p>开启MongoDB服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure></p>
<p><img src="http://p1.bpimg.com/567571/d10ab1219463d05a.png" alt=""></p>
<p>这样，每次系统开机MongoDB就会作为系统服务自动开启，而不需要每次都通过命令行来运行MongoDB服务器，会节约不少时间。</p>
<h3 id="MongoDB后台管理-Shell"><a href="#MongoDB后台管理-Shell" class="headerlink" title="MongoDB后台管理 Shell"></a>MongoDB后台管理 Shell</h3><p>在开启MongoDB的情况下，可以在命令行直接输入mongo命令进入MongoDB的后台管理。其中，MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。当然，你也可以先打开MongoDB安装目录的下的bin目录，然后执行mongo.exe文件，也可以进入。值得说明的是，当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）。<br><img src="http://i1.piimg.com/567571/22f6d1ce33224ce0.png" alt=""></p>
<p>其中，db 命令用于查看当前操作的文档（数据库）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机前沿开发介绍作业(2)：大数据存储之数据库操作实验]]></title>
      <url>http://www.dengfuping.com/2017/01/28/introduction-to-computer-frontier-development-2/</url>
      <content type="html"><![CDATA[<h2 id="实验一：MySQL数据库操作"><a href="#实验一：MySQL数据库操作" class="headerlink" title="实验一：MySQL数据库操作"></a>实验一：MySQL数据库操作</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p><img src="http://p1.bqimg.com/567571/044b6fd0fc84a84c.png" alt=""></p>
<p>根据上面给出的表格,利用MySQL设计出student学生表格;<br>（1）设计完后,用select语句输出所有的相关信息,并给出截图;<br>（2）查询zhangsan的Computer成绩,并给出截图;<br>（3）修改lisi的Math成绩,改为95.给出截图。<a id="more"></a></p>
<h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>使用show databases查看当前数据库：<br><img src="http://p1.bqimg.com/567571/3809414aeaec45ba.png" alt=""></p>
<p>创建名为hw5的数据库：<br><img src="http://p1.bqimg.com/567571/fa34f0565814a097.png" alt=""></p>
<p>在hw5数据库中创建student表：<br><img src="http://p1.bqimg.com/567571/c331be8dfbbb8478.png" alt=""></p>
<p>向student表中插入数据：<br><img src="http://p1.bqimg.com/567571/fd5deda7fb3c50e8.png" alt=""></p>
<p>使用select语句输出student表中所有的相关信息：<br><img src="http://p1.bqimg.com/567571/cddb97ba165426c4.png" alt=""></p>
<p>查询zhangsan的Computer成绩：<br><img src="http://p1.bqimg.com/567571/6d3ffddaad7d38cf.png" alt=""></p>
<p>修改lisi的Math成绩,改为95：<br><img src="http://p1.bqimg.com/567571/1059523522fee08c.png" alt=""></p>
<h2 id="实验二：HBase数据库操作"><a href="#实验二：HBase数据库操作" class="headerlink" title="实验二：HBase数据库操作"></a>实验二：HBase数据库操作</h2><h3 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h3><p><img src="http://p1.bqimg.com/567571/3c0a9d78d9a648c4.png" alt=""></p>
<p>根据上面给出的表格，用Hbase Shell模式设计student学生表格。<br>（1）设计完后，用scan指令浏览表的相关信息，给出截图。<br>（2）查询zhangsan 的Computer成绩,给出截图。<br>（3）修改lisi的Math成绩，改为95,给出截图。</p>
<h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>创建student表，其中name和score均为列名：<br><img src="http://i1.piimg.com/567571/aa6e8ee80b0ee0b8.png" alt=""></p>
<p>向student表中插入数据：<br><img src="http://p1.bqimg.com/567571/8c7897c662ba361a.png" alt=""></p>
<p>使用scan指令输出student表的所有相关信息：<br><img src="http://p1.bqimg.com/567571/6a922f4a7d742942.png" alt=""></p>
<p>使用get指令查询zhangsan 的Computer成绩：<br><img src="http://p1.bqimg.com/567571/33a8ad984c4c5a6a.png" alt=""></p>
<p>修改lisi的Math成绩，改为95：<br><img src="http://p1.bqimg.com/567571/1f148acba50c72cd.png" alt=""></p>
<h2 id="实验三：MongoDB数据库操作"><a href="#实验三：MongoDB数据库操作" class="headerlink" title="实验三：MongoDB数据库操作"></a>实验三：MongoDB数据库操作</h2><h3 id="实验要求-2"><a href="#实验要求-2" class="headerlink" title="实验要求"></a>实验要求</h3><p>Student文档如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    “name”: “zhangsan”,</div><div class="line">    “score”: &#123;</div><div class="line">        “English”: 69,</div><div class="line">        “Math”: 86,</div><div class="line">        “Computer”: 77</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    “name”: “lisi”,</div><div class="line">    “score”: &#123;</div><div class="line">        “English”: 55,</div><div class="line">        “Math”: 100,</div><div class="line">        “Computer”: 88</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据上面给出的文档,用Mongo shell设计出student集合.<br>（1）设计完后,用find()方法输出两个学生的信息,给出截图;<br>（2）用find函数查询zhangsan 的所有成绩(只显示score列),给出截图。<br>（3）修改lisi的Math成绩，改为95,给出截图。</p>
<h3 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>新建hw5数据库：<br><img src="http://p1.bpimg.com/567571/8e986c3755e6021d.png" alt=""></p>
<p>新建student文档：<br><img src="http://p1.bqimg.com/567571/cb6b12219b98bbe0.png" alt=""></p>
<p>向student文档中插入数据：<br><img src="http://p1.bqimg.com/567571/561cdb5e4f7f05e6.png" alt=""></p>
<p>用find()方法输出两个学生的信息：<br><img src="http://p1.bqimg.com/567571/943a78da423f37ff.png" alt=""></p>
<p>使用find函数查询zhangsan 的所有成绩(只显示score列)：<br><img src="http://p1.bqimg.com/567571/aadc29722c41591f.png" alt=""></p>
<p>使用update函数修改lisi的Math成绩，改为95：<br><img src="http://p1.bpimg.com/567571/907e7d5531f79480.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机前沿开发介绍作业(1)：利用Docker容器搭建Web应用]]></title>
      <url>http://www.dengfuping.com/2017/01/27/introduction-to-computer-frontier-development-1/</url>
      <content type="html"><![CDATA[<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol>
<li>运行环境包含Linux操作系统如Ubuntu、Web服务器、PHP服务器、MySQL服务器，服务器版本可自行选择；</li>
<li>利用Dockerfile创建Docker Image；</li>
<li>基于第2步创建的Docker Image, 启动两个Docker容器，需要映射Web应用到不同端口；</li>
<li>利用Curl工具下载网站到本地。<a id="more"></a></li>
</ol>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>Ubuntu 16.04</li>
<li>Docker</li>
<li>Apache 、MySQL、curl和w3m</li>
</ul>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>创建Dockerfile文件，并写入以下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Pull and install base images from the remote server  </span></div><div class="line">FROM ubuntu:14.04</div><div class="line">  </div><div class="line">MAINTAINER dengfuping &lt;dengfuping@tju.edu.cn&gt;   </div><div class="line"></div><div class="line"><span class="comment"># update source  </span></div><div class="line">RUN apt-get update</div><div class="line"></div><div class="line"><span class="comment">#install wegt</span></div><div class="line">RUN  /bin/bash</div><div class="line">RUN  sudo apt-get -y install wget</div><div class="line"></div><div class="line"><span class="comment">#install xampp</span></div><div class="line">RUN wget http://sourceforge.net/projects/xampp/files/XAMPP%20Linux/1.8.3/xampp-linux-x64-1.8.3-2-installer.run/download</div><div class="line"></div><div class="line">RUN chmod +x download</div><div class="line">RUN ./download</div></pre></td></tr></table></figure></p>
<p>根据创建的Dockerfile文件，使用“sudo docker build -t xampp .”命令安装实验环境，以下是安装命令和安装过程：<br><img src="http://p1.bpimg.com/567571/a008dd677cec7d0f.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/15179ce34f3922ad.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/80987c947d0779ce.png" alt=""></p>
<p>出现以下字样说明安装成功：<br><img src="http://p1.bpimg.com/567571/538c6092b07cf9e8.png" alt=""></p>
<p>安装完成后使用“sudo docker images”查看安装的xampp镜像：<br><img src="http://p1.bpimg.com/567571/899b34266e7e9b76.png" alt=""></p>
<p>然后使用以下命令创建一个名为xampp的容器，映射端口号为127.0.0.1:80其对应的容器ID为c1951aef43de，命令和截图如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -i -t <span class="_">-d</span> -p 127.0.0.1:8086:80 -v /opt/lampp/htdocs:/opt/lampp/htdocs xampp /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://p1.bqimg.com/567571/1438107f0d88aa6d.png" alt=""></p>
<p>接着使用以下命令依次进入xampp容器并开启xampp中Apache和MySQL的服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo docker start c1951aef43de</div><div class="line">sudo docker start c1951aef43de</div><div class="line">/opt/lamp/lamp start</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/567571/0d6e9b70e3e7cdce.png" alt=""></p>
<p>然后使用“sudo apt-get install curl”命令安装curl工具：<br><img src="http://p1.bpimg.com/567571/c3e0b3c0e580a580.png" alt=""></p>
<p>出现以下提示说明curl安装成功：<br><img src="http://p1.bpimg.com/567571/844fe85c569e2e10.png" alt=""></p>
<p>将web项目复制到Apache服务器根目录以后，使用以下curl命令下载第二次作业的个人网站到本地：curl <a href="http://localhost/hw2/select.php。输出结果如下所示：将web项目复制到Apache服务器根目录以后，使用以下curl命令下载第二次作业的个人网站到本地：curl" target="_blank" rel="external">http://localhost/hw2/select.php。输出结果如下所示：将web项目复制到Apache服务器根目录以后，使用以下curl命令下载第二次作业的个人网站到本地：curl</a> <a href="http://localhost/hw2/select.php。输出结果如下所示：" target="_blank" rel="external">http://localhost/hw2/select.php。输出结果如下所示：</a><br><img src="http://p1.bpimg.com/567571/24f43cbe34217374.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/3f99124b9527f8a3.png" alt=""></p>
<p>为了显示网站的页面效果，我们需要安装w3m工具：为了显示网站的页面效果，我们需要安装w3m工具：<br><img src="http://p1.bpimg.com/567571/720c185d7b2ef13b.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/ac48682640a7d380.png" alt=""></p>
<p>通过运行“w3m <a href="http://localhost/hw2/select.php”命令，可得：" target="_blank" rel="external">http://localhost/hw2/select.php”命令，可得：</a><br><img src="http://p1.bpimg.com/567571/a32e417870446ce4.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/1d8294a5ae7d619a.png" alt=""></p>
<p>使用“sudo docker rm c1951aef43de”移除上述容器，输入查看容器命令“sudo docker ps”后结果如下图所示：<br><img src="http://p1.bqimg.com/567571/73dc72847f8f8db1.png" alt=""></p>
<p>使用如下命令创建一个映射端口号为127.0.0.1:88、容器ID为6e888a82e084的新的xampp容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -i -t <span class="_">-d</span> -p 127.0.0.1:8086:88 -v /opt/lampp/htdocs:/opt/lampp/htdocs xampp /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/567571/aaa682319e31a595.png" alt=""></p>
<p>同样的，和第一个容器中的操作步骤一样，输入“curl <a href="http://localhost/hw2/select.php”命令可得：" target="_blank" rel="external">http://localhost/hw2/select.php”命令可得：</a><br><img src="http://p1.bpimg.com/567571/b0b91c47ebb14534.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/27bfd167903e4e24.png" alt=""></p>
<p>输入“w3m <a href="http://localhost/hw2/select.php”命令可得：" target="_blank" rel="external">http://localhost/hw2/select.php”命令可得：</a><br><img src="http://p1.bpimg.com/567571/a32e417870446ce4.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/1d8294a5ae7d619a.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像处理作业(2)：Edge Detection Algorithms]]></title>
      <url>http://www.dengfuping.com/2017/01/25/image-processing-assignment-2/</url>
      <content type="html"><![CDATA[<h1 id="Prewitt-Operator"><a href="#Prewitt-Operator" class="headerlink" title="Prewitt Operator"></a>Prewitt Operator</h1><h2 id="Source-Code-Matlab"><a href="#Source-Code-Matlab" class="headerlink" title="Source Code (Matlab)"></a>Source Code (Matlab)</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I2 = imread(<span class="string">'img1.jpg'</span>);</div><div class="line">I = rgb2gray(I2);</div><div class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>), imshow(I2);</div><div class="line">title(<span class="string">'Original'</span>);</div><div class="line">BW1 = edge(I, <span class="string">'prewitt'</span>);  </div><div class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>), imshow(BW3); </div><div class="line">title(<span class="string">'Prewitt'</span>);</div></pre></td></tr></table></figure>
<h2 id="Running-Results"><a href="#Running-Results" class="headerlink" title="Running Results"></a>Running Results</h2><h3 id="Image-1"><a href="#Image-1" class="headerlink" title="Image 1"></a>Image 1</h3><p><img src="http://p1.bqimg.com/567571/728f82c98eab1b1c.png" alt=""><a id="more"></a></p>
<h3 id="Image-2"><a href="#Image-2" class="headerlink" title="Image 2"></a>Image 2</h3><p><img src="http://p1.bpimg.com/567571/7377cd16b8da0332.png" alt=""></p>
<h3 id="Image-3"><a href="#Image-3" class="headerlink" title="Image 3"></a>Image 3</h3><p><img src="http://i1.piimg.com/567571/c01246ee9232ef1c.png" alt=""></p>
<h3 id="Image-4"><a href="#Image-4" class="headerlink" title="Image 4"></a>Image 4</h3><p><img src="http://p1.bpimg.com/567571/525d29994cddacfb.png" alt=""></p>
<h3 id="Image-5"><a href="#Image-5" class="headerlink" title="Image 5"></a>Image 5</h3><p><img src="http://i1.piimg.com/567571/432e8143224ea386.png" alt=""></p>
<h1 id="Sobel-Operator"><a href="#Sobel-Operator" class="headerlink" title="Sobel Operator"></a>Sobel Operator</h1><h2 id="Source-Code-OpenCV"><a href="#Source-Code-OpenCV" class="headerlink" title="Source Code (OpenCV)"></a>Source Code (OpenCV)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mat grad_x, grad_y;</div><div class="line">    Mat abs_grad_x, abs_grad_y, dst;</div><div class="line"></div><div class="line">    Mat src = imread(<span class="string">"img1.jpg"</span>);</div><div class="line">    imshow(<span class="string">"Original"</span>, src);</div><div class="line"></div><div class="line">    <span class="comment">//X-direction gradient</span></div><div class="line">    Sobel( src, grad_x, CV_16S, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, BORDER_DEFAULT );</div><div class="line">    convertScaleAbs( grad_x, abs_grad_x );</div><div class="line">    imshow(<span class="string">"X-direction Sobel"</span>, abs_grad_x);</div><div class="line">    imwrite(<span class="string">"img1-1.jpg"</span>,abs_grad_x);</div><div class="line"></div><div class="line">    <span class="comment">//Y-direction gradient</span></div><div class="line">    Sobel( src, grad_y, CV_16S, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, BORDER_DEFAULT );</div><div class="line">    convertScaleAbs( grad_y, abs_grad_y );</div><div class="line">    imshow(<span class="string">"Y-direction Sobel"</span>, abs_grad_y);</div><div class="line">    imwrite(<span class="string">"img1-2.jpg"</span>,abs_grad_y);</div><div class="line"></div><div class="line">    addWeighted( abs_grad_x, <span class="number">0.5</span>, abs_grad_y, <span class="number">0.5</span>, <span class="number">0</span>, dst );</div><div class="line">    imshow(<span class="string">"Sobel"</span>, dst);</div><div class="line">    imwrite(<span class="string">"img1-3.jpg"</span>,dst);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Running-Results-1"><a href="#Running-Results-1" class="headerlink" title="Running Results"></a>Running Results</h2><h3 id="Image-1-1"><a href="#Image-1-1" class="headerlink" title="Image 1"></a>Image 1</h3><p><img src="http://i1.piimg.com/567571/7c7c6b9724bb879b.png" alt=""></p>
<h3 id="Image-2-1"><a href="#Image-2-1" class="headerlink" title="Image 2"></a>Image 2</h3><p><img src="http://p1.bpimg.com/567571/b34c6f7c9eb7e00f.png" alt=""></p>
<h3 id="Image-3-1"><a href="#Image-3-1" class="headerlink" title="Image 3"></a>Image 3</h3><p><img src="http://i1.piimg.com/567571/3dd6330dcb8c5fed.png" alt=""></p>
<h3 id="Image-4-1"><a href="#Image-4-1" class="headerlink" title="Image 4"></a>Image 4</h3><p><img src="http://p1.bpimg.com/567571/0ee79e1bf290bf7e.png" alt=""></p>
<h3 id="Image-5-1"><a href="#Image-5-1" class="headerlink" title="Image 5"></a>Image 5</h3><p><img src="http://p1.bpimg.com/567571/19f559037836ddf2.png" alt=""></p>
<h1 id="Canny-Operator"><a href="#Canny-Operator" class="headerlink" title="Canny Operator"></a>Canny Operator</h1><h2 id="Source-Code-OpenCV-1"><a href="#Source-Code-OpenCV-1" class="headerlink" title="Source Code (OpenCV)"></a>Source Code (OpenCV)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mat src = imread(<span class="string">"img1.jpg"</span>);</div><div class="line">    Mat src1=src.clone();</div><div class="line">    imshow(<span class="string">"Canny"</span>, src);</div><div class="line"></div><div class="line">    Canny( src, src, <span class="number">150</span>, <span class="number">100</span>,<span class="number">3</span> );</div><div class="line">    imshow(<span class="string">"Canny"</span>, src);</div><div class="line">    imwrite(<span class="string">"img1-1.jpg"</span>,src);</div><div class="line"></div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Running-Results-2"><a href="#Running-Results-2" class="headerlink" title="Running Results"></a>Running Results</h2><h3 id="Image-1-2"><a href="#Image-1-2" class="headerlink" title="Image 1"></a>Image 1</h3><p><img src="http://i1.piimg.com/567571/86b21587ba24e537.png" alt=""></p>
<h3 id="Image-2-2"><a href="#Image-2-2" class="headerlink" title="Image 2"></a>Image 2</h3><p><img src="http://i1.piimg.com/567571/c80b5856a110fe80.png" alt=""></p>
<h3 id="Image-3-2"><a href="#Image-3-2" class="headerlink" title="Image 3"></a>Image 3</h3><p><img src="http://i1.piimg.com/567571/9d7bd1feb640d341.png" alt=""></p>
<h3 id="Image-4-2"><a href="#Image-4-2" class="headerlink" title="Image 4"></a>Image 4</h3><p><img src="http://p1.bqimg.com/567571/972ee0283804f6fa.png" alt=""></p>
<h3 id="Image-5-2"><a href="#Image-5-2" class="headerlink" title="Image 5"></a>Image 5</h3><p><img src="http://p1.bpimg.com/567571/0e1e67913de326e1.png" alt=""></p>
<h1 id="Laplacian"><a href="#Laplacian" class="headerlink" title="Laplacian"></a>Laplacian</h1><h2 id="Source-Code-OpenCV-2"><a href="#Source-Code-OpenCV-2" class="headerlink" title="Source Code (OpenCV)"></a>Source Code (OpenCV)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mat src,src_gray,dst, abs_dst;</div><div class="line">    src = imread(<span class="string">"img1.jpg"</span>);</div><div class="line">    imshow(<span class="string">"Original"</span>, src);</div><div class="line">    GaussianBlur( src, src, Size(<span class="number">3</span>,<span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>, BORDER_DEFAULT );</div><div class="line">    cvtColor( src, src_gray, CV_RGB2GRAY );</div><div class="line">    Laplacian( src_gray, dst, CV_16S, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, BORDER_DEFAULT );</div><div class="line">    convertScaleAbs( dst, abs_dst );</div><div class="line">    imshow( <span class="string">"Laplace"</span>, abs_dst );</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Running-Results-3"><a href="#Running-Results-3" class="headerlink" title="Running Results"></a>Running Results</h2><h3 id="Image-1-3"><a href="#Image-1-3" class="headerlink" title="Image 1"></a>Image 1</h3><p><img src="http://i1.piimg.com/567571/991bfd2bdc8371b1.png" alt=""></p>
<h3 id="Image-2-3"><a href="#Image-2-3" class="headerlink" title="Image 2"></a>Image 2</h3><p><img src="http://i1.piimg.com/567571/364bcdac8891c08d.png" alt=""></p>
<h3 id="Image-3-3"><a href="#Image-3-3" class="headerlink" title="Image 3"></a>Image 3</h3><p><img src="http://p1.bqimg.com/567571/f4610ede66f0e785.png" alt=""></p>
<h3 id="Image-4-3"><a href="#Image-4-3" class="headerlink" title="Image 4"></a>Image 4</h3><p><img src="http://p1.bqimg.com/567571/e7ce7b0f138a58da.png" alt=""></p>
<h3 id="Image-5-3"><a href="#Image-5-3" class="headerlink" title="Image 5"></a>Image 5</h3><p><img src="http://i1.piimg.com/567571/3a294e349050f388.png" alt=""></p>
<h1 id="FDoG"><a href="#FDoG" class="headerlink" title="FDoG"></a>FDoG</h1><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><a href="http://pan.baidu.com/s/1kUCivDP" target="_blank" rel="external">点击此处</a>下载源代码和对应的VS工程项目。</p>
<h2 id="Running-Results-4"><a href="#Running-Results-4" class="headerlink" title="Running Results"></a>Running Results</h2><h3 id="Image-1-4"><a href="#Image-1-4" class="headerlink" title="Image 1"></a>Image 1</h3><p><img src="http://p1.bqimg.com/567571/5bb1439ba0657dfa.png" alt=""></p>
<h3 id="Image-2-4"><a href="#Image-2-4" class="headerlink" title="Image 2"></a>Image 2</h3><p><img src="http://p1.bpimg.com/567571/18c4bac34777591a.png" alt=""></p>
<h3 id="Image-3-4"><a href="#Image-3-4" class="headerlink" title="Image 3"></a>Image 3</h3><p><img src="http://p1.bqimg.com/567571/25c131bae4aaabbf.png" alt=""></p>
<h3 id="Image-4-4"><a href="#Image-4-4" class="headerlink" title="Image 4"></a>Image 4</h3><p><img src="http://p1.bqimg.com/567571/073a0212b9f7a46b.png" alt=""></p>
<h3 id="Image-5-4"><a href="#Image-5-4" class="headerlink" title="Image 5"></a>Image 5</h3><p><img src="http://p1.bqimg.com/567571/4781edf5a7780fc5.png" alt=""></p>
<h1 id="Analysis-and-Comparison"><a href="#Analysis-and-Comparison" class="headerlink" title="Analysis and Comparison"></a>Analysis and Comparison</h1><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><h3 id="Prewitt"><a href="#Prewitt" class="headerlink" title="Prewitt"></a>Prewitt</h3><p>&emsp;&emsp;The edge detection of Prewitt operator can be accuracy. However, Prewitt operator is not isotropic, so the edge is not fully connected and there is a certain degree of disconnection. As the result, there are many broken lines on the acquired images, which will lose some information. So it has better performance in simple images.</p>
<h3 id="Sobel"><a href="#Sobel" class="headerlink" title="Sobel"></a>Sobel</h3><p>&emsp;&emsp;Sobel operator is similar with the Prewitt operator. But its effect is more smooth and the width of edge detecting is usually wider. However, Prewitt operator is better than Sobel operator in anti-noise.</p>
<h3 id="Canny"><a href="#Canny" class="headerlink" title="Canny"></a>Canny</h3><p>&emsp;&emsp;Canny operator has a relatively good effect on the accuracy of pixel edge location and anti-noise interference. However, as the price, it may misguide some information of the original image and it is more cumbersome to implement.</p>
<h3 id="Laplacian-1"><a href="#Laplacian-1" class="headerlink" title="Laplacian"></a>Laplacian</h3><p>&emsp;&emsp;Laplacian is a second-order differential operator which is sensitive to noise. As the result, there are some scattered broken edge pixels in some pixels of the segmentation results. It can be proved that it is isotropic. That is to say, the gradient results will not be changed after the rotation of the axis. This is called as the independence of direction of the coordinate axis. Therefore, its positioning on the edge is relatively accurate.</p>
<h3 id="FDoG-1"><a href="#FDoG-1" class="headerlink" title="FDoG"></a>FDoG</h3><p>&emsp;&emsp;FDoG is the best one in edge detection for which it performs more smooth, connective and accurate. For anti-noise, FDoG may be the worst one. Because it is sensitive with all noise. But it is better than Canny operator in the images of main of single color blocks.</p>
<h2 id="Line-width-of-FDoG"><a href="#Line-width-of-FDoG" class="headerlink" title="Line width of FDoG"></a>Line width of FDoG</h2><h3 id="Generate-lines-of-different-widths"><a href="#Generate-lines-of-different-widths" class="headerlink" title="Generate lines of different widths"></a>Generate lines of different widths</h3><p>&emsp;&emsp;The core of FDoG operator is DoG and ETF. We know that DoG is same to LoG, so the Gaussian σ can influence the discrete kernel of LoG and as the result, it also can influence DoG.So the problem is how σ influence the discrete kernel and what connection between the discrete kernel and line width.<br>&emsp;&emsp;Firstly, the Gaussian σ is a parameter of Gaussian σ of Gaussian distribution. There is a feature that the most of Gaussian distribution’s energy is in (3σ,3σ) area, which is named 3σ principle. As the result, σ can influence the Gaussian function’s energy and its discrete kernel. When σ = 1, it can construct a discrete kernel of size 7x7.<br>&emsp;&emsp;Secondly, discrete kernel can detect the edge when there exists one edge in discrete kernel’s area. So for the discrete kernel of size 7x7, it can detect one edge six times with different center pixel in one direction. And after DoG operator, there is ‘edge’ of six pixels width. But there are three pixels are positive (lower Gray-level value side) and the three pixels left are negative (high Gray-level value side).<br>&emsp;&emsp;Then according to the method called binary thresholding, as suggested in [Winnem¨oller et al.2006]:<br><img src="http://p1.bqimg.com/567571/9900e233a92ef21f.png" alt=""></p>
<h3 id="Produce-edges-of-width-1"><a href="#Produce-edges-of-width-1" class="headerlink" title="Produce edges of width 1"></a>Produce edges of width 1</h3><p>&emsp;&emsp;To change the line width to 1, we just need to construct a 3x3 discrete kernel. For this, we need to set σ_c=1.0/3. And for the sake of keeping accuracy, we also need to change the parameter σ_m=1.0 to keep the scale.<br><img src="http://i1.piimg.com/567571/f37f0ac8e6043036.png" alt=""></p>
<p>&emsp;&emsp;As you can see, the line width of image (a) is 1 pixel while the line width of image (b) is 3 pixels. Meanwhile, (a)’s discrete kernel is 3x3 while (b)’ discrete kernel is 7x7.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像处理作业(1-2)：The math deduction to the form of "Laplacian of Gaussian(LoG)"]]></title>
      <url>http://www.dengfuping.com/2017/01/25/image-processing-assignment-1-2/</url>
      <content type="html"><![CDATA[<h2 id="Laplacian-of-Gaussian-LoG"><a href="#Laplacian-of-Gaussian-LoG" class="headerlink" title="Laplacian of Gaussian(LoG)"></a>Laplacian of Gaussian(LoG)</h2><p>As Laplace operator may detect edges as well as noise (isolated, out-of-range), it may be desirable to smooth the image first by a convolution with a Gaussian kernel of width $\sigma$<br><img src="http://i1.piimg.com/567571/4bca2943b11e1f54.png" alt=""><a id="more"></a></p>
<p>In $N = 2$ to suppress the noise before using Laplace for edge detection<br><img src="http://p1.bqimg.com/567571/6f7bf8f192eab9f2.png" alt=""></p>
<p>The first equal sign is due to the fact that<br><img src="http://i1.piimg.com/567571/d910371dc711719a.png" alt=""></p>
<p>So we can obtain the Laplacian of Gaussian  $\bigtriangleup G_{\sigma}(x,y)$ first and then convolve it with the input image. To do so, first consider<br><img src="http://p1.bpimg.com/567571/76fd3ec51805db7a.png" alt=""></p>
<p>and<br><img src="http://i1.piimg.com/567571/af039fab929de898.png" alt=""></p>
<p>Note that for simplicity we omitted the normalizing coefficient  $1/\sqrt{2\pi \sigma^2}$. Similarly we can get<br><img src="http://p1.bpimg.com/567571/9cc3a6d7d7d25787.png" alt=""></p>
<p>Now we have LoG as an operator or convolution kernel defined as<br><img src="http://p1.bqimg.com/567571/b4e995ab6d114087.png" alt=""></p>
<p>There is an example of LoG operator of size $5\times5$ below:<br><img src="http://i1.piimg.com/567571/76f3abd7f2d760ec.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图像处理作业(1-1)：The math deduction to the general form of "Discrete Laplacian Operator"]]></title>
      <url>http://www.dengfuping.com/2017/01/25/image-processing-assignment-1-1/</url>
      <content type="html"><![CDATA[<h2 id="The-Laplace-Operator"><a href="#The-Laplace-Operator" class="headerlink" title="The Laplace Operator"></a>The Laplace Operator</h2><p>The Laplace operator is a scalar operator defined as the dot product (inner product) of two gradient vector operators:<br><img src="http://i1.piimg.com/567571/32f934c177602a5b.png" alt=""><a id="more"></a></p>
<p>In $N = 2$ dimensional space, we have:<br><img src="http://p1.bqimg.com/567571/fc233fcaef670639.png" alt=""></p>
<p>When applied to a 2-D function $f (x, y)$, this operator produces a scalar function:<br><img src="http://i1.piimg.com/567571/0a3207f3e5dd4d26.png" alt=""></p>
<p>In discrete case, the second order differentiation becomes second order difference. In 1-D case, if the first order difference is defined as<br><img src="http://p1.bqimg.com/567571/677066fffa355662.png" alt=""></p>
<p>then the second order difference is<br><img src="http://i1.piimg.com/567571/833e846992a78669.png" alt=""></p>
<p>Note that $\bigtriangleup f[n]$  is so defined that it is symmetric to the center element $f[n]$. The Laplace operation can be carried out by 1-D convolution with a kernel $[1,-2,1]$. In 2-D case, Laplace operator is the sum of two second order differences in both dimensions:<br><img src="http://p1.bqimg.com/567571/b41b2e2b606515c3.png" alt=""></p>
<p>This operation can be carried out by 2-D convolution kernel with size $3\times3$:<br><img src="http://p1.bqimg.com/567571/5a3cbd83fcaf5ec1.png" alt=""></p>
<p>Other Laplace kernels with size $3\times3$ can be used:<br><img src="http://p1.bqimg.com/567571/e69749f5479f3351.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（十四）：ex05.multichoice作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-14/</url>
      <content type="html"><![CDATA[<p>1、下列选项中,操作系统提供给应用程序的接口是（A）。<br>A.系统调用&emsp;&emsp;&emsp;&emsp;B.中断&emsp;&emsp;&emsp;&emsp;C.库函数&emsp;&emsp;&emsp;&emsp;D.原语<br><strong>解答：</strong>系统调用是操作系统提供给编程人员的唯一接口。–《计算机操作系统教程》<a id="more"></a></p>
<p>2、下列选项中,导致创建新进程的操作是（C）。<br>I 用户登录成功&emsp;&emsp;&emsp;&emsp;II 设备分配&emsp;&emsp;&emsp;&emsp;III 启动程序执行<br>A.仅 I 和 II&emsp;&emsp;&emsp;&emsp;B.仅 II 和 III&emsp;&emsp;&emsp;&emsp;C.仅 I 和 III&emsp;&emsp;&emsp;&emsp;D.I 、 II 和 III<br><strong>解答：</strong>用户登录成功后，操作系统将启动与用户有关的初始程序，此时需要创建新的进程。启动程序执行时毫无疑问会启动新进程。但设备分配是针对现有进程，不会创建新进程。</p>
<p>3、设与某资源关联的信号量初值为 3,当前值为 1。若 M 表示该资源的可用个数,N 表示等待该资源的进程数,则 M 、 N 分别是（B）。<br>A.0、 1&emsp;&emsp;&emsp;&emsp;B.1、 0&emsp;&emsp;&emsp;&emsp;C.1、 2&emsp;&emsp;&emsp;&emsp;D.2、 0<br><strong>解答：</strong>由于信号量的当前取值为1，自然说明可用资源个数为1。由于当前还有可用资源数，等待资源的进程数只能是0，否则就不可能还有可用资源</p>
<p>4、下列选项中,降低进程优先级的合理时机是（A）。<br>A. 进程的时间片用完<br>B. 进程刚完成 I/ O,进入就绪列队<br>C. 进程长期处于就绪列队中<br>D. 进程从就绪态转为运行态<br><strong>解答：</strong>进程时间片用完可以降低其优先级，完成I/O的进程应该提升其优先级，处于就绪队列等待调度的进程一般不会改变其优先级。</p>
<p>5、进程 P0 和 P1 的共享变量定义及其初值为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">boolean flag[<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> turn = <span class="number">0</span>;</div><div class="line">flag[<span class="number">0</span>] = FALSE;</div><div class="line">flag[<span class="number">1</span>] = FALSE;</div></pre></td></tr></table></figure></p>
<p>若进程 P0 和 P1 访问临界资源的类 C 伪代码实现如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">P0</span><span class="params">()</span> <span class="comment">// 进程 P0</span></span></div><div class="line">&#123;</div><div class="line">　　<span class="keyword">while</span>(TRUE)</div><div class="line">　　&#123;</div><div class="line">　　flag[<span class="number">0</span>]=TRUE; turn=<span class="number">1</span>;</div><div class="line">　　<span class="keyword">while</span>(flag[<span class="number">1</span>]&amp;&amp;(turn==<span class="number">1</span>)) ;</div><div class="line">　　临界区;</div><div class="line">　　flag[<span class="number">0</span>]=FALSE;</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">P1</span><span class="params">()</span> <span class="comment">// 进程 P1</span></span></div><div class="line">&#123;</div><div class="line">　　<span class="keyword">while</span>(TRUE)</div><div class="line">　　&#123;</div><div class="line">　　flag[<span class="number">1</span>]=TRUE; turn=<span class="number">0</span>;</div><div class="line">　　<span class="keyword">while</span>(flag[<span class="number">0</span>]&amp;&amp;(turn==<span class="number">0</span>)) ;</div><div class="line">　　临界区;</div><div class="line">　　flag[<span class="number">1</span>]=FALSE;</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则并发执行进程 P0 和 P1 时产生的情形是（D）。<br>A. 不能保证进程互斥进入临界区,会出现“饥饿” 现象<br>B. 不能保证进程互斥进入临界区,不会出现“饥饿” 现象<br>C. 能保证进程互斥进入临界区,会出现“饥饿” 现象<br>D. 能保证进程互斥进入临界区,不会出现“饥饿” 现象<br><strong>解答：</strong>此算法实现互斥的主要思想在于设置了一个turn变量，用于进程问的互相“谦让”。一般情况下，如果进程P0试图访问临界资源，设置flag[0]=true，表示希望访问。此时如果进程P1还未试图访问临界资源，则flag[1]在进程上一次访问完临界资源退出临界区后已设置为false。所以进程P0在执行循环判断条件时，第一个条件不满足，进程P0可以正常进入临界区，且满足互斥条件。<br>&emsp;&emsp;我们需要考虑的是，两个进程同时试图访问临界资源的情况。注意，turn变量的含义：进程在试图访问时，首先设置自己的flag变量为true，表示希望访问；但又设置turn变量为对方的进程编号，表示“谦让”，因为在循环判断条件中turn变量不是自己编号时就循环等待。这时两个进程就会互相“谦让”，但是这不会造成“饥饿”的局面，因为turn变量会有一个最终值，所以必定有进程可以结束循环进入临界区。实际的情况是，先作出“谦让”的进程先进入临界区，后作出“谦让”的进程则需要循环等待。<br>&emsp;&emsp;其实这里可以想象为两个人进门，每个人进门前都会和对方客套一句“您走先”。如果进门时没别人，就当和空气说句废话，然后大步登门入室；如果两人同时进门，就互相“谦让”，但各自只客套一次，所以先客套的人请完对方，就等着对方请自己，然后光明正大进门。</p>
<p>6、某基于动态分区存储管理的计算机,其主存容量为 55M B(初始为空闲),采用最佳适配(Best Fit)算法,分配和释放的顺序为:分配 15M B,分配 30M B,释放 15M B,分配 8M B,分配 6M B,此时主存中最大空闲分区的大小是（B）。<br>A.7MB<br>B.9MB<br>C.10MB<br>D.15MB<br><strong>解答：</strong>其主存容量为55mb(初试为空间)，第一步分配15MB以后还有55MB－15MB＝40MB，第二步分配30MB以后还有 40MB－30MB＝10MB，第三步释放15MB以后有两个空闲区15MB，和10MB，第四步分配8MB，则空闲区为15MB，2MB，第五步分配 6MB，则空闲区为9MB，2MB，所以这个题目应该是选B</p>
<p>7、某计算机采用二级页表的分页存储管理方式,按字节编址,页大小为 2^10 字节,页表项大小为 2 字节,逻辑地址结构为:<br>页目录号    页号    页内偏移量<br>逻辑地址空间大小为 2^16 页,则表示整个逻辑地址空间的页目录表中包含表项的个数至少是（B）。<br>A. 64&emsp;&emsp;&emsp;&emsp;B. 128&emsp;&emsp;&emsp;&emsp;C. 256&emsp;&emsp;&emsp;&emsp;D. 512<br><strong>解答：</strong>页大小为2的10次方字节，页表项大小为2字节，采用二级页表，一页可存放2的9次方个页表项，逻辑地址空间大小为2的16次方页，要使表示整个逻辑地址空间的页目录表中包含的表项个数最少，则需要2的16次方/2的9次方=2的7次方=128个页面保存页表项，即页目录中包含的个数最少为128</p>
<p>8、本地用户通过键盘登陆系统时,首先获得键盘输入信息的程序是（B）。<br>A.命令解释程序&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B.中断处理程序<br>C.系统调用服务程序&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;D.用户登录程序<br><strong>解答：</strong>当用户使用键盘输入信息时，每次输入都会产生一个中断。因此，首先获得键盘输入信息的程序是中断处理程序。</p>
<p>9、单处理机系统中,可并行的是（D）<br>I 进程与进程&emsp;&emsp;&emsp;&emsp;II 处理机与设备&emsp;&emsp;&emsp;&emsp;III 处理机与通道&emsp;&emsp;&emsp;&emsp;IV 设备与设备<br>A.I、 II 和 III&emsp;&emsp;&emsp;&emsp;B.I、 II 和 IV&emsp;&emsp;&emsp;&emsp;C.I、 III 和 IV&emsp;&emsp;&emsp;&emsp;D.II、 III和 IV</p>
<p>10、下列进程调度算法中,综合考虑进程等待时间和执行时间的是（D）。<br>A.时间片轮转调度算法&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B.短进程优先调度算法<br>C.先来先服务调度算法&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;D.高响应比优先调度算法</p>
<p>11、某计算机系统中有 8 台打印机,由 K 个进程竞争使用,每个进程最多需要 3台打印机。该系统可能会发生死锁的 K 的最小值是（C）。<br>A.2&emsp;&emsp;&emsp;&emsp;B.3&emsp;&emsp;&emsp;&emsp;C.4&emsp;&emsp;&emsp;&emsp;D.5<br><strong>解答：</strong>每个进程都占有2台打印机时，发生死锁。</p>
<p>12、分区分配内存管理方式的主要保护措施是（A）。<br>A.界地址保护&emsp;&emsp;&emsp;&emsp;B.程序代码保护&emsp;&emsp;&emsp;&emsp;C.数据保护&emsp;&emsp;&emsp;&emsp;D.栈保护<br><strong>解答：</strong>在分区分配内存管理方式中，主要用上、下界寄存器保护分区，也称为界地址保护。本题答案为A。</p>
<p>13、一个分段存储管理系统中,地址长度为 32 位,其中段号占 8 位,则最大段长是（C）。<br>A.2^8 字节&emsp;&emsp;&emsp;&emsp;B.2^16 字节&emsp;&emsp;&emsp;&emsp;C.2^24 字节&emsp;&emsp;&emsp;&emsp;D.2^32 字节</p>
<p>14、在采用 spooling 技术的系统中，用户的打印数据首先被送到（B）。<br>A、磁盘固定区域&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B、内存固定区域<br>C、中断&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;D、打印机<br><strong>解答：</strong>spooling就是联机技术，缓冲的一种，放在内存中。</p>
<p>15、如果 I/O 所花费的时间比 CPU 的处理时间短的多，则缓冲区（B）。<br>A、最有效&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B、几乎无效<br>C、均衡&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;D、以上都不是</p>
<p>16、设备独立性说法正确的是（B）。<br>A、 设备独立性是指 I/O 设备具有独立执行 I/O 功能的一种特性<br>B、 设备独立性是指用户程序独立于具体物理设备的一种特性<br>C、 设备独立性是指能够实现设备共享的一种特性<br>D、 设备独立性是指设备驱动程序独立于具体物理设备的一种特性<br><strong>解答：</strong>设备独立性是指用户不指定特定的设备，而指定逻辑设备，使得用户作业和物理设备独立开来，再通过其他途径建立逻辑设备和物理设备之间的对应关系的特性；即用户程序独立于具体使用的物理设备的一种特性。</p>
<p>17、如果 I/O 设备与存储设备间的数据交换不经过 CPU 来完成，则这种数据交换方式是（C）。<br>A、程序查询方式&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B、中断方式<br>C、DMA 方式 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;D、提供主、辅存接口<br><strong>解答：</strong>在DMA(直接内存存储)控制器控制下，外设直接与内存交换成批数据而不用CPU干预。故选C。</p>
<p>18、设文件索引节点中有 7 个地址项,其中 4 个地址项是直接地址索引,2 个地址项是一级间接地址索引,1 个地址项是二级间接地址索引,每个地址项大小为 4 字节。若磁盘索引块和磁盘数据块大小均为 256 字节,则可表示的单个文件最大长度是（C）。<br>A.33 KB&emsp;&emsp;&emsp;&emsp;B.519 KB&emsp;&emsp;&emsp;&emsp;C.1057 KB&emsp;&emsp;&emsp;&emsp;D.16513 KB<br><strong>解答：</strong>本题的文件结构属混合索引分配方式。每个地址项大小为4字节，索引块和盘块大小为256字节，每个索引块中的项目数=256B/4B=64个。4个地址项为直接地址索引，对应的文件大小为4×256B=1KB。2个地址项是一级间接地址索引，对应的文件大小是2×64×256B=32KB，一个地址项是二级间接地址索引，对应的文件大小为1×64×64×256B=1024KB。所以单个文件的最大长度=1KB+32KB+1024KB=1057KB。</p>
<p>19、设置当前工作目录的主要目的是（C）。<br>A.节省外存空间&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B.节省内存空间<br>C.加快文件的检索速度&emsp;&emsp;&emsp;&emsp;&emsp;D.加快文件的读/写速度</p>
<p>20、下列文件物理结构中,适合随机访问且易于文件扩展的是（B）。<br>A.连续结构&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;B.索引结构<br>C.链式结构且磁盘块定长&emsp;&emsp;&emsp;&emsp;D.链式结构且磁盘块变长<br><strong>解答：</strong>索引结构适合随机访问且易于文件扩展。</p>
<p>21、假设磁头当前位于第 105 道,正在向磁道序号增加的方向移动。现有一个磁道访问请求序列为 35,45,12,68,110,180,170,195,采用 SCAN 调度(电梯调度)算法得到的磁道访问序列是（A）。<br>A.110, 170, 180, 195, 68, 45, 35, 12<br>B.110, 68, 45, 35, 12, 170, 180, 195<br>C.110, 170, 180, 195, 12, 35, 45, 68<br>D.12, 35, 45, 68, 110, 170, 180, 195<br><strong>解答：</strong>SCAN调度(电梯调度)算法:电梯调度算法基于日常生活中的电梯工作模式：电梯保持按一个方向移动，直到在那个方向上没有请求为止，然后改变方 向。反映在磁盘调度上，总是沿着移动臂的移动方向选择距离磁头当前位置最近的I/O请求作为下一次调度的对象。如果该方向上已无I/O请求，则改变方向再 做选择。假设磁头当前位于第105道，正在向磁道序号增加的方向移动。现在一个磁道访问请求序列为 35，45，12，68，110，180，170，195，采用SCAN调度（电梯调度算法得到的磁道访问序列 是：110,170,180,195,68,45,35,12。</p>
<p>22、文件系统中,文件访问控制信息存储的合理位置是（A）。<br>A.文件控制块&emsp;&emsp;&emsp;&emsp;B.文件分配表&emsp;&emsp;&emsp;&emsp;C.用户口令表&emsp;&emsp;&emsp;&emsp;D.系统注册表<br><strong>解答：</strong>文件控制块是操作系统为管理文件而设置的一组具有固定格式的数据结构，存放了为管理文件所需的所有有属性信息（文件属性或元数据）。文件分配表FAT（File Allocation Table）用来记录文件所在位置的表格。</p>
<p>23、设文件 F1 的当前引用计数值为 1,先建立 F1 的符号链接(软链接)文件 F2,再建立 F1 的硬链接文件 F3,然后删除 F1。此时,F2 和 F3 的引用计数值分别是（B）。<br>A. 0、1&emsp;&emsp;&emsp;&emsp;B.1、1&emsp;&emsp;&emsp;&emsp;C.1、2&emsp;&emsp;&emsp;&emsp;D.2、1<br><strong>解答：</strong>硬链接：在磁盘上有一份内容一样的文件产生，但不改变文件的Inode,也就是与原文件共用Inode。<br>软链接：不在磁盘上有一份内容一样的文件 产生，但产生新的Inode。</p>
<p>24、程序员利用系统调用打开 I/O 设备时,通常使用的设备标识是（A）。<br>A.逻辑设备名&emsp;&emsp;&emsp;&emsp;B.物理设备名&emsp;&emsp;&emsp;&emsp;C.主设备号&emsp;&emsp;&emsp;&emsp;D.从设备号<br><strong>解答：</strong>程序员所看到的是设备的逻辑设备名</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（十三）：ex04.disk作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-13/</url>
      <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>1、若干个等待访问磁盘者依次要访问的柱面为 20,44,40,4,80,12,76，假设每移动一个柱面需要3ms时间，移动臂当前位于40号柱面，磁头正向磁道好增加的方向移动，请按 FCFS, SSTF, SCAN 算法分别计算为完成上述访问总共花费的寻找时间。<a id="more"></a><br><strong>解答：</strong><br>（1）FCFS算法：<br>移动臂的移动次序为：40 → 20 → 44 → 40 → 4 → 80 → 12 → 76<br>移动的柱面数 = 20 +24+4+36+76+68+64=292<br>共花费 3×292=876毫秒</p>
<p>（2）SSTF算法：<br>移动臂的移动次序为：40 → 44 → 20 → 12 → 4 → 76 → 80<br>移动的柱面数 = 4+24+8+8+72+4=120<br>共花费 3×120=360毫秒</p>
<p>（3）SCAN算法：<br>移动臂的移动次序为<br>40 → 44 → 76 → 80 → 20 → 12 → 4<br>移动的柱面数 = 4+32+4+60+8+8=116<br>共花费 3×116=348毫秒</p>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>2、假设计算机系统采用CSCAN(循环扫描)磁盘调度策略,使用2KB的内存空间记录16384个磁盘的空闲状态。<br>（1）请说明在上述条件如何进行磁盘块空闲状态的管理。<br>（2）设某单面磁盘的旋转速度为每分钟6000转，每个磁道有100个扇区，相临磁道间的平均移动的时间为1ms。若在某时刻，磁头位于100号磁道处，并沿着磁道号增大的方向移动，磁道号的请求队列为50，90，30，120对请求队列中的每个磁道需读取1个随机分布的扇区，则读完这个扇区点共需要多少时间？需要给出计算过程。<br>（3）如果将磁盘替换为随机访问的 Flash 半导体存储器(如U盘、SSD 等),是否有比 CSCAN 更高效的磁盘调度策略？若有,给出磁盘调度策略的名称并 说明理由；若无,说明理由。<br><img src="http://i1.piimg.com/567571/706304999d613347.png" alt=""><br><strong>解答：</strong><br>（1）2KB = 2<em>1024</em>8bit = 16384bit。因此可以使用位图法进行磁盘块空闲状态管理，每1bit表示一个磁盘块是否空闲。</p>
<p>（2）每分钟6000转，转一圈的时间为0.01s，通过一个扇区的时间为0.0001s。 则平均旋转延迟时间为0.01/2 = 5ms, 平均平均读取时间为0.1ms。根据CSCAN算法，被访问的磁道号顺序为100，120，30， 50，90,因此，寻道用去的总时间为：（20 + 90 + 20 + 40）<em> 1ms = 170ms。总共要随机读取四个扇区，用去的时间为：（0.01</em>0.5 + 0.0001）* 4 = 0.0204s = 20.4ms 所以，读完这个扇区点共需要 170ms + 20.4ms = 190.4ms。</p>
<p>（3）采用FCFS调度策略更高效。随机访问的FLASH半导体存储器的物理结构不需要考虑寻道时间和旋转时间延时，可直接按请求的先后顺序执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（十二）：ex03.memory作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-12/</url>
      <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>1、某个OS采用可变分区分配方法管理，用户主存512KB，自由区由可用空区表管理。若分配时采用分配自由区的低地址部分的方案，假设初始时全为空。对于下列申请顺序： 申请(300KB),  申请(100KB),  释放(300KB),  申请(150KB),申请(30KB),申请(40KB),申请(60KB),释放(30KB)。回答下列问题：<br>（1）采用首次适应（FF），自由空区中有哪些空块（给出地址和大小）？<br>（2）若采用最佳适应（BF），回答（1）中的问题。<br>（3）如果再申请100KB，针对（1）和（2）各有什么结果？<a id="more"></a><br><strong>解答：</strong><br>（1）如下图所示：<br><img src="http://p1.bqimg.com/567571/cbdd67f896833e85.png" alt=""></p>
<p>（2）如下图所示：<br><img src="http://i1.piimg.com/567571/22dd24d534557283.png" alt=""></p>
<p>（3）针对（1） 可分配在400K位置；针对（2） 无法分配。</p>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>2、考虑下面的页访问串：1,2,3,4,2,1,5,6,2,1,2,3,7,6,3,2,1,2,3,6 假定有4,5,6个页块，应用下面的页面替换算法，计算各会出现多少次缺页中断。注意，所给定的页块初始均为空，因此，首次访问一页时就会发生缺页中断。<br>（1）LRU  （2）FIFO  （3）Optimal<br><strong>解答：</strong><br>（1）LRU<br>对于4个页块：<br><img src="http://i1.piimg.com/567571/fd1d382c5c43d983.png" alt=""><br>可得共出现缺页中断10次；<br>步骤同上图可得5个页块共出现缺页中断8次，6个页块共出现缺页中断7次。</p>
<p>（2）FIFO<br>对于4个页块：<br><img src="http://p1.bpimg.com/567571/4b94ef51c07e9059.png" alt=""><br>可得共出现缺页中断14次；<br>步骤同上图可得5个页块共出现缺页中断10次，6个页块共出现缺页中断10次。</p>
<p>（3）Optimal<br>对于4个页块：<br><img src="http://i1.piimg.com/567571/d37a24a6660201ec.png" alt=""><br>可得共出现缺页中断8次；<br>步骤同上图可得5个页块共出现缺页中断8次，6个页块共出现缺页中断7次。</p>
<h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>3、一台计算机有4个页块，装入时间、上次引用时间、它们的R（读）与M（修改）位如下表所示（时间：滴答），请问NRU、FIFO、LRU和第二次机会算法将替换那一页？<br><img src="http://i1.piimg.com/567571/26d58b5369fee2e8.png" alt=""><br><strong>解答：</strong><br>NRU算法将替换0类编号页页0；<br>FIFO算法将替换最早装入页页2<br>LRU算法将替换最近未被使用页页1<br>第二次机会算法将替换载入时间早且R位为零的页页0。</p>
<h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>4、有一页式系统，其页表存放在主存中。<br>（1）如果对主存的一次存取需要1.5微秒，试问实现一次页面访问时的存取时间是多少？<br>（2）如果系统加有快表且平均命中率为85%，而页表项在快表中的查找时间忽略为0，试问此时的存取时间为多少？<br><strong>解答：</strong><br>（1）需要两次访问内存：第一次是访问页表，从而找到线性地址对应的物理地址；第二次是利用找到的物理地址来访问实际的内存页面。所以共需要3微秒。<br>（2）在快表中得到物理地址到主存找的概率是85%，需要1.5微秒；页表不在快表中在主存的概率是15%，需要3微秒，所以存取时间为1.5<em>0.85+3</em>0.15=1.725微秒。</p>
<h2 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h2><p>5、已知某系统页面长4KB，页表项4B，采用多层分页策略映射64位虚拟地址空间。若限定最高层页表占1页，问它可以采用几层分页策略。<br><strong>解答：</strong><br>页面大小为4KB，总共有2^12位信息，其中只有2^10位信息是所需要的信息，而另外4字节的内容是管理这张页表的信息。64位地址空间，事实上每页只能存放10位的容量，去掉作为页内地址的12位空间，将有2^52页表，将这些页表按每页存放10位容量计算，则需要[52/10]=6层，故必须采取6层分页策略。</p>
<h2 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h2><p>6、在一个段式存储管理系统中，其段表如表1所示。试求表2所示中的逻辑地址所对应的物理地址。<br><img src="http://i1.piimg.com/567571/6a43da1cefe2dfe7.png" alt=""><br><strong>解答：</strong><br>（1）由于第0段的内存始址为210，段长为500，故逻辑地址[0,430]是合法地址。逻辑地址[0,430] 对应的物理地址为210＋430＝640。<br>（2）由于第1段的内存始址为2350，段长为20，故逻辑地址[1,10]是合法地址。逻辑地址[1,10]对应 的物理地址为2350+10=2360。<br>（3）由于第段起始地址为100，段长为90，所给逻辑地址[2,500]非法。<br>（4）由于第3段的内存始址为1350，段长为590，故逻辑地址[3,400]是合法地址。逻辑地址[3,400] 对应的物理地址为1350＋400＝1750 。<br>（5）由于第4段的内存始址为1938，段长为95，所给逻辑地址[4,112]非法。<br>（6）由于系统中不存在第5段，所给逻辑地址[5,32]非法。</p>
<h2 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h2><p>7、请求分页管理系统中,假设某进程的页表内容如下表所示:<br><img src="http://i1.piimg.com/567571/acdd92b7d812c9d6.png" alt=""><br>页面大小为 4KB,一次内存的访问时间是 100ns,一次快表(TLB)的访问时间是10ns,处理一次缺页的平均时间 10^8 ns(已含更新 TLB 和页表的时间),进程的驻留集大小固定为 2,采用最近最少使用置换算法(LRU)和局部淘汰策略。假设（1）TLB 初始为空;（2）地址转换时先访问 TLB,若 TLB 未命中,再访问页表(忽略访问页表之后的 TLB 更新时间);（3）有效位为 0 表示页面不在内存,产生缺页中断,缺页中断处理后,返回到产生缺页中断的指令处重新执行。设有虚地址访问序列2362H、1565H、25A5H,请问:<br>(1)依次访问上述三个虚地址,各需多少时间?给出计算过程。<br>(2)基于上述访问序列,虚地址 1565H 的物理地址是多少?请说明理由。<br><strong>解答：</strong><br>（1）根据页式管理工作原理，应先考虑页面大小，以便将页号和页内位移分解出来。页面大小为4KB，即212，则得到页内位移占虚地址12位，页号占剩余高位。可得三个虚地址的页号P如下：<br>2362H: P=2,访问快表10ns，因初始为空，访问页表100ns得到页框号，合成物理地址后访问主存100ns，共计10ns+100ns+100ns=210ns。<br>1565H：P=1，访问快表10ns，落空，访问页表100ns，落空，进行缺页中断处理108ns，合成物理地址后访问主存100ns，共计10ns+100ns+108ns+100ns≈108ns。<br>25A5H：P=2，访问快表，因第一次访问已将该页号放入块表，因此花费10ns便可合成物理地址，访主存100ns，共计10ns+100ns=110ns。</p>
<p>（2）当访问虚地址1565H时，产生缺页中断，合法驻留集为2，必须从页表中淘汰一个页面，根据题目的置换算法，应淘汰0号页面，因此1565H的对应页框号为101H。由此可得1565H物理地址为101565H。</p>
<h2 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h2><p>8、设某计算机的逻辑地址空间和物理地址空间均为 64KB,按字节编址。若某进程最多需要 6 页(Page)数据存储空间,页的大小为 1KB,操作系统采用固定分配局部置换策略为此进程分配 4 个页框(Page Frame)。在时刻 260 前的该进程访问情况如下表所示(访问位即使用位)。<br><img src="http://p1.bpimg.com/567571/d731e808a3e170e1.png" alt=""><br>当该进程执行到时刻 260 时,要访问逻辑地址为 17CAH 的数据。请回答下列问题:<br>(1) 该逻辑地址对应的页号是多少?<br>(2) 若采用先进先出(FIFO)置换算法,该逻辑地址对应的物理地址是多少?要求给出计算过程。<br>(3) 若采用时钟(CLOCK)置换算法,该逻辑地址对应的物理地址是多少?要求给出计算过程 (设搜索下一页的指针沿顺时针方向移动,且当前指向 2 号页框,示意图如下) 。<br><img src="http://p1.bpimg.com/567571/b36ab669b5b5ff04.png" alt=""><br><strong>解答：</strong><br>（1）17CAH=(0001 0111 1100 1010)2。页大小为1K，所以页内偏移地址为10位，于是前6位是页号，所以得到页号为：5。</p>
<p>（2）若采用FIFO算法，则被置换的页面所在页框为7，所以对应的物理地址为(0001 1111 1100 1010)2=1FCAH。</p>
<p>（3）若采用时钟算法，第一次循环时访问位都置为0，又当前指针指向2号页框，故第二次循环将置换2号页框对应的页，所以对应的物理地址为(0000 1011 1100 1010)2=0BCAH。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（十一）：ex02.process作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-11/</url>
      <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>1、有三个批处理作业，第一个作业10:00到达，需要执行2小时；第二个作业在10:10到达，需要执行1小时；第三个作业在10:25 到达，需要执行25 分钟。分别采用先来先服务，短作业优先和最高响应比优先三种调度算法，各自的平均周转时间是多少？<a id="more"></a><br><strong>解答：</strong><br>（1）先来先服务<br><img src="http://i1.piimg.com/567571/0cfb722b437eb77a.png" alt=""><br>平均周转时间为：(120+175+180)/3 = 156.7分钟</p>
<p>（2）短作业优先<br><img src="http://p1.bqimg.com/567571/f14bccc912bd8e48.png" alt=""><br>平均周转时间为：(120+195+120)/3 = 145分钟</p>
<p>（3）最高响应比优先<br><img src="http://i1.piimg.com/567571/ac35b7ae9eed8d05.png" alt=""><br>平均周转时间为：(120+195+120)/3 = 145分钟</p>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>2、在一单道批处理系统中，一组作业的提交时刻和运行时间如下表所示。试计算一下三种作业调度算法的平均周转时间T和平均带权周转时间W。<br>（1）先来先服务； （2）短作业优先； （3）高响应比优先<br><img src="http://p1.bpimg.com/567571/ad60973315ff7457.png" alt=""><br><strong>解答：</strong><br>（1）先来先服务：运行顺序为1,2,3,4<br><img src="http://p1.bqimg.com/567571/e823e066952a06a0.png" alt=""><br>平均周转时间：<br>T = ((9.0-8.0) + (9.5-8.5) + (9.7-9.0) + (9.8-9.1))/4 = 0.85<br>平均带权周转时间：<br>W = ((9.0-8.0)/1.0 + (9.5-8.5)/0.5 + (9.7-9.0)/0.2 + (9.8-9.1)/0.1)/4 = 3.375</p>
<p>（2）短作业优先：运行顺序为1,3,4,2<br><img src="http://i1.piimg.com/567571/ecdb2a21da3d2fdb.png" alt=""><br>平均周转时间：<br>T = ((9.0-8.0) + (9.8-8.5) + (9.2-9.0) + (9.3-9.1))/4 = 0.675<br>平均带权周转时间：<br>W = ((9.0-8.0)/1.0 + (9.8-8.5)/0.5 + (9.2-9.0)/0.2 + (9.3-9.1)/0.1)/4 = 1.65</p>
<p>（3）高响应比优先：运行顺序为1,2,4,3<br><img src="http://p1.bqimg.com/567571/d3b1224ddf613499.png" alt=""><br>平均周转时间：<br>T = ((9.0-8.0) + (9.5-8.5) + (9.8-9.0) + (9.6-9.1))/4 = 0.825<br>平均带权周转时间：<br>W = ((9.0-8.0)/1.0 + (9.5-8.5)/0.5 + (9.8-9.0)/0.2 + (9.6-9.1)/0.1)/4 = 3</p>
<h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>3、设系统中有3种类型的资源（A,B,C）和5个进程（P1,P2,P3,P4,P5），A资源的数量为17，B资源的数量为5，C资源的数量为20。在T0时刻系统状态表如下表所示。<br><img src="http://p1.bqimg.com/567571/cbee1a0f06535042.png" alt=""><br>系统采用银行家算法试试死锁避免策略。<br>（1）T0 时刻是否为安全状态？若是，请给出安全序列。<br>（2）在 T0 时刻若进程 P2 请求资源（0,3,4），是否能实施资源分配？为什么？<br>（3）在（2）的基础上，若进程P4请求资源（2,0,1），是否能实施资源分配？为什么？<br>（4）在（3）的基础上，若进程P1请求资源（0,2,0），是否能实施资源分配？为什么？<br><strong>解答：</strong><br>（1）是安全状态。安全序列为P4、P5、P3、P2、P1。<br>（2）不能，因为A、B、C的资源剩余量为（2,3,3），其中C资源不能满足需求。P2会阻塞。<br>（3）能，若分配给P4，还存在安全序列P4、P5、P3、P2、P1。<br>（4）不能，如果分配给P1，剩余（0,1,2）资源不能满足任一进程，将成为死锁。</p>
<h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>4、某系统有R1,R2,R3共3类资源，在T0时刻P1,P2,P3和P4这4个进程对资源的占用和需求情况见下表，此刻系统可用资源向量为（2,1,2）。<br><img src="http://p1.bpimg.com/567571/5578ad519070c176.png" alt=""><br>问题:<br>（1）将系统中各种资源总量和此刻各进程对各资源的需求数目用向量或矩阵表示出来。<br>（2）如果此时P1,P2均发出资源请求向量Request(1,0,1),为了保持系统的安全性应该如何分配资源？说明你所采用策略的原因。<br>（3）如果（2）中两个请求立刻得到满足后，系统此刻是否处于死锁状态？<br><strong>解答：</strong><br><img src="http://i1.piimg.com/567571/1106b2c26c6073f8.png" alt=""></p>
<p>（2）应该分配给P2。因为如果分配给P1，则系统剩余（1,1,1）讲不能满足任意一个进程，为不安全状态，而分配给P2为安全状态，存在安全序列为P2、P1、P3、P4</p>
<p>（3）是。因为任何进程的需求都不能得到满足，也不能结束释放资源。</p>
<h2 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h2><p>5、设有3个进程P、Q、R，它们共享10个同类资源，P、Q、R进程的资源最大需求量依次为4、7和8。现假定它们对资源的请示序列如下表所示：<br><img src="http://p1.bpimg.com/567571/47736185d420d365.png" alt=""><br>为了避免死锁，系统分配资源时采用银行家算法。如果申请资源得不到满足，进程就转入阻塞态。根据上述信息，试描述各步骤结束时，申请资源的进程是得到满足，还是转入阻塞状态，为什么？（起始状态：各进程均不拥有资源，无进程处于阻塞态）<br><strong>解答：</strong><br>（1）满足P进程申请。分配后为安全状态。<br>（2）满足Q进程申请。分配后为安全状态，存在安全序列P,Q,R。<br>（3）满足R进程申请。分配后为安全状态，存在安全序列P,Q,R。<br>（4）阻塞Q进程，若分配给Q资源，则剩余资源不能满足任意一进程完成任务，会出现死锁。<br>（5）阻塞R进程，理由同上。<br>（6）满足P进程申请。分配后为安全状态，P可以完成任务，释放资源，存在安全序列Q,R。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（十）：ex01.pv作业]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-10/</url>
      <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>1、有一个仓库，可以存放 A 和 B 两种产品，仓库的存储空间足够大，但要求：<br>（1）一次只能存入一种产品（A 或 B）；<br>（2）-N &lt; (A 产品数量 - B 产品数量) &lt; M。<br>其中， N 和 M 是正整数。试用“存放 A”和“存放 B”以及 P、 V 操作描述产品 A 与产品 B 的入库过程。<a id="more"></a><br><strong>解答：</strong><br>由题中的表达式可得：<br>B产品数量 - A产品数量 &lt; N<br>A产品数量 - B产品数量 &lt; M。<br>则此题意为：<br>（1）若只放人A产品，而不放入B产品，则A产品最多可放M-1次便被阻塞，即A进程每操作一次就应当将计数器减1（计数器初值为M-1），当计数器值为0时，进程A被阻塞；每当放入一个B产品，则可令A产品的计数器增加1，表明A产品可以多一次放入产品的机会；<br>（2）同理，若只放人B产品，而不放入A产品，则B产品最多可放N-1次便被阻塞，即A进程每操作一次就应当将计数器减1（计数器初值为N-1）。当计数器值为0时，进程B被阻塞；每当放人一个A产品，则可令B产品的计数器增加1，表明B产品可以多一次放入产品的机会。<br>由此可见，该问题是一个同步控制问题。实现其入库过程如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;  </div><div class="line">semaphore mutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line">semaphore a = M - <span class="number">1</span>；  <span class="comment">//存放A的资源信号量，初值为M-1</span></div><div class="line">semaphore b = N - <span class="number">1</span>;   <span class="comment">//存放B的资源信号量，初值为N-1</span></div><div class="line"></div><div class="line">PA:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;a);</div><div class="line">    P(&amp;mutex);</div><div class="line">    A 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PB:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;b);</div><div class="line">    P(&amp;mutex);</div><div class="line">    B 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>2、桌子上有一只盘子，最多可容纳两个水果，每次只能放入或取出一个水果。爸爸专向盘子放苹果（ apple），妈妈专向盘子中放桔子（ orange）；两个儿子专等吃盘子中的桔子，两个女儿专等吃盘子中的苹果。请用 P、 V 操作来实现爸爸、妈妈、儿子、女儿之间的<br>同步与互斥关系。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mutex = <span class="number">1</span>;    <span class="comment">//互斥信号量, 其初值为1</span></div><div class="line">semaphore empty = <span class="number">2</span>;    <span class="comment">//记录允许向盘子中放入水果的个数，初值为2</span></div><div class="line">semaphore orange = <span class="number">0</span>;   <span class="comment">//盘子中已放入的苹果的个数，初值为0</span></div><div class="line">semaphore apple = <span class="number">0</span>;    <span class="comment">//盘子中已放入的桔子的个数，初值为0</span></div><div class="line"></div><div class="line">main() </div><div class="line">&#123;</div><div class="line">    Cobegin</div><div class="line">    &#123;</div><div class="line">        father      <span class="comment">//父亲进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                P(empty);     <span class="comment">//减少盘中可放入的水果数</span></div><div class="line">                P(mutex);     <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                向盘中放苹果;</div><div class="line">                V(mutex);     <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(apple);     <span class="comment">//递增盘中的苹果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mother     <span class="comment">//母亲进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(empty);     <span class="comment">//减少盘中可放入的水果数</span></div><div class="line">                P(mutex);     <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                向盘中放桔子;</div><div class="line">                V(mutex);     <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(orange);    <span class="comment">//递增盘中的桔子数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        daughteri（i = <span class="number">1</span>, <span class="number">2</span>）    <span class="comment">//两女儿进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(apple);       <span class="comment">//减少盘中苹果数</span></div><div class="line">                P(mutex);      <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                取盘中苹果;</div><div class="line">                V(mutex);      <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(empty);      <span class="comment">//递增盘中可放入的水果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sonj（j = <span class="number">1</span>, <span class="number">2</span>）         <span class="comment">//两儿子进程</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">            &#123;</div><div class="line">                P(orange);      <span class="comment">//减少盘中桔子数</span></div><div class="line">                P(mutex);      <span class="comment">//申请向盘中取、放水果</span></div><div class="line">                取盘中桔子;</div><div class="line">                V(mutex);      <span class="comment">//允许向盘中取、放水果</span></div><div class="line">                V(empty);      <span class="comment">//递增盘中可放入的水果数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Coend</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>3、有一个理发师，一把理发椅和 N 把供等候理发的顾客坐的椅子。如果没有顾客，则理发师便在理发师椅子上睡觉；当一个顾客到来时，必须唤醒理发师进行理发；如果理发师正在理发时又有顾客来到，则如果有空椅子可坐，他就坐下来等，如果没有空椅子，他就离开。为理发师和顾客各编一段程序（伪代码）描述他们的行为，要求不能带有竞争条件。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mutex = <span class="number">1</span>;     <span class="comment">//互斥信号量，初值为1.</span></div><div class="line">semaphore wait = <span class="number">0</span>;      <span class="comment">//等待服务的顾客数</span></div><div class="line">semaphore barbers = <span class="number">0</span>;   <span class="comment">//等待顾客的理发师数</span></div><div class="line"><span class="keyword">int</span> custNum = <span class="number">0</span>;         <span class="comment">//等待的顾客(还没理发的)</span></div><div class="line"></div><div class="line">Costumer()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mutex);              <span class="comment">//申请理发</span></div><div class="line">        <span class="keyword">if</span> (custNum &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (custNum &lt; N)    <span class="comment">//若等待人数小于N</span></div><div class="line">            &#123;</div><div class="line">                V(mutex);      <span class="comment">//释放进程等待</span></div><div class="line">                CustNum++;   <span class="comment">//增加等待人数</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>               <span class="comment">//若等待人数超过N</span></div><div class="line">            &#123;</div><div class="line">                V(mutex);      <span class="comment">//释放进程等待</span></div><div class="line">                离开;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>                   <span class="comment">//若目前无人等待</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            V(barbers);         <span class="comment">//如果必要的话，唤醒理发师</span></div><div class="line">            理发;</div><div class="line">            离开;</div><div class="line">            P(mutex);          <span class="comment">//要求进程等待</span></div><div class="line">            custNum--;        <span class="comment">//顾客人数减1</span></div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            V(wait);            <span class="comment">//等待人数减1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Barber() </div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mutex);              <span class="comment">//要求进程等待</span></div><div class="line">        <span class="keyword">if</span> (custNum == <span class="number">0</span>)       <span class="comment">//目前无顾客</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            P(barbers);         <span class="comment">//理发师睡觉　　</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            V(mutex);          <span class="comment">//释放进程等待</span></div><div class="line">            理发;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>4、吸烟者问题。三个吸烟者在一间房间内，还有一个香烟供应者。为了制造并抽掉香烟，每个吸烟者需要三样东西：烟草、纸和火柴。供应者有丰富的货物提供。三个吸烟者中，第一个有自己的烟草，第二个有自己的纸，第三个有自己的火柴。供应者将两样东西放在桌子上，允许一个吸烟者进行对健康不利的吸烟。当吸烟者完成吸烟后唤醒供应者，供应者再放两样东西（随机地）在桌面上，然后唤醒另一个吸烟者。试为吸烟者和供应者编写程序解决问题。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore S = <span class="number">1</span>;       <span class="comment">//供应者</span></div><div class="line">semaphore S1 = <span class="number">0</span>, S2 = <span class="number">0</span>, S3 = <span class="number">0</span>;    <span class="comment">//三个吸烟者</span></div><div class="line"><span class="keyword">bool</span> flag1 = <span class="literal">true</span>, flag2 = <span class="literal">true</span>, flag3 = <span class="literal">true</span>;  <span class="comment">//三种吸烟原料</span></div><div class="line"></div><div class="line">Apply()           <span class="comment">//供应者</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S);</div><div class="line">        取两样香烟原料放桌上,由flagi标记;</div><div class="line">        <span class="keyword">if</span> (flag2 &amp;&amp; flag3)        <span class="comment">//供纸和火柴</span></div><div class="line">            V(S1);              <span class="comment">//唤醒吸烟者一</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag1 &amp;&amp; flag3)    <span class="comment">//供烟草和火柴</span></div><div class="line">            V(S2);              <span class="comment">//唤醒吸烟者二</span></div><div class="line">        <span class="keyword">else</span>                    <span class="comment">//供烟草和纸</span></div><div class="line">            V(S3);              <span class="comment">//唤醒吸烟者三</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker1()           <span class="comment">//吸烟者一</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S1);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker2()           <span class="comment">//吸烟者二</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S2);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Smoker3()           <span class="comment">//吸烟者三</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S3);</div><div class="line">        取原料;</div><div class="line">        做香烟;</div><div class="line">        V(S);        <span class="comment">//唤醒供应者</span></div><div class="line">        吸香烟;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h2><p>5、面包师问题。面包师有很多面包和蛋糕，由 n 个销售人员销售。每个顾客进店后先取一个号，并且等着叫号。当一个销售人员空闲下来，就叫下一个号。请分别编写销售人员和顾客进程的程序。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore buyer = <span class="number">0</span>;           <span class="comment">//顾客人数</span></div><div class="line">semaphore seller = n;          <span class="comment">//销售人员数</span></div><div class="line">semaphore mutex_s = <span class="number">1</span>;         <span class="comment">//用于销售人员的互斥信号量</span></div><div class="line">semaphore mutex_b = <span class="number">1</span>;         <span class="comment">//用于顾客的互斥信号量</span></div><div class="line"><span class="keyword">int</span> count_s = <span class="number">0</span>;               <span class="comment">//记录取号的值</span></div><div class="line"><span class="keyword">int</span> count_b = <span class="number">0</span>;               <span class="comment">//记录叫号的值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buy</span><span class="params">()</span>                     <span class="comment">//顾客进程</span></span></div><div class="line">&#123;</div><div class="line">    进店;</div><div class="line">    P(mutex_b);        <span class="comment">//取号</span></div><div class="line">    count_b++;</div><div class="line">    V(mutex_b);</div><div class="line">    V(buyer);</div><div class="line">    P(seller);         <span class="comment">//等待叫号</span></div><div class="line">    买面包;</div><div class="line">    离开;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sell</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </div><div class="line">    &#123;</div><div class="line">        P(buyer);</div><div class="line">        P(mutex_s);     <span class="comment">//叫号</span></div><div class="line">        count_s++;</div><div class="line">        叫编号为count_s的顾客;</div><div class="line">        V(mutex_s);</div><div class="line">        V(seller);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h2><p>6、桌上有一空盘，运行存放一只水果，爸爸可向盘中放苹果，也可放桔子，儿子专等吃盘中的桔子，女儿专等吃盘中的苹果。规定当盘中空时一次只能放一个水果供吃者取用，用P、V原语实现爸爸儿子和女儿3个并发进程的同步。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore S = <span class="number">1</span>;      <span class="comment">//S 表示盘子是否为空；</span></div><div class="line">semaphore Sa = <span class="number">0</span>;     <span class="comment">//Sa 表示盘中是否有苹果；</span></div><div class="line">semaphore Sb = <span class="number">0</span>;     <span class="comment">//Sb 表示盘中是否有桔子；</span></div><div class="line"></div><div class="line">Father()              <span class="comment">//父亲进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(S);</div><div class="line">        将水果放入盘中;</div><div class="line">        <span class="keyword">if</span> (放入的是桔子)</div><div class="line">            V(Sb);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            V(Sa);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Son()                  <span class="comment">//儿子进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(Sb);</div><div class="line">        从盘中取出桔子;</div><div class="line">        V(S);</div><div class="line">        吃桔子;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Daughter()             <span class="comment">//女儿进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(Sa);</div><div class="line">        从盘中取出苹果;</div><div class="line">        V(S);</div><div class="line">        吃苹果;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h2><p>7、写者优先的读者－－写者问题。读者-写者问题为数据库访问建立了一个模型。例如,一个系统,其中有许多竞争的进程试图读写其中的数据,多个进程同时读是可以接受的,但如果一个进程正在更新数据库,则所有的其他进程都不能访问数据库，即使读操作也不行。写者优先是指当一个写者到达时，将阻止其后面的读者进入数据库，直到其离开为止。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</div><div class="line">semaphore mut1 = <span class="number">1</span>, mut2 = <span class="number">1</span>, wmutex = <span class="number">1</span>, fmutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line"><span class="keyword">int</span> rcount = <span class="number">0</span>, wcount = <span class="number">0</span>;     <span class="comment">//读写者人数</span></div><div class="line"></div><div class="line">Writer()                        <span class="comment">//写者进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mut1);</div><div class="line">        wcount = wcount + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (wcount == <span class="number">1</span>)</div><div class="line">            P(fmutex);          <span class="comment">//如有读者，则写者阻塞在此处</span></div><div class="line">        V(mut1);</div><div class="line">        P(wmutex);</div><div class="line">        写;</div><div class="line">        V(wmutex);</div><div class="line">        P(mut1);</div><div class="line">        wcount = wcount - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (wcount == <span class="number">0</span>)</div><div class="line">            V(fmutex);</div><div class="line">        V(mut1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Reader()                        <span class="comment">//读者进程</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(mut2);</div><div class="line">        rcount = rcount + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (rcount == <span class="number">1</span>)</div><div class="line">            P(fmutex);</div><div class="line">        V(mut2);</div><div class="line">        读;</div><div class="line">        P(mut2);</div><div class="line">        rcount = rcount - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (rcount == <span class="number">0</span>)</div><div class="line">            V(fmutex);</div><div class="line">        V(mut2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h2><p>8、在天津大学与南开大学之间有一条弯曲的小路，这条路上每次每个方向上只允许一辆自行车通过。但其中有一个小的安全岛 M，同时允许两辆自行车停留，可供两辆自行车已从两端进入小路的情况下错车使用。如图所示。<br><img src="http://p1.bpimg.com/567571/0fd906b50c1f4ed1.png" alt=""><br>下面的算法可以使来往的自行车均可顺利通过。其中使用了4个信号量，T代表天大路口资源，S代表南开路口资源，L代表从天大到安全岛一段路的资源，K 代表从南开到安全岛一段路的资源。程序如下，请在空白位置处填写适当的 PV 操作语句，每处空白可能包含若干个 PV 操作语句。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">begin</div><div class="line">    t:=<span class="number">1</span>;s:=<span class="number">1</span>;l:=<span class="number">1</span>;k:=<span class="number">1</span>;</div><div class="line">    cobegin</div><div class="line">    从天大到南开的进程</div><div class="line">        begin</div><div class="line">            ______(<span class="number">1</span>)______</div><div class="line">            通过 L 路段;</div><div class="line">            进入安全岛 M；</div><div class="line">            ______(<span class="number">2</span>)______</div><div class="line">            通过 K 路段</div><div class="line">            ______(<span class="number">3</span>)______</div><div class="line">        end</div><div class="line">    从南开到天大的进程</div><div class="line">        begin</div><div class="line">            略，与“从天大到南开的进程”相反。</div><div class="line">        end</div><div class="line">    coend</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p><strong>解答：</strong><br>(1) P(t); P(l);<br>(2) V(l); P(k);<br>(3) V(k); V(t);</p>
<h2 id="题目9"><a href="#题目9" class="headerlink" title="题目9"></a>题目9</h2><p>9、三个进程 P1、P2、P3 互斥使用一个包含N(N&gt;0)个单元的缓冲区。P1每次用 produce()生成一个正整数并用put()送入缓冲区某一空单元中;P2每次用 getodd()从该缓冲区中取出一个奇数并用countodd()统计奇数个数;P3每次用 geteven()从该缓冲区中取出一个偶数并用counteven()统计偶数个数。请用信号量机制实现这三个进程的同步与互斥活动,并说明所定义信号量的含义。要求用伪代码描述。<br><strong>解答：</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">P1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        X = produce();      <span class="comment">//生成一个数</span></div><div class="line">        P(empty);           <span class="comment">//是否有空单元格</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        Put();</div><div class="line">        <span class="keyword">if</span> (X % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">            V(s2);          <span class="comment">//如果是偶数，向P3发出信号</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            V(s1);          <span class="comment">//如果是奇数，向P2发出信号</span></div><div class="line">        V(mutex);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">P2()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(s1);              <span class="comment">//收到P1发送来的信号，已产生奇数</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        getodd();</div><div class="line">        countodd():=countodd() + <span class="number">1</span>;</div><div class="line">        V(mutex);</div><div class="line">        V(empty);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">P3()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        P(s2);              <span class="comment">//收到P1发送来的信号，已产生偶数</span></div><div class="line">        P(mutex);           <span class="comment">//进入临界区</span></div><div class="line">        geteven();</div><div class="line">        counteven() := counteven() + <span class="number">1</span>;</div><div class="line">        V(mutex);</div><div class="line">        V(empty);           <span class="comment">//离开临界区，释放互斥信号量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（九）：Barriers]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-9/</url>
      <content type="html"><![CDATA[<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>使用环境变量（condition variables）来实现barrier，以在多线程的并行计算中达到同步的目的。其中barrier相当于一堵“墙”，先到达barrier的线程需要等待后到达barrier的线程。对于源代码中的一组线程来说，只有其它线程都到达了这堵“墙”，系统才会允许其中的线程继续运行。可以说，这堵“墙”起到了拦截的作用，以便达到让所有的线程实现同步运行的目的。<a id="more"></a></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>下载barrier.c源文件，并在Linux环境下进行编译运行，出现“Assertion failed”错误：<br><img src="http://p1.bqimg.com/567571/2fcc9be79e34e946.png" alt=""></p>
<p>修改barrier.c中的barrier()函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">barrier</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//对临界区进行加锁，barrier_mutex是开头定义的信号量</span></div><div class="line">  pthread_mutex_lock(&amp;bstate.barrier_mutex);</div><div class="line">  <span class="comment">//将到达barrier的线程数加1       </span></div><div class="line">  bstate.nthread++; </div><div class="line">  <span class="comment">//当所有的线程都到达barrier时</span></div><div class="line">  <span class="keyword">if</span> (bstate.nthread == nthread) &#123;</div><div class="line">      <span class="comment">//针对barrier_cond这个环境变量广播，表示激活所有线程以继续执行</span></div><div class="line">      pthread_cond_broadcast(&amp;bstate.barrier_cond);</div><div class="line">      bstate.nthread = <span class="number">0</span>;</div><div class="line">      bstate.round++;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//否则进入sleep状态，并释放互斥锁</span></div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">      pthread_cond_wait(&amp;bstate.barrier_cond, &amp;bstate.barrier_mutex);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  pthread_mutex_unlock(&amp;bstate.barrier_mutex);</div><div class="line"></div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再次运行barrier.c，运行成功：<br><img src="http://i1.piimg.com/567571/42077968a9fa91eb.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（八）：bigger files for xv6]]></title>
      <url>http://www.dengfuping.com/2017/01/24/operating-system-homework-8/</url>
      <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>修改Makefile文件：将CPUS的值设为1，,并添加如下语句。目的是加快xv6创建大文件时的qemu的运行速度：<a id="more"></a><br><img src="http://p1.bqimg.com/567571/ef39f193fcc39b12.png" alt=""></p>
<p>修改param.h文件，将文件系统的最大数据块数设置为20000：<br><img src="http://p1.bpimg.com/567571/dce5d3e509538fe3.png" alt=""></p>
<p>下载big.c文件放入xv6的目录下，并在Makefile文件中的UPROGS列表中增加对big命令的引用：<br><img src="http://i1.piimg.com/567571/f06e9fbf7f72ded6.png" alt=""></p>
<p>启动xv6，输入big命令，显示“wrote 140 sectors”，说明所有的准备工作已完成：<br><img src="http://i1.piimg.com/567571/c7be50364293978d.png" alt=""></p>
<p>修改fs.c中的bmap()函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> uint</span></div><div class="line"><span class="title">bmap</span><span class="params">(<span class="keyword">struct</span> inode *ip, uint bn)</span></div><div class="line">&#123;</div><div class="line">  uint addr, *a, *indirect, *double_indirect,indirect_idx, double_indirect_idx;</div><div class="line">  <span class="keyword">struct</span> buf *bp, *bp2;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(bn &lt; NDIRECT)&#123;</div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[bn] = addr =balloc(ip-&gt;dev);</div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line">  bn -= NDIRECT;</div><div class="line">  <span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</div><div class="line">    <span class="comment">// Load indirect block, allocating ifnecessary.</span></div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[NDIRECT] = addr =balloc(ip-&gt;dev);</div><div class="line"></div><div class="line">    bp = bread(ip-&gt;dev, addr);</div><div class="line">    a = (uint*)bp-&gt;data;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</div><div class="line">      a[bn] = addr = balloc(ip-&gt;dev);</div><div class="line">      log_write(bp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    brelse(bp);</div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  bn -= NINDIRECT;</div><div class="line">  <span class="keyword">if</span> (bn &lt; NINDIRECT*NINDIRECT) &#123;</div><div class="line">    <span class="comment">// Load first indirect block, allocating ifnecessary.</span></div><div class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT + <span class="number">1</span>]) == <span class="number">0</span>)</div><div class="line">      ip-&gt;addrs[NDIRECT + <span class="number">1</span>] = addr =balloc(ip-&gt;dev);</div><div class="line">    bp = bread(ip-&gt;dev, addr);</div><div class="line"></div><div class="line">    indirect = (uint *) bp-&gt;data;</div><div class="line">    indirect_idx = bn / NINDIRECT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((addr = indirect[indirect_idx]) == <span class="number">0</span>) &#123;</div><div class="line">      addr = indirect[indirect_idx] =balloc(ip-&gt;dev);</div><div class="line">      log_write(bp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bp2 = bread(ip-&gt;dev, addr);</div><div class="line">    double_indirect = (uint *) bp2-&gt;data;</div><div class="line">    double_indirect_idx = bn % NINDIRECT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((addr = double_indirect[double_indirect_idx]) == <span class="number">0</span>) &#123;</div><div class="line">      addr =double_indirect[double_indirect_idx] = balloc(ip-&gt;dev);</div><div class="line">      log_write(bp2);</div><div class="line">    &#125;</div><div class="line">    brelse(bp2);</div><div class="line">    brelse(bp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> addr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  panic(<span class="string">"bmap: out of range"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打开fs.h文件，将NDIRECT的值改为11，对应的架构数据块地址的索引由加1变为加2，最后将MAXFILE修改成如下值：<br><img src="http://p1.bqimg.com/567571/55f507096f88ec58.png" alt=""></p>
<p>保存后重新启动xv6，输入big命令，得到如下运行结果说明实验成功：<br><img src="http://p1.bqimg.com/567571/ca4dc9f8bd60a027.png" alt=""></p>
<p>其中，16523 = 128*128（doubly-indirectblocks） + 11(singly-indirect blocks) + 128(directblocks)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（七）：Multithreaded Programming (Threads and Locking)]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-7/</url>
      <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>编译ph.c源文件，并分别以单线程和双线程运行，结果如下：<br><img src="http://i1.piimg.com/567571/08d404e16e307aca.png" alt=""><a id="more"></a></p>
<p>发现双线程运行过程中会出现keys missing错误，并且运行时间也远大于单线程的运行时间。出现此问题的原因是多线程同时访问同一块内存并进行insert操作时未加锁，会发生冲突，因而会导致丢失keys。</p>
<p>在原有ph.c代码的基础上做如下改动：<br>（1）声明锁变量数组：<br><img src="http://p1.bpimg.com/567571/cc58c2387ef5945a.png" alt=""></p>
<p>（2）在main()函数中初始化锁变量数组：<br><img src="http://p1.bpimg.com/567571/b6b0a3971fdd9d95.png" alt=""></p>
<p>（3）当进行insert操作是加锁保护，修改put()函数如下：<br><img src="http://p1.bpimg.com/567571/cd5964045fc2623b.png" alt=""></p>
<p>再次编译ph.c，并分别以单线程和双线程运行，结果如下：<br><img src="http://p1.bpimg.com/567571/9963fc17cae7d38f.png" alt=""></p>
<p>发现双线程与单线程速度相仿，且没有出现keys missing，说明运行结果正确。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（六）：xv6 lazy page allocation]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-6/</url>
      <content type="html"><![CDATA[<h2 id="Eliminate-allocation-from-sbrk"><a href="#Eliminate-allocation-from-sbrk" class="headerlink" title="Eliminate allocation from sbrk()"></a>Eliminate allocation from sbrk()</h2><h3 id="修改sys-sbrk-函数"><a href="#修改sys-sbrk-函数" class="headerlink" title="修改sys_sbrk()函数"></a>修改sys_sbrk()函数</h3><p>对系统调用sbrk的实际实现sys_sbrk进行修改，只将进程的内存空间大小增加n而不进行实际的分配，即把调用growproc()函数的部分注释掉并增加内存大小。修改后的sys_sbrk()函数如下：<br><a id="more"></a><br><img src="http://p1.bpimg.com/567571/cab4cebf8cb60fdd.png" alt=""></p>
<p>其中，返回的地址是新分配的地址空间的开头，在此处就是原来地址空间的末尾。我们增加了proc-&gt;sz，但实际却并未增加进程大小。</p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>启动xv6后输入echo hi命令，得到如下错误提示：<br><img src="http://p1.bpimg.com/567571/3dfb755048cfa8c9.png" alt=""></p>
<p>原因是当程序试图操作该内存区域的时候，发现该内存区域不是当前进程所有的，因为在sys_sbrk中根本没分配。</p>
<h2 id="Lazy-allocation"><a href="#Lazy-allocation" class="headerlink" title="Lazy allocation"></a>Lazy allocation</h2><h3 id="去除static关键字"><a href="#去除static关键字" class="headerlink" title="去除static关键字"></a>去除static关键字</h3><p>由于我们需要在trap.c中调用vm.c中的int mappages()函数，所以要去除原本的static关键字。<br><img src="http://i1.piimg.com/567571/82ceee72c19f689b.png" alt=""></p>
<h3 id="声明int-mappages-函数"><a href="#声明int-mappages-函数" class="headerlink" title="声明int mappages()函数"></a>声明int mappages()函数</h3><p>在trap.c中在调用之前使用extern关键字声明int mappages()函数。<br><img src="http://i1.piimg.com/567571/b1c2ef193728d56d.png" alt=""></p>
<h3 id="修改trap-c中void-trap-函数"><a href="#修改trap-c中void-trap-函数" class="headerlink" title="修改trap.c中void trap()函数"></a>修改trap.c中void trap()函数</h3><p>在trap.c中的void trap(struct trapframe *tf)的defaut部分添加以下代码，放置的位置为if模块后。<br><img src="http://i1.piimg.com/567571/0624084e31be7576.png" alt=""></p>
<h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p>重新启动xv6后输入echo hi命令，输出结果如下：<br><img src="http://i1.piimg.com/567571/e81661df030b9b0d.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（五）：xv6 CPU alarm]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-5/</url>
      <content type="html"><![CDATA[<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="添加alarm系统调用"><a href="#添加alarm系统调用" class="headerlink" title="添加alarm系统调用"></a>添加alarm系统调用</h3><p>使用grep命令筛选出出现uptime字样的文件和文件中所在行号，以便仿照uptime系统调用实现alarm系统调用：<br><img src="http://i1.piimg.com/567571/b449eb3650ec4c8c.png" alt=""><br><a id="more"></a><br>在syscall.c中添加系统调用函数的外部声明，共有两处地方需要添加：<br><img src="http://p1.bqimg.com/567571/eda2df5a78f77959.png" alt=""></p>
<p><img src="http://p1.bqimg.com/567571/135d3a90b9996530.png" alt=""></p>
<p>在syscall.h中添加系统调用号：<br><img src="http://p1.bqimg.com/567571/0a6babf17226d707.png" alt=""></p>
<p>在sysproc.c中添加系统调用函数sys_alarm()的实现：<br><img src="http://p1.bqimg.com/567571/a43d46dfb8420e8d.png" alt=""></p>
<p>在user.h中添加用户态函数的定义：<br><img src="http://p1.bqimg.com/567571/5046f03de31588b6.png" alt=""></p>
<p>在usys.S中添加用户态函数的实现：<br><img src="http://p1.bqimg.com/567571/80960fe721a22aa1.png" alt=""></p>
<h3 id="创建用户程序alarmtest-c"><a href="#创建用户程序alarmtest-c" class="headerlink" title="创建用户程序alarmtest.c"></a>创建用户程序alarmtest.c</h3><p>由于我们还需要在用户空间来对内核提供的系统命令进行调用，新建用户程序alarmtest.c文件，写入以下代码：<br><img src="http://p1.bqimg.com/567571/7d42436daf478335.png" alt=""></p>
<h3 id="修改Makefile文件"><a href="#修改Makefile文件" class="headerlink" title="修改Makefile文件"></a>修改Makefile文件</h3><p>在Makefile文件UPROGS处添加_alarmtest：<br><img src="http://p1.bqimg.com/567571/4ae5aea7adfda51e.png" alt=""></p>
<h3 id="修改proc-h文件"><a href="#修改proc-h文件" class="headerlink" title="修改proc.h文件"></a>修改proc.h文件</h3><p>在proc.h文件的proc结构体中，添加以下三个属性：<br><img src="http://p1.bqimg.com/567571/3a02394c1382a3d7.png" alt=""></p>
<h3 id="修改trap-c文件"><a href="#修改trap-c文件" class="headerlink" title="修改trap.c文件"></a>修改trap.c文件</h3><p>在trap.c文件中的“case T_IRQ0 + IRQ_TIMER”位置处添加以下代码：<br><img src="http://p1.bqimg.com/567571/19c29f3ddddb7149.png" alt=""></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="http://p1.bqimg.com/567571/42e8413eb6f94c0f.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（四）：xv6 system calls]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-4/</url>
      <content type="html"><![CDATA[<h2 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>第一部分的主要任务是在进行系统调用时，打印出系统调用的名字和返回值。<br><a id="more"></a></p>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>系统调用函数syscall()在syscall.c文件中，我们只需要修改syscall()函数即可，即在syscall()函数内添加对应的printf语句。</p>
<h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">syscall</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> num;</div><div class="line"></div><div class="line">  num = proc-&gt;tf-&gt;eax;</div><div class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</div><div class="line">    proc-&gt;tf-&gt;eax = syscalls[num]();</div><div class="line">    <span class="keyword">switch</span> (num) &#123;</div><div class="line">      <span class="keyword">case</span> SYS_fork:</div><div class="line">        cprintf(<span class="string">"fork -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_exit:</div><div class="line">        cprintf(<span class="string">"exit -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_wait:</div><div class="line">        cprintf(<span class="string">"wait -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_pipe:</div><div class="line">        cprintf(<span class="string">"pipe -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_read:</div><div class="line">        cprintf(<span class="string">"read -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_kill:</div><div class="line">        cprintf(<span class="string">"kill -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_exec:</div><div class="line">        cprintf(<span class="string">"exec -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_fstat:</div><div class="line">        cprintf(<span class="string">"fstat -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_chdir:</div><div class="line">        cprintf(<span class="string">"chdir -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_dup:</div><div class="line">        cprintf(<span class="string">"dup -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_getpid:</div><div class="line">        cprintf(<span class="string">"getpid -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_sbrk:</div><div class="line">        cprintf(<span class="string">"sbrk -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_sleep:</div><div class="line">        cprintf(<span class="string">"sleep -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_uptime:</div><div class="line">        cprintf(<span class="string">"uptime -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_open:</div><div class="line">        cprintf(<span class="string">"open -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_write:</div><div class="line">        cprintf(<span class="string">"write -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_mknod:</div><div class="line">        cprintf(<span class="string">"mknod -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_unlink:</div><div class="line">        cprintf(<span class="string">"unlink -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_link:</div><div class="line">        cprintf(<span class="string">"link -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_mkdir:</div><div class="line">        cprintf(<span class="string">"mkdir -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_close:</div><div class="line">        cprintf(<span class="string">"close -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> SYS_date:</div><div class="line">        cprintf(<span class="string">"date -&gt; "</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        panic(<span class="string">"should never get here\n"</span>);</div><div class="line">    &#125;</div><div class="line">    cprintf(<span class="string">"%d\n"</span>, proc-&gt;tf-&gt;eax);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    cprintf(<span class="string">"%d %s: unknown sys call %d\n"</span>,</div><div class="line">            proc-&gt;pid, proc-&gt;name, num);</div><div class="line">    proc-&gt;tf-&gt;eax = <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://i1.piimg.com/567571/a1b83057184a1ee0.png" alt=""></p>
<h2 id="Date-system-call"><a href="#Date-system-call" class="headerlink" title="Date system call"></a>Date system call</h2><h3 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h3><p>第二部分的主要任务是想xv6系统中添加并实现一个date系统调用，用以输出当前的UTC时间。</p>
<h3 id="实验思路-1"><a href="#实验思路-1" class="headerlink" title="实验思路"></a>实验思路</h3><p>要实现date系统调用主要是添加系统调用号和添加对应的系统调用函数，具体过程可以仿照uptime系统调用的实现。</p>
<h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>使用grep命令筛选出出现uptime字样的文件和文件中所在行号，以便仿照uptime系统调用实现date系统调用：<br><img src="http://i1.piimg.com/567571/b449eb3650ec4c8c.png" alt=""></p>
<p>在syscall.c中添加系统调用函数的外部声明，共有两处地方需要添加：<br><img src="http://i1.piimg.com/567571/754313e85d8b68a3.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/977b1f2eec01c705.png" alt=""></p>
<p>在syscall.h中添加系统调用号：<br><img src="http://p1.bqimg.com/567571/e260f6e430b3a752.png" alt=""></p>
<p>在sysproc.c中添加系统调用函数sys_date()的实现：<br><img src="http://p1.bqimg.com/567571/cbf00e5837332ae7.png" alt=""></p>
<p>在user.h中添加用户态函数的定义：<br><img src="http://p1.bqimg.com/567571/5aa3aba5e841340a.png" alt=""></p>
<p>在usys.S中添加用户态函数的实现：<br><img src="http://p1.bqimg.com/567571/ff544777d4709eab.png" alt=""></p>
<p>由于我们还需要在用户空间来对内核提供的系统命令进行调用，新建用户程序date.c文件，写入以下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"types.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"user.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"date.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">struct</span> rtcdate r;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (date(&amp;r)) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"date failed\n"</span>);</div><div class="line">    <span class="built_in">exit</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// your code to print the time in any format you like...</span></div><div class="line">  <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"The current UTC time:     %d:%d:%d, %d/%d, %d\n"</span>, r.hour, r.minute, r.second, r.month, r.day, r.year);</div><div class="line">  <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"The current Beijing time: %d:%d:%d, %d/%d, %d\n"</span>, r.hour+<span class="number">8</span>, r.minute, r.second, r.month, r.day, r.year);</div><div class="line"></div><div class="line">  <span class="built_in">exit</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://p1.bqimg.com/567571/cc3c3f090edbf567.png" alt=""></p>
<p>由于北京时间与UTC时间相差8个小时，因此 <code>输出的北京时间 = UTC时间 + 8小时</code>，与实际情况相符，说明 <code>date</code> 这一系统调用添加成功。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（三）：IPC编程问题]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-3/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>有一个仓库，可以存放 A 和 B 两种产品，仓库的存储空间足够大，但要求：<br>（1）一次只能存入一种产品（A 或 B）；<br>（2）-N &lt; (A 产品数量 - B 产品数量) &lt; M。<br>其中， N 和 M 是正整数。试在POSIX系统平台上实现产品A和产品B的入库过程。<br><a id="more"></a></p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;  </div><div class="line">semaphore mutex = <span class="number">1</span>;   <span class="comment">//互斥信号量</span></div><div class="line">semaphore a = M - <span class="number">1</span>；  <span class="comment">//存放A的资源信号量，初值为M-1</span></div><div class="line">semaphore b = N - <span class="number">1</span>;   <span class="comment">//存放B的资源信号量，初值为N-1</span></div><div class="line"></div><div class="line">PA:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;a);</div><div class="line">    P(&amp;mutex);</div><div class="line">    A 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">PB:</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    P(&amp;b);</div><div class="line">    P(&amp;mutex);</div><div class="line">    B 入库；</div><div class="line">    V(&amp;mutex);</div><div class="line">    V(&amp;a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="init-c"><a href="#init-c" class="headerlink" title="init.c"></a>init.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,producer_pid,consumer_pid,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;    </div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line"></div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">    sem_union.val = <span class="number">1</span>;   <span class="comment">//将互斥信号量初始化为1</span></div><div class="line">    <span class="keyword">if</span> (semctl(mutex, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    sem_union.val = <span class="number">10</span>;   <span class="comment">//将产品B的资源信号量初始化为10</span></div><div class="line">    <span class="keyword">if</span> (semctl(b, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sem_union.val = <span class="number">10</span>;  <span class="comment">//将产品A的资源信号量初始化为10</span></div><div class="line">    <span class="keyword">if</span> (semctl(a, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to set semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;BUFFER_SIZE;i++)</div><div class="line">	&#123;</div><div class="line">		shared_stuff-&gt;buffer[i] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	shared_stuff -&gt; lo = <span class="number">0</span>;</div><div class="line">	shared_stuff -&gt; hi = <span class="number">0</span>;</div><div class="line">	shared_stuff -&gt; cur = <span class="number">0</span>;</div><div class="line"></div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="proa-c"><a href="#proa-c" class="headerlink" title="proa.c"></a>proa.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;</div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line">	<span class="comment">//产品A的入库过程</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</div><div class="line">	&#123;</div><div class="line">		item = ++(shared_stuff-&gt;cur);</div><div class="line">		sleep(<span class="number">1</span>);      <span class="comment">//等待1s</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Putting product A of No.%d\n"</span>, item);  <span class="comment">//输出正在入库的产品A的序号</span></div><div class="line">		sem_p(a);      <span class="comment">//将产品A的资源信号量减1</span></div><div class="line">		sem_p(mutex);  <span class="comment">//获取互斥锁</span></div><div class="line">		(shared_stuff-&gt;buffer)[(shared_stuff-&gt;hi)] = item;</div><div class="line">		(shared_stuff-&gt;hi) = ((shared_stuff-&gt;hi)+<span class="number">1</span>) % BUFFER_SIZE;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The number of A in resposity is %d\n"</span>, item);  <span class="comment">//输出仓库中产品A的数量</span></div><div class="line">		sem_v(mutex);  <span class="comment">//释放互斥锁</span></div><div class="line">		sem_v(b);     <span class="comment">//将产品B的资源信号量加1</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (shmdt(shared_memory) == <span class="number">-1</span>) &#123;</div><div class="line">       	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmdt failed\n"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Finish!\n"</span>);</div><div class="line">	getchar();</div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="prob-c"><a href="#prob-c" class="headerlink" title="prob.c"></a>prob.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myipc.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,item,shmid;</div><div class="line">    <span class="comment">//mutex为互斥信号量，a为存放A的资源信号量，b为存放B的资源信号量</span></div><div class="line">	semaphore mutex, a, b;</div><div class="line">    <span class="keyword">union</span> semun sem_union;</div><div class="line">	<span class="keyword">void</span> *shared_memory = (<span class="keyword">void</span> *)<span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> shared_use_st *shared_stuff;</div><div class="line">    <span class="comment">//判断mutex、a、b信号量是否创建成功</span></div><div class="line">	<span class="keyword">if</span> ( (mutex=semget((<span class="keyword">key_t</span>)KEY_MUTEX,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (a = semget((<span class="keyword">key_t</span>)KEY_EMPTY,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (b = semget((<span class="keyword">key_t</span>)KEY_FULL,<span class="number">1</span>,<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create semaphore!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ( (shmid = shmget((<span class="keyword">key_t</span>)KEY_SHM,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st),<span class="number">0666</span>|IPC_CREAT)) == <span class="number">-1</span> ) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to create shared memory!"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( (shared_memory = shmat(shmid,(<span class="keyword">void</span> *)<span class="number">0</span>,<span class="number">0</span>) ) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"shmat failed\n"</span>);</div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	shared_stuff = (<span class="keyword">struct</span> shared_use_st *)shared_memory;</div><div class="line"></div><div class="line">	<span class="comment">//产品B的入库过程</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</div><div class="line">	&#123;</div><div class="line">		sem_p(b);</div><div class="line">		sem_p(mutex);  <span class="comment">//获取互斥信号量</span></div><div class="line">		item = shared_stuff-&gt;buffer[shared_stuff-&gt;lo];</div><div class="line">		(shared_stuff-&gt;buffer)[(shared_stuff-&gt;lo)]=<span class="number">0</span>;</div><div class="line">		(shared_stuff-&gt;lo) = ((shared_stuff-&gt;lo)+<span class="number">1</span>) % BUFFER_SIZE;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Putting product A of No.%d\n"</span>, item);  <span class="comment">//输出正在入库的产品B的序号</span></div><div class="line">		sem_v(mutex);  <span class="comment">//释放互斥锁</span></div><div class="line">		sem_v(a);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"The number of B in resposity is %d\n"</span>, item);  <span class="comment">//输出仓库中产品B的数量</span></div><div class="line">		sleep(<span class="number">2</span>);  <span class="comment">//等待2s</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (shmdt(shared_memory) == <span class="number">-1</span>) &#123;</div><div class="line">       	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmdt failed\n"</span>); </div><div class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Finish!\n"</span>);</div><div class="line">	getchar();</div><div class="line">  	<span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">default: myipc init.c proa.c prob.c</div><div class="line">	gcc -o init myipc.o init.c</div><div class="line">	gcc -o proa myipc.o proa.c</div><div class="line">	gcc -o prob myipc.o prob.c</div><div class="line">myipc: myipc.c</div><div class="line">	gcc -c myipc.c</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="产品A的入库情况"><a href="#产品A的入库情况" class="headerlink" title="产品A的入库情况"></a>产品A的入库情况</h3><p><img src="http://p1.bpimg.com/567571/c78294ab78e96c7d.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/95fdfc3dcb3ed2aa.png" alt=""></p>
<h3 id="产品B的入库情况"><a href="#产品B的入库情况" class="headerlink" title="产品B的入库情况"></a>产品B的入库情况</h3><h2 id="源代码下载"><a href="#源代码下载" class="headerlink" title="源代码下载"></a>源代码下载</h2><p>完整的源代码可以移步至我的 <a href="https://github.com/dengfuping/operating-system-and-xv6" target="_blank" rel="external">Github个人主页</a> 进行查看和下载^-^。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（二）：xv6 shell编程作业之实现shell的基础命令]]></title>
      <url>http://www.dengfuping.com/2017/01/14/operating-system-homework-2/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>要求在原有代码的基础上，实现shell的三类基础命令，它们包括：<br><a id="more"></a></p>
<ol>
<li>简单命令（可执行的程序命令，如ls等）</li>
<li>I/O重定向命令，如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"6.828 is cool"</span> &gt; x.txt</div><div class="line">$ cat &lt; x.txt</div></pre></td></tr></table></figure>
<ol>
<li>管道命令（pipe）,如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls | sort | uniq | wc</div></pre></td></tr></table></figure>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>原有代码中定义了输入命令的基础结构体，即 struct cmd。这个结构体就一个成员type，用于记录输入命令的类型： ‘ ‘ 表示简单可执行命令 ‘|’ 表示管道命令, ‘&lt;’ 和’&gt;’ 表示I/O重定向命令。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cmd &#123;</div><div class="line">    <span class="keyword">int</span> type;    <span class="comment">// ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>每一个类型分别继承cmd基础结构体，派生出对应的三类结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> execcmd &#123;</div><div class="line">    <span class="keyword">int</span> type;              <span class="comment">// ' '</span></div><div class="line">    <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> redircmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt;</span></div><div class="line">    <span class="keyword">struct</span> cmd *cmd;   <span class="comment">// the command to be run (e.g., an execcmd)</span></div><div class="line">    <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></div><div class="line">    <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></div><div class="line">    <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> pipecmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// |</span></div><div class="line">    <span class="keyword">struct</span> cmd *left;  <span class="comment">// left side of pipe</span></div><div class="line">    <span class="keyword">struct</span> cmd *right; <span class="comment">// right side of pipe</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>经过分析，设计了以下的运行流程，其中，管道命令的解析和运行是通过递归函数实现的。<br><img src="http://p1.bqimg.com/567571/10acf80cf500c5b2.png" alt=""></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在所给代码中，void runcmd(struct cmd *cmd)这个函数是真正驱动调用实现shell基础功能的核心。通过调用系统接口函数 execv(), open(), close(), dup(), pipe()和在原有代码的基础上，来实现目标功能。</p>
<h3 id="实现简单命令"><a href="#实现简单命令" class="headerlink" title="实现简单命令"></a>实现简单命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">ecmd = (<span class="keyword">struct</span> execcmd*)cmd;</div><div class="line"><span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">execv(search_path(ecmd-&gt;argv[<span class="number">0</span>]), ecmd-&gt;argv);</div><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"execv returned with error: %s\n"</span>, strerror(errno));</div><div class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">search_path</span><span class="params">(<span class="keyword">char</span> *exe)</span></span></div><div class="line">&#123;</div><div class="line">    DIR *d;</div><div class="line">    <span class="keyword">struct</span> dirent *dir;</div><div class="line">    <span class="keyword">char</span> *paths = getenv(<span class="string">"PATH"</span>);</div><div class="line">    <span class="keyword">char</span> *path_dir = strtok(paths, <span class="string">":"</span>);</div><div class="line">    <span class="keyword">while</span> (path_dir != <span class="literal">NULL</span>) &#123;</div><div class="line">        d = opendir(path_dir);</div><div class="line">        <span class="keyword">if</span> (d == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot open dir: %s"</span>, strerror(errno));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">while</span> ((dir = readdir(d)) != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dir-&gt;d_name, exe) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">char</span> *final_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(path_dir) + <span class="built_in">strlen</span>(exe) + <span class="number">2</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, path_dir);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, <span class="string">"/"</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, exe);</div><div class="line">                    <span class="keyword">return</span> final_path;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        path_dir = strtok(<span class="literal">NULL</span>, <span class="string">":"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exe;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现I-O重定向命令"><a href="#实现I-O重定向命令" class="headerlink" title="实现I/O重定向命令"></a>实现I/O重定向命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">rcmd = (<span class="keyword">struct</span> redircmd*)cmd;</div><div class="line">setup_redirection(rcmd);</div><div class="line">runcmd(rcmd-&gt;cmd);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd *cmd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> redirection_fd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (cmd-&gt;type == <span class="string">'&gt;'</span>) &#123;  </div><div class="line">        <span class="comment">// output redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode, S_IRWXU);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="comment">// input redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (redirection_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open file for redirection: %s\n"</span>,\</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    dup2_wrapped(redirection_fd, cmd-&gt;fd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrapper around the dup2 system call used to check for errors</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span> old_fd, <span class="keyword">int</span> new_fd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> result = dup2(old_fd, new_fd);</div><div class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to dup file descriptors: %s\n"</span>, \</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现管道（pipe）命令"><a href="#实现管道（pipe）命令" class="headerlink" title="实现管道（pipe）命令"></a>实现管道（pipe）命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the method runcmd()</span></div><div class="line">pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</div><div class="line"><span class="keyword">int</span> result = pipe(p);</div><div class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pipe system call did not complete successfully: %s\n"</span>,\</div><div class="line">          strerror(errno));</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (fork1() == <span class="number">0</span>)</div><div class="line">&#123;  </div><div class="line">    <span class="comment">// child1 executes pcmd-&gt;left</span></div><div class="line">    close(p[<span class="number">0</span>]);</div><div class="line">    dup2_wrapped(p[<span class="number">1</span>], STDOUT_FILENO);</div><div class="line">    close(p[<span class="number">1</span>]);</div><div class="line">    runcmd(pcmd-&gt;left);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (fork1() == <span class="number">0</span>) </div><div class="line">&#123; </div><div class="line">    <span class="comment">// child2 executes pcmd-&gt;right</span></div><div class="line">    close(p[<span class="number">1</span>]);</div><div class="line">    dup2_wrapped(p[<span class="number">0</span>], STDIN_FILENO);</div><div class="line">    close(p[<span class="number">0</span>]);</div><div class="line">    runcmd(pcmd-&gt;right);</div><div class="line">&#125;</div><div class="line">close(p[<span class="number">0</span>]);</div><div class="line">close(p[<span class="number">1</span>]);</div><div class="line">wait(&amp;r);</div><div class="line">wait(&amp;r);</div><div class="line"><span class="built_in">exit</span>(EXIT_SUCCESS);</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Simplifed xv6 shell.</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></div><div class="line"></div><div class="line"><span class="comment">// All commands have at least a type. Having looked at the type, the code</span></div><div class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></div><div class="line"><span class="keyword">struct</span> cmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> execcmd &#123;</div><div class="line">    <span class="keyword">int</span> type;              <span class="comment">// ' '</span></div><div class="line">    <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> redircmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt;</span></div><div class="line">    <span class="keyword">struct</span> cmd *cmd;   <span class="comment">// the command to be run (e.g., an execcmd)</span></div><div class="line">    <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></div><div class="line">    <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></div><div class="line">    <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> pipecmd &#123;</div><div class="line">    <span class="keyword">int</span> type;          <span class="comment">// |</span></div><div class="line">    <span class="keyword">struct</span> cmd *left;  <span class="comment">// left side of pipe</span></div><div class="line">    <span class="keyword">struct</span> cmd *right; <span class="comment">// right side of pipe</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// Fork but exits on failure.</span></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">search_path</span><span class="params">(<span class="keyword">char</span>*)</span></span>; <span class="comment">// Recursively search through all paths listed</span></div><div class="line"><span class="comment">// in $PATH to find the given executabe</span></div><div class="line"></div><div class="line"><span class="comment">// Execute cmd.  Never returns. Executes in the child.</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">runcmd</span><span class="params">(<span class="keyword">struct</span> cmd *cmd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> p[<span class="number">2</span>], r;</div><div class="line">    <span class="keyword">struct</span> execcmd *ecmd;</div><div class="line">    <span class="keyword">struct</span> pipecmd *pcmd;</div><div class="line">    <span class="keyword">struct</span> redircmd *rcmd;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cmd == <span class="number">0</span>)</div><div class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line"></div><div class="line">    errno = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span>(cmd-&gt;type)&#123;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unknown commnad type\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">            ecmd = (<span class="keyword">struct</span> execcmd*)cmd;</div><div class="line">            <span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</div><div class="line">                <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">            execv(search_path(ecmd-&gt;argv[<span class="number">0</span>]), ecmd-&gt;argv);</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"execv returned with error: %s\n"</span>, strerror(errno));</div><div class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">            rcmd = (<span class="keyword">struct</span> redircmd*)cmd;</div><div class="line">            setup_redirection(rcmd);</div><div class="line">            runcmd(rcmd-&gt;cmd);</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'|'</span>:</div><div class="line">            pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</div><div class="line">            <span class="keyword">int</span> result = pipe(p);</div><div class="line">            <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pipe system call did not complete successfully: %s\n"</span>,\</div><div class="line">                      strerror(errno));</div><div class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123;  <span class="comment">// child1 executes pcmd-&gt;left</span></div><div class="line">                close(p[<span class="number">0</span>]);</div><div class="line">                dup2_wrapped(p[<span class="number">1</span>], STDOUT_FILENO);</div><div class="line">                close(p[<span class="number">1</span>]);</div><div class="line">                runcmd(pcmd-&gt;left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (fork1() == <span class="number">0</span>) &#123; <span class="comment">// child2 executes pcmd-&gt;right</span></div><div class="line">                close(p[<span class="number">1</span>]);</div><div class="line">                dup2_wrapped(p[<span class="number">0</span>], STDIN_FILENO);</div><div class="line">                close(p[<span class="number">0</span>]);</div><div class="line">                runcmd(pcmd-&gt;right);</div><div class="line">            &#125;</div><div class="line">            close(p[<span class="number">0</span>]);</div><div class="line">            close(p[<span class="number">1</span>]);</div><div class="line">            wait(&amp;r);</div><div class="line">            wait(&amp;r);</div><div class="line">            <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// should never get here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">setup_redirection</span><span class="params">(<span class="keyword">struct</span> redircmd *cmd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> redirection_fd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (cmd-&gt;type == <span class="string">'&gt;'</span>) &#123; <span class="comment">// output redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode, S_IRWXU);</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// input redirection</span></div><div class="line">        redirection_fd = open(cmd-&gt;file, cmd-&gt;mode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (redirection_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open file for redirection: %s\n"</span>,\</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">    dup2_wrapped(redirection_fd, cmd-&gt;fd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrapper around the dup2 system call used to check for errors</span></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">dup2_wrapped</span><span class="params">(<span class="keyword">int</span> old_fd, <span class="keyword">int</span> new_fd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> result = dup2(old_fd, new_fd);</div><div class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to dup file descriptors: %s\n"</span>, \</div><div class="line">                    strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// List through directories in $PATH to find given executable.</span></div><div class="line"><span class="comment">// Returns the given executable if not found in any of the $PATH</span></div><div class="line"><span class="comment">// directoties.</span></div><div class="line"><span class="function"><span class="keyword">char</span> *</span></div><div class="line"><span class="title">search_path</span><span class="params">(<span class="keyword">char</span> *exe)</span></div><div class="line">&#123;</div><div class="line">    DIR *d;</div><div class="line">    <span class="keyword">struct</span> dirent *dir;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *paths = getenv(<span class="string">"PATH"</span>);</div><div class="line">    <span class="keyword">char</span> *path_dir = strtok(paths, <span class="string">":"</span>);</div><div class="line">    <span class="keyword">while</span> (path_dir != <span class="literal">NULL</span>) &#123;</div><div class="line">        d = opendir(path_dir);</div><div class="line">        <span class="keyword">if</span> (d == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot open dir: %s"</span>, strerror(errno));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">while</span> ((dir = readdir(d)) != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dir-&gt;d_name, exe) == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">char</span> *final_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(path_dir) + <span class="built_in">strlen</span>(exe) + <span class="number">2</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, path_dir);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, <span class="string">"/"</span>);</div><div class="line">                    final_path = <span class="built_in">strcat</span>(final_path, exe);</div><div class="line">                    <span class="keyword">return</span> final_path;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        path_dir = strtok(<span class="literal">NULL</span>, <span class="string">":"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> exe;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">getcmd</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> nbuf)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isatty(fileno(<span class="built_in">stdin</span>)))</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"6.828$ "</span>);</div><div class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, nbuf);</div><div class="line">    fgets(buf, nbuf, <span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="number">0</span>) <span class="comment">// EOF</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> r;</div><div class="line"></div><div class="line">    <span class="comment">// Read and run input commands.</span></div><div class="line">    <span class="keyword">while</span>(getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>)&#123;</div><div class="line">            <span class="comment">// Clumsy but will have to do for now.</span></div><div class="line">            <span class="comment">// Chdir has no effect on the parent if run in the child.</span></div><div class="line">            buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></div><div class="line">            <span class="keyword">if</span>(chdir(buf+<span class="number">3</span>) &lt; <span class="number">0</span>)</div><div class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf+<span class="number">3</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</div><div class="line">            runcmd(parsecmd(buf));</div><div class="line">        wait(&amp;r);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pid;</div><div class="line"></div><div class="line">    pid = fork();</div><div class="line">    <span class="keyword">if</span>(pid == <span class="number">-1</span>)</div><div class="line">        perror(<span class="string">"fork"</span>);</div><div class="line">    <span class="keyword">return</span> pid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">execcmd</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> execcmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = <span class="string">' '</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">redircmd</span><span class="params">(<span class="keyword">struct</span> cmd *subcmd, <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> redircmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = type;</div><div class="line">    cmd-&gt;cmd = subcmd;</div><div class="line">    cmd-&gt;file = file;</div><div class="line">    cmd-&gt;mode = (type == <span class="string">'&lt;'</span>) ?  O_RDONLY : O_WRONLY|O_CREAT|O_TRUNC;</div><div class="line">    cmd-&gt;fd = (type == <span class="string">'&lt;'</span>) ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">pipecmd</span><span class="params">(<span class="keyword">struct</span> cmd *left, <span class="keyword">struct</span> cmd *right)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> pipecmd *cmd;</div><div class="line"></div><div class="line">    cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</div><div class="line">    <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</div><div class="line">    cmd-&gt;type = <span class="string">'|'</span>;</div><div class="line">    cmd-&gt;left = left;</div><div class="line">    cmd-&gt;right = right;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> cmd*)cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Parsing</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> whitespace[] = <span class="string">" \t\r\n\v"</span>;</div><div class="line"><span class="keyword">char</span> symbols[] = <span class="string">"&lt;|&gt;"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">gettoken</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> **q, <span class="keyword">char</span> **eq)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">    s = *ps;</div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    <span class="keyword">if</span>(q)</div><div class="line">        *q = s;</div><div class="line">    ret = *s;</div><div class="line">    <span class="keyword">switch</span>(*s)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'|'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">            s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">            s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            ret = <span class="string">'a'</span>;</div><div class="line">            <span class="keyword">while</span>(s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s))</div><div class="line">                s++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(eq)</div><div class="line">        *eq = s;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    *ps = s;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">peek</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> *toks)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s;</div><div class="line"></div><div class="line">    s = *ps;</div><div class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</div><div class="line">        s++;</div><div class="line">    *ps = s;</div><div class="line">    <span class="keyword">return</span> *s &amp;&amp; <span class="built_in">strchr</span>(toks, *s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parseline</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">struct</span> cmd *<span class="title">parseexec</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// make a copy of the characters in the input buffer, starting from s through es.</span></div><div class="line"><span class="comment">// null-terminate the copy to make it a string.</span></div><div class="line"><span class="function"><span class="keyword">char</span></span></div><div class="line">*<span class="title">mkcopy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = es - s;</div><div class="line">    <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(n+<span class="number">1</span>);</div><div class="line">    assert(c);</div><div class="line">    <span class="built_in">strncpy</span>(c, s, n);</div><div class="line">    c[n] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span> *s)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *es;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line"></div><div class="line">    es = s + <span class="built_in">strlen</span>(s);</div><div class="line">    cmd = parseline(&amp;s, es);</div><div class="line">    peek(&amp;s, es, <span class="string">""</span>);</div><div class="line">    <span class="keyword">if</span>(s != es)&#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"leftovers: %s\n"</span>, s);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseline</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line">    cmd = parsepipe(ps, es);</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> cmd *cmd;</div><div class="line"></div><div class="line">    cmd = parseexec(ps, es);</div><div class="line">    <span class="keyword">if</span>(peek(ps, es, <span class="string">"|"</span>))&#123;</div><div class="line">        gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        cmd = pipecmd(cmd, parsepipe(ps, es));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseredirs</span><span class="params">(<span class="keyword">struct</span> cmd *cmd, <span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tok;</div><div class="line">    <span class="keyword">char</span> *q, *eq;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(peek(ps, es, <span class="string">"&lt;&gt;"</span>))&#123;</div><div class="line">        tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(gettoken(ps, es, &amp;q, &amp;eq) != <span class="string">'a'</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"missing file for redirection\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span>(tok)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>:</div><div class="line">                cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&lt;'</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>:</div><div class="line">                cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&gt;'</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> cmd*</span></div><div class="line"><span class="title">parseexec</span><span class="params">(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *q, *eq;</div><div class="line">    <span class="keyword">int</span> tok, argc;</div><div class="line">    <span class="keyword">struct</span> execcmd *cmd;</div><div class="line">    <span class="keyword">struct</span> cmd *ret;</div><div class="line"></div><div class="line">    ret = execcmd();</div><div class="line">    cmd = (<span class="keyword">struct</span> execcmd*)ret;</div><div class="line"></div><div class="line">    argc = <span class="number">0</span>;</div><div class="line">    ret = parseredirs(ret, ps, es);</div><div class="line">    <span class="keyword">while</span>(!peek(ps, es, <span class="string">"|"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>((tok=gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(tok != <span class="string">'a'</span>) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        cmd-&gt;argv[argc] = mkcopy(q, eq);</div><div class="line">        argc++;</div><div class="line">        <span class="keyword">if</span>(argc &gt;= MAXARGS) &#123;</div><div class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        ret = parseredirs(ret, ps, es);</div><div class="line">    &#125;</div><div class="line">    cmd-&gt;argv[argc] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><p><img src="http://i1.piimg.com/567571/2b03083d7bd0141d.png" alt=""></p>
<h3 id="I-O重定向命令"><a href="#I-O重定向命令" class="headerlink" title="I/O重定向命令"></a>I/O重定向命令</h3><p><img src="http://i1.piimg.com/567571/8ff6892c524ed107.png" alt=""></p>
<h3 id="管道（pipe）命令"><a href="#管道（pipe）命令" class="headerlink" title="管道（pipe）命令"></a>管道（pipe）命令</h3><p><img src="http://i1.piimg.com/567571/12b5e5e7b3ad4e67.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统原理作业（一）：利用Linux多线程机制和积分中值定理计算π的值]]></title>
      <url>http://www.dengfuping.com/2017/01/13/operating-system-homework-1/</url>
      <content type="html"><![CDATA[<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>Write a program to figure out π with pthread. The formula is here as follows</p>
<p><img src="http://p1.bpimg.com/567571/9f2c9da32b98fa85.png" alt=""></p>
<a id="more"></a>
<p>You should choose the appropriate N and the number the threads and evaluate how do these two factors affect the performance. Try it in the multi-CPUs or multi-cores system if possible and compare the time consumed in the single CPU with one core system. Remember to add the option of -lpthread in gcc.</p>
<p>Programming guide:<br>Beginning Linux Programming 4e (Chapter 12: POSIX Threads)</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>把线程的执行任务分成若干段，每个线程执行一段，最后将每一段得到的结果相加即可得到π的近似值。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="线程的操作和函数有："><a href="#线程的操作和函数有：" class="headerlink" title="线程的操作和函数有："></a>线程的操作和函数有：</h3><p>（1）线程句柄： pthread_t。下面创建了4个指向线程的句柄：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">pthread_t</span> hThread[numThreads];</div></pre></td></tr></table></figure></p>
<p>（2）创建线程：pthread_create()：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numThreads; i++)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">    hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="同步和互斥"><a href="#同步和互斥" class="headerlink" title="同步和互斥"></a>同步和互斥</h3><p>由于同一进程的线程之间大部分的数据都是共享的，在涉及到对共享数据进行读写操作时，就必须使用同步机制，否则就会造成线程们哄抢共享的数据,造成数据混乱甚至是丢失。在此，我们通过给线程加锁（互斥锁）来解决这一问题。</p>
<p>（1）互斥锁句柄：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div></pre></td></tr></table></figure></p>
<p>（2）加锁和解锁：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pthread_mutex_lock(&amp;mut);     <span class="comment">//给线程加锁</span></div><div class="line">pthread_mutex_unlock(&amp;mut);   <span class="comment">//给线程解锁</span></div></pre></td></tr></table></figure></p>
<p>（3）初始化互斥锁：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>);   <span class="comment">//初始化互斥锁</span></div></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> N = <span class="number">100000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">double</span> step;</div><div class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div><div class="line"></div><div class="line"><span class="comment">//依据计算Pi值的积分中值定理实现公式计算</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *pArg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">int</span> temp = *((<span class="keyword">int</span> *)pArg);</div><div class="line">    <span class="keyword">int</span> start = temp * (N / <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> end = start + N / <span class="number">4</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, temp, start, end);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) </div><div class="line">    &#123;</div><div class="line">        pthread_mutex_lock(&amp;mut);   <span class="comment">//给线程加锁</span></div><div class="line">        x = (i + <span class="number">0.5</span>) * step;</div><div class="line">        sum = sum + <span class="number">4.0</span> / (<span class="number">1.0</span> + x * x);</div><div class="line">        pthread_mutex_unlock(&amp;mut);  <span class="comment">//给线程解锁</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">clock_t</span> t1 = clock();</div><div class="line">    <span class="keyword">pthread_t</span> hThread[numThreads];</div><div class="line">    pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>); <span class="comment">//初始化互斥锁</span></div><div class="line">    step = <span class="number">1.0</span> / (<span class="keyword">double</span>)N;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">        hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> pi = step * sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Pi = %12.9f\n"</span>, pi);</div><div class="line">    <span class="keyword">clock_t</span> t2 = clock();</div><div class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(t2 - t1) / CLOCKS_PER_SEC;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The whole computing time is %f seconds\n"</span>, duration);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><ul>
<li><p>运行时链接-lpthread库，结果如下（设置计算的次数N=100000）：</p>
<p>  <img src="http://p1.bpimg.com/567571/9032a0d07640d2b4.png" alt=""></p>
</li>
<li><p>经过分析发现，子线程在主线程完成的时候都还来不及执行，故所得π值为0。解决方法是在创建线程的时候等待1秒，以保证子线程能够得到执行。修改后的代码和运行结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">    hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);    </div><div class="line">    <span class="comment">//让主线程等待1秒，确保子线程能够得到执行</span></div><div class="line">    sleep(<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <img src="http://p1.bpimg.com/567571/6204082eeb18aa56.png" alt=""></p>
</li>
<li><p>将线程数减为2，运行结果如下：</p>
<p>  <img src="http://p1.bpimg.com/567571/00ab91044ae5afcf.png" alt=""></p>
</li>
<li><p>当线程数为1（单线程）时，运行结果如下：</p>
<p>  <img src="http://p1.bpimg.com/567571/81f76033dca3172b.png" alt=""></p>
</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> N = <span class="number">100000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> numThreads = <span class="number">4</span>;</div><div class="line"><span class="keyword">double</span> step;</div><div class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> mut;</div><div class="line"></div><div class="line"><span class="comment">//依据计算Pi值的积分中值定理实现公式计算</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread</span><span class="params">(<span class="keyword">void</span> *pArg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">int</span> temp = *((<span class="keyword">int</span> *)pArg);</div><div class="line">    <span class="keyword">int</span> start = temp * (N / <span class="number">4</span>);</div><div class="line">    <span class="keyword">int</span> end = start + N / <span class="number">4</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, temp, start, end);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) </div><div class="line">    &#123;</div><div class="line">        pthread_mutex_lock(&amp;mut);   <span class="comment">//给线程加锁</span></div><div class="line">        x = (i + <span class="number">0.5</span>) * step;</div><div class="line">        sum = sum + <span class="number">4.0</span> / (<span class="number">1.0</span> + x * x);</div><div class="line">        pthread_mutex_unlock(&amp;mut);  <span class="comment">//给线程解锁</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">clock_t</span> t1 = clock();</div><div class="line">    <span class="keyword">pthread_t</span> hThread[numThreads];</div><div class="line">    pthread_mutex_init(&amp;mut, <span class="literal">NULL</span>); <span class="comment">//初始化互斥锁</span></div><div class="line">    step = <span class="number">1.0</span> / (<span class="keyword">double</span>)N;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numThreads; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//创建线程并且将thread函数传入</span></div><div class="line">        hThread[i] = pthread_create(&amp;hThread[i], <span class="literal">NULL</span>, thread, &amp;i);</div><div class="line">        <span class="comment">//让主线程等待1秒，确保子线程能够得到执行</span></div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> pi = step * sum;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Pi = %12.9f\n"</span>, pi);</div><div class="line">    <span class="keyword">clock_t</span> t2 = clock();</div><div class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(t2 - t1) / CLOCKS_PER_SEC;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The whole computing time is %f seconds\n"</span>, duration);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL入门学习（二）]]></title>
      <url>http://www.dengfuping.com/2016/10/26/opengl-learning-2/</url>
      <content type="html"><![CDATA[<h2 id="第一个OpenGL程序"><a href="#第一个OpenGL程序" class="headerlink" title="第一个OpenGL程序"></a>第一个OpenGL程序</h2><p>一个简单的OpenGL程序如下：（注意，如果需要编译并运行，需要正确安装GlUT，安装方法请参考 <a href="">OpenGL环境搭建</a>）.</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">     glClear(GL_COLOR_BUFFER_BIT);</div><div class="line">     glRectf(<span class="number">-0.5</span>f, <span class="number">-0.5</span>f, <span class="number">0.5f</span>, <span class="number">0.5f</span>);</div><div class="line">     glFlush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">     glutInit(&amp;argc, argv);</div><div class="line">     glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);</div><div class="line">     glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">     glutInitWindowSize(<span class="number">400</span>, <span class="number">400</span>);</div><div class="line">     glutCreateWindow(<span class="string">"第一个OpenGL程序"</span>);</div><div class="line">     glutDisplayFunc(&amp;myDisplay);</div><div class="line">     glutMainLoop();</div><div class="line"></div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://p1.bqimg.com/567571/aa7cb6bd8e0a2912.png" alt=""></p>
<h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><p>该程序的作用是在一个黑色的窗口中央画一个白色的矩形。<br>首先，需要包含头文件#include <gl glut.h="">，这是GLUT的头文件。<br>本来OpenGL程序一般还要包含<gl gl.h="">和<gl glu.h="">，但GLUT的头文件中已经自动将这两个文件包含了，不必再次包含。</gl></gl></gl></p>
<h3 id="main-函数说明"><a href="#main-函数说明" class="headerlink" title="main()函数说明"></a>main()函数说明</h3><ul>
<li>int main(int argc, char *argv[])，这个是带命令行参数的main函数，各位应该见过吧？没见过的同志们请多翻翻书，等弄明白了再往下看。</li>
<li>注意main函数中的各语句，除了最后的return之外，其余全部以glut开头。这种以glut开头的函数都是GLUT工具包所提供的函数，下面对用到的几个函数进行介绍。<ol>
<li>glutInit，对GLUT进行初始化，这个函数必须在其它的GLUT使用之前调用一次。其格式比较死板，一般照抄这句glutInit(&amp;argc, argv)就可以了。</li>
<li>glutInitDisplayMode，设置显示方式，其中GLUT_RGB表示使用RGB颜色，与之对应的还有GLUT_INDEX（表示使用索引颜色）。GLUT_SINGLE表示使用单缓冲，与之对应的还有GLUT_DOUBLE（使用双缓冲）。更多信息，请自己Google。当然以后的教程也会有一些讲解。</li>
<li>glutInitWindowPosition，这个简单，设置窗口在屏幕中的位置。</li>
<li>glutInitWindowSize，这个也简单，设置窗口的大小。</li>
<li>glutCreateWindow，根据前面设置的信息创建窗口。参数将被作为窗口的标题。注意：窗口被创建后，并不立即显示到屏幕上。需要调用glutMainLoop才能看到窗口。</li>
<li>glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（这个说法不够准确，但准确的说法可能初学者不太好理解，暂时这样说吧）。</li>
<li>glutMainLoop，进行一个消息循环。（这个可能初学者也不太明白，现在只需要知道这个函数可以显示窗口，并且等待窗口关闭后才会返回，这就足够了。）</li>
</ol>
</li>
</ul>
<h3 id="glutDisplayFunc-和myDisplay-函数说明"><a href="#glutDisplayFunc-和myDisplay-函数说明" class="headerlink" title="glutDisplayFunc()和myDisplay()函数说明"></a>glutDisplayFunc()和myDisplay()函数说明</h3><ul>
<li>在glutDisplayFunc函数中，我们设置了“当需要画图时，请调用myDisplay函数”。于是myDisplay函数就用来画图。观察myDisplay中的三个函数调用，发现它们都以gl开头。这种以gl开头的函数都是OpenGL的标准函数，下面对用到的函数进行介绍。<ol>
<li>glClear，清除。GL_COLOR_BUFFER_BIT表示清除颜色，glClear函数还可以清除其它的东西，但这里不作介绍。</li>
<li>glRectf，画一个矩形。四个参数分别表示了位于对角线上的两个点的横、纵坐标。</li>
<li>glFlush，保证前面的OpenGL命令立即执行（而不是让它们在缓冲区中等待）。其作用跟fflush(stdout)类似。</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xampp 常见问题及其解决方式]]></title>
      <url>http://www.dengfuping.com/2016/10/15/xampp-configuration-and-attention/</url>
      <content type="html"><![CDATA[<p>最近在可视化的一个小实验中需要使用 xampp 这个建站集成的软件包。在帮同学解决问题的过程中，想到自己去年刚刚接触这个的时候也是各种小问题不断。今天正好趁此机会，将常见的问题及其解决方式一并总结如下。<br><a id="more"></a></p>
<h2 id="xampp-安装及需要了解的常识"><a href="#xampp-安装及需要了解的常识" class="headerlink" title="xampp 安装及需要了解的常识"></a>xampp 安装及需要了解的常识</h2><p>虽然安装时会提示你将杀毒软件关闭，否则可能安装失败。但实际测试的效果是，关不关都没什么区别。</p>
<p>另外，需要注意的是，如果你的电脑已经安装有以下组件，要么先删除再安装，，要么在安装 xampp 是将你已经安装过的组件取消勾选，以免发生冲突。这里，我们采取的是全部安装。</p>
<p><img src="http://p1.bpimg.com/567571/d9a3de3a3d2f9a85.png" alt=""></p>
<p>默认端口号</p>
<ul>
<li>Apache: 80 和 443</li>
<li>MySQL： 3306</li>
<li>Tomcat： 8080</li>
</ul>
<p>MySQL 默认用户名为 root ，密码为空</p>
<h2 id="端口占用问题"><a href="#端口占用问题" class="headerlink" title="端口占用问题"></a>端口占用问题</h2><p>一般网上的教程都是建议将端口号改成未被占用的端口号。此处，我建议采取将占用端口的进程关闭的解决方案。一来是方便以后的开发，二来改端口号需要改动配置文件的多处地方，比较麻烦。</p>
<p>那如何查看端口被哪个进程占用呢？我们可以在命令行下输入 <code>netstat -ano</code> 来进行查看。结果发现 Apache需要使用的 443 端口被占用。</p>
<p><img src="http://i1.piimg.com/567571/813e79cd24b5d0fc.png" alt=""></p>
<p>当然，也可以不采取这种方式就可以达到查看进程信息的目的。在 xampp 的控制面板的右上角有一 netstat 的按钮，其实就告诉我们它就已经集成了查看进程信息的功能。</p>
<p><img src="http://i1.piimg.com/567571/c58bb8f75c0554af.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/698a95aae068605f.png" alt=""></p>
<p>找到与端口号相对应的进程编号 PID。右键任务栏-&gt;任务管理器，进入任务管理器界面。在“详细信息”一栏中找到对应的 PID 进程编号，选中以后直接选择“结束任务”即可。</p>
<p>重新启动 Apache，发现启动成功。</p>
<p><img src="http://p1.bpimg.com/567571/93fdae831d8b7c1f.png" alt=""></p>
<p>其他类似端口号被占用的问题都可以用同样的方法解决。</p>
<h2 id="Apache-相关问题"><a href="#Apache-相关问题" class="headerlink" title="Apache 相关问题"></a>Apache 相关问题</h2><p>当我们新建 Web 项目（尤其是涉及到后台开发）的时候，我们需要将项目保存到 xampp 目录下的 htdocs 文件夹中，其中， htdocs 是 xampp 中 Apache 的服务器根目录。但这样既麻烦又不方便管理项目，那有没有办法不放在这个目录中呢？答案是有的。 </p>
<p>在 xamp 控制面板点击 MySQL 对应的 Config 按钮选中并进入 httpd.conf 配置文件，将原有的服务器根目录改为你自己喜欢的目录。为了项目的方便管理，此处我将我的一个 PhpProjects 目录映射为 apache 的服务器根目录。</p>
<p><img src="http://p1.bqimg.com/567571/76d9e0560a90082f.png" alt=""></p>
<h3 id="MySQL-相关问题"><a href="#MySQL-相关问题" class="headerlink" title="MySQL 相关问题"></a>MySQL 相关问题</h3><h3 id="修改数据库密码"><a href="#修改数据库密码" class="headerlink" title="修改数据库密码"></a>修改数据库密码</h3><p>如前面所讲到的，安装的 MySQL 数据库密码默认为空，那如何修改数据库密码呢？其实很简单，只需要一条命令即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -p password admin</div><div class="line">Enter password: (在此处输入你原有的密码，原先密码为空，因此我们直接回车即可，之后会提示你输入你的新密码)</div></pre></td></tr></table></figure>
<h3 id="修改数据库密码后-phpMyAdmin-无法打开"><a href="#修改数据库密码后-phpMyAdmin-无法打开" class="headerlink" title="修改数据库密码后 phpMyAdmin 无法打开"></a>修改数据库密码后 phpMyAdmin 无法打开</h3><p>找到 phpMyAdmin 的安装目录，打开 config.inc.php 文件，将 password 改为你的新密码即可通过 <a href="http://localhost/phpMyAdmin" target="_blank" rel="external">http://localhost/phpMyAdmin</a> 进行访问。</p>
<h3 id="MySQL-数据库中中文乱码问题"><a href="#MySQL-数据库中中文乱码问题" class="headerlink" title="MySQL 数据库中中文乱码问题"></a>MySQL 数据库中中文乱码问题</h3><p>同样的，在 xamp 控制面板点击 MySQL 对应的 Config 按钮选中并进入 my.ini （这是 MySQL 的配置文件）文件，将 UTF 8 Settings 中的设置全部解除注释（默认是非 UTF-8 编码），如下图所示，保存以后即不会再出现乱码。</p>
<p><img src="http://p1.bpimg.com/567571/82339639e5e64322.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用VTK调用Marching Cubes和Volume Rendering]]></title>
      <url>http://www.dengfuping.com/2016/10/14/VTK-MarchingCubes-VolumeRendering/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/3f17b3c63b0588f6.png" alt=""></p>
<p>前一段时间在可视化的实验课上，我第一次接触了VTK (The Visualization Toolkit)这一开源项目。在本篇文章中，将给出如何通过VTK来调用 Marching Cubes 和 Volume Rendering的方法。要说明的一点是，以下内容是基于 Ubuntu 16.04 的平台上运行的，其中VTK的版本为最新的7.0.0。至于 Ubuntu 下 VTK的编译安装将不属于本文的讨论范围，有兴趣的同学可以参考网上的相关教程进行环境搭建。<br><a id="more"></a></p>
<h2 id="调用-Marching-Cubes"><a href="#调用-Marching-Cubes" class="headerlink" title="调用 Marching Cubes"></a>调用 Marching Cubes</h2><h3 id="Marching-Cubes-cxx-文件："><a href="#Marching-Cubes-cxx-文件：" class="headerlink" title="Marching Cubes.cxx 文件："></a>Marching Cubes.cxx 文件：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">#include &lt;vtkVersion.h&gt;</div><div class="line">#include &lt;vtkSmartPointer.h&gt;</div><div class="line">#include &lt;vtkMarchingCubes.h&gt;</div><div class="line">#include &lt;vtkVoxelModeller.h&gt;</div><div class="line">#include &lt;vtkSphereSource.h&gt;</div><div class="line">#include &lt;vtkImageData.h&gt;</div><div class="line">#include &lt;vtkDICOMImageReader.h&gt;</div><div class="line"></div><div class="line">#include &lt;vtkActor.h&gt;</div><div class="line">#include &lt;vtkPolyDataMapper.h&gt;</div><div class="line">#include &lt;vtkRenderWindowInteractor.h&gt;</div><div class="line">#include &lt;vtkRenderWindow.h&gt;</div><div class="line">#include &lt;vtkRenderer.h&gt;</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    vtkSmartPointer &lt;vtkImageData&gt; volume =</div><div class="line">            vtkSmartPointer&lt;vtkImageData&gt;::New();</div><div class="line">    double isoValue;</div><div class="line">    if (argc &lt; 3) &#123;</div><div class="line">        vtkSmartPointer &lt;vtkSphereSource&gt; sphereSource =</div><div class="line">                vtkSmartPointer&lt;vtkSphereSource&gt;::New();</div><div class="line">        sphereSource-&gt;SetPhiResolution(20);</div><div class="line">        sphereSource-&gt;SetThetaResolution(20);</div><div class="line">        sphereSource-&gt;Update();</div><div class="line"></div><div class="line">        double bounds[6];</div><div class="line">        sphereSource-&gt;GetOutput()-&gt;GetBounds(bounds);</div><div class="line">        for (unsigned int i = 0; i &lt; 6; i += 2) &#123;</div><div class="line">            double range = bounds[i + 1] - bounds[i];</div><div class="line">            bounds[i] = bounds[i] - .1 * range;</div><div class="line">            bounds[i + 1] = bounds[i + 1] + .1 * range;</div><div class="line">        &#125;</div><div class="line">        vtkSmartPointer &lt;vtkVoxelModeller&gt; voxelModeller =</div><div class="line">                vtkSmartPointer&lt;vtkVoxelModeller&gt;::New();</div><div class="line">        voxelModeller-&gt;SetSampleDimensions(50, 50, 50);</div><div class="line">        voxelModeller-&gt;SetModelBounds(bounds);</div><div class="line">        voxelModeller-&gt;SetScalarTypeToFloat();</div><div class="line">        voxelModeller-&gt;SetMaximumDistance(.1);</div><div class="line"></div><div class="line">        voxelModeller-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());</div><div class="line">        voxelModeller-&gt;Update();</div><div class="line">        isoValue = 0.5;</div><div class="line">        volume-&gt;DeepCopy(voxelModeller-&gt;GetOutput());</div><div class="line">    &#125; else &#123;</div><div class="line">        vtkSmartPointer &lt;vtkDICOMImageReader&gt; reader =</div><div class="line">                vtkSmartPointer&lt;vtkDICOMImageReader&gt;::New();</div><div class="line">        reader-&gt;SetDirectoryName(argv[1]);</div><div class="line">        reader-&gt;Update();</div><div class="line">        volume-&gt;DeepCopy(reader-&gt;GetOutput());</div><div class="line">        isoValue = atof(argv[2]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkMarchingCubes&gt; surface =</div><div class="line">            vtkSmartPointer&lt;vtkMarchingCubes&gt;::New();</div><div class="line"></div><div class="line">#if VTK_MAJOR_VERSION &lt;= 5</div><div class="line">    surface-&gt;SetInput(volume);</div><div class="line">#else</div><div class="line">    surface-&gt;SetInputData(volume);</div><div class="line">#endif</div><div class="line">    surface-&gt;ComputeNormalsOn();</div><div class="line">    surface-&gt;SetValue(0, isoValue);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkRenderer&gt; renderer =</div><div class="line">            vtkSmartPointer&lt;vtkRenderer&gt;::New();</div><div class="line">    renderer-&gt;SetBackground(.1, .2, .3);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkRenderWindow&gt; renderWindow =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</div><div class="line">    renderWindow-&gt;AddRenderer(renderer);</div><div class="line">    vtkSmartPointer &lt;vtkRenderWindowInteractor&gt; interactor =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</div><div class="line">    interactor-&gt;SetRenderWindow(renderWindow);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkPolyDataMapper&gt; mapper =</div><div class="line">            vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</div><div class="line">    mapper-&gt;SetInputConnection(surface-&gt;GetOutputPort());</div><div class="line">    mapper-&gt;ScalarVisibilityOff();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkActor&gt; actor =</div><div class="line">            vtkSmartPointer&lt;vtkActor&gt;::New();</div><div class="line">    actor-&gt;SetMapper(mapper);</div><div class="line"></div><div class="line">    renderer-&gt;AddActor(actor);</div><div class="line"></div><div class="line">    renderWindow-&gt;Render();</div><div class="line">    interactor-&gt;Start();</div><div class="line">    return EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CMakeLists-txt文件："><a href="#CMakeLists-txt文件：" class="headerlink" title="CMakeLists.txt文件："></a>CMakeLists.txt文件：</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</div><div class="line"></div><div class="line"><span class="keyword">PROJECT</span>(MarchingCubes)</div><div class="line"></div><div class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</div><div class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</div><div class="line"></div><div class="line"><span class="keyword">add_executable</span>(MarchingCubes MACOSX_BUNDLE MarchingCubes)</div><div class="line"></div><div class="line"><span class="keyword">if</span>(VTK_LIBRARIES)</div><div class="line">    <span class="keyword">target_link_libraries</span>(MarchingCubes <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</div><div class="line"><span class="keyword">else</span>()</div><div class="line">    <span class="keyword">target_link_libraries</span>(MarchingCubes vtkHybrid vtkWidgets)</div><div class="line"><span class="keyword">endif</span>()</div></pre></td></tr></table></figure>
<p>这是已经写好的完整项目 <a href="https://github.com/lorensen/VTKWikiExamplesTarballs/raw/master/MarchingCubes.tar" target="_blank" rel="external">MarchingCubes</a>。下载以后进行解压，并且：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> MarchingCubes/build</div><div class="line">$ cmake ..</div></pre></td></tr></table></figure>
<p>生成项目并且运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ make</div><div class="line">$ ./MarchingCubes</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<p><img src="http://i1.piimg.com/567571/87a3b5aae10ca9f1.png" alt=""></p>
<p>如果使用外部 Marching Cubes Data Sets数据集中的 <a href="https://placid.nlm.nih.gov/community/21" target="_blank" rel="external">MarchingMan</a> 数据文件，则将其解压至 build 文件夹中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Marching\ Man 1000</div></pre></td></tr></table></figure>
<p>此处是在运行时传入两个参数：一个是数据文件所在目录 Marching Man，另一个是 ISO 感光度的值1000。并且，需要注意的是，由于解压后的数据文件夹为 Marching Man ，中间含有空格，因此须用反斜杠 \ 进行转义。当然，你也可以将其重命名为 MarchingMan ，这样在运行传参的时候就不需要对空格进行转义了，即可写为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes MarchingMan 1000</div></pre></td></tr></table></figure>
<p>最后的运行结果为：</p>
<p><img src="http://p1.bpimg.com/567571/164ff93929c1684a.png" alt=""></p>
<p>如果使用 Mummies 中的 Male 数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Mummies/Male 100</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/ce8a6cd196245bf5.png" alt=""></p>
<p>如果使用 Mummies 中的 Female 数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes Mummies/Female 1000</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/afd3d0c66ceaddfa.png" alt=""></p>
<p>如果使用 PlasticSkull 中的数据，则</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./MarchingCubes PlasticSkull 1000</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/567571/27dc0858828f87c2.png" alt=""></p>
<h2 id="调用-Volume-Rendering"><a href="#调用-Volume-Rendering" class="headerlink" title="调用 Volume Rendering"></a>调用 Volume Rendering</h2><p>由于在 VTK 中 Volume Rendering 的调用方式有多种，这里我们选取其中的 SmartVolumeMapper 进行讲解。</p>
<h3 id="MinIntensityRendering-cxx"><a href="#MinIntensityRendering-cxx" class="headerlink" title="MinIntensityRendering.cxx"></a>MinIntensityRendering.cxx</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkSmartPointer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCamera.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkFiniteDifferenceGradientEstimator.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageClip.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPiecewiseFunction.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkStructuredPoints.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkStructuredPointsReader.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolume.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolumeProperty.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkFixedPointVolumeRayCastMapper.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkColorTransferFunction.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Required arguments: vtkFile"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename = argv[<span class="number">1</span>]; <span class="comment">//  "/Data/ironProt.vtk";</span></div><div class="line"></div><div class="line">    <span class="comment">// Create the renderers, render window, and interactor</span></div><div class="line">    vtkSmartPointer &lt;vtkRenderWindow&gt; renWin =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</div><div class="line">    vtkSmartPointer &lt;vtkRenderWindowInteractor&gt; iren =</div><div class="line">            vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</div><div class="line">    iren-&gt;SetRenderWindow(renWin);</div><div class="line">    vtkSmartPointer &lt;vtkRenderer&gt; ren =</div><div class="line">            vtkSmartPointer&lt;vtkRenderer&gt;::New();</div><div class="line">    renWin-&gt;AddRenderer(ren);</div><div class="line"></div><div class="line">    <span class="comment">// Read the data from a vtk file</span></div><div class="line">    vtkSmartPointer &lt;vtkStructuredPointsReader&gt; reader =</div><div class="line">            vtkSmartPointer&lt;vtkStructuredPointsReader&gt;::New();</div><div class="line">    reader-&gt;SetFileName(filename.c_str());</div><div class="line">    reader-&gt;Update();</div><div class="line"></div><div class="line">    <span class="comment">// Create a transfer function mapping scalar value to opacity</span></div><div class="line">    vtkSmartPointer &lt;vtkPiecewiseFunction&gt; oTFun =</div><div class="line">            vtkSmartPointer&lt;vtkPiecewiseFunction&gt;::New();</div><div class="line">    oTFun-&gt;AddSegment(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">256</span>, <span class="number">0.1</span>);</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkColorTransferFunction&gt; cTFun =</div><div class="line">            vtkSmartPointer&lt;vtkColorTransferFunction&gt;::New();</div><div class="line">    cTFun-&gt;AddRGBPoint(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</div><div class="line">    cTFun-&gt;AddRGBPoint(<span class="number">255</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Need to crop to actually see minimum intensity</span></div><div class="line">    vtkSmartPointer &lt;vtkImageClip&gt; clip =</div><div class="line">            vtkSmartPointer&lt;vtkImageClip&gt;::New();</div><div class="line">    clip-&gt;SetInputConnection(reader-&gt;GetOutputPort());</div><div class="line">    clip-&gt;SetOutputWholeExtent(<span class="number">0</span>, <span class="number">66</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">30</span>, <span class="number">37</span>);</div><div class="line">    clip-&gt;ClipDataOn();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkVolumeProperty&gt; property =</div><div class="line">            vtkSmartPointer&lt;vtkVolumeProperty&gt;::New();</div><div class="line">    property-&gt;SetScalarOpacity(oTFun);</div><div class="line">    property-&gt;SetColor(cTFun);</div><div class="line">    property-&gt;SetInterpolationTypeToLinear();</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkFixedPointVolumeRayCastMapper&gt; mapper =</div><div class="line">            vtkSmartPointer&lt;vtkFixedPointVolumeRayCastMapper&gt;::New();</div><div class="line">    mapper-&gt;SetBlendModeToMinimumIntensity();</div><div class="line">    mapper-&gt;SetInputConnection(clip-&gt;GetOutputPort());</div><div class="line"></div><div class="line">    vtkSmartPointer &lt;vtkVolume&gt; volume =</div><div class="line">            vtkSmartPointer&lt;vtkVolume&gt;::New();</div><div class="line">    volume-&gt;SetMapper(mapper);</div><div class="line">    volume-&gt;SetProperty(property);</div><div class="line"></div><div class="line">    ren-&gt;AddViewProp(volume);</div><div class="line">    renWin-&gt;Render();</div><div class="line">    iren-&gt;Start();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</div><div class="line"> </div><div class="line"><span class="keyword">PROJECT</span>(MinIntensityRendering)</div><div class="line"> </div><div class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</div><div class="line"><span class="keyword">include</span>(<span class="variable">$&#123;VTK_USE_FILE&#125;</span>)</div><div class="line"> </div><div class="line"><span class="keyword">add_executable</span>(MinIntensityRendering MACOSX_BUNDLE MinIntensityRendering)</div><div class="line"> </div><div class="line"><span class="keyword">if</span>(VTK_LIBRARIES)</div><div class="line">	<span class="keyword">target_link_libraries</span>(MinIntensityRendering <span class="variable">$&#123;VTK_LIBRARIES&#125;</span>)</div><div class="line"><span class="keyword">else</span>()</div><div class="line">	<span class="keyword">target_link_libraries</span>(MinIntensityRendering vtkHybrid vtkWidgets)</div><div class="line"><span class="keyword">endif</span>()</div></pre></td></tr></table></figure>
<p>在这里，同样提供已经写好的 <a href="https://raw.githubusercontent.com/lorensen/VTKWikiExamplesTarballs/master/MinIntensityRendering.tar" target="_blank" rel="external">MinIntensityRendering</a> 项目工程文件和运行所需要的 VTK 文件 <a href="https://midas3.kitware.com/midas/item/206383" target="_blank" rel="external">ironProt.vtk</a> 。下载解压，将 ironProt.vtk 放入 build 文件夹中，然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> M<span class="keyword">in</span>IntensityRendering/build</div><div class="line">$ cmake ..</div><div class="line">$ make</div><div class="line">$ ./M<span class="keyword">in</span>IntensityRendering ironProt.vtk</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://p1.bpimg.com/567571/2c34f33003a74203.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git学习笔记（一）：常见问题及其解决办法]]></title>
      <url>http://www.dengfuping.com/2016/02/24/git-learning-1/</url>
      <content type="html"><![CDATA[<h2 id="常见错误（一）：fatal-remote-origin-already-exists"><a href="#常见错误（一）：fatal-remote-origin-already-exists" class="headerlink" title="常见错误（一）：fatal: remote origin already exists"></a>常见错误（一）：fatal: remote origin already exists</h2><p>输入以下命令关联远程库（注：以下的 <code>operating-system-and-xv6</code> 是我自己的一个仓库名）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:dengfuping/operating-system-and-xv6.git</div></pre></td></tr></table></figure>
<p>出现 <code>fatal: remote origin already exists</code> 的问题：<br><img src="http://i1.piimg.com/567571/fff480eb0b83213c.png" alt=""></p>
<p>只需输入以下命令将远程关联删除即可解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm origin</div></pre></td></tr></table></figure>
<p>之后再使用 <code>git remote add origin git@github.com:dengfuping/operating-system-and-xv6.git</code> 命令将本地仓库与远程库重新关联即可。<a id="more"></a></p>
<h2 id="常见问题（二）：error-failed-to-push-some-refs-to"><a href="#常见问题（二）：error-failed-to-push-some-refs-to" class="headerlink" title="常见问题（二）：error: failed to push some refs to"></a>常见问题（二）：error: failed to push some refs to</h2><p>我在将本地的仓库和远程对应的 <code>Github</code> 的远程库进行关联之后，输入 <code>git push -u origin master</code> 命令出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">To git@github.com:dengfuping/operating-system-and-xv6.git</div><div class="line"> ! [rejected]        master -&gt; master (fetch first)</div><div class="line">error: failed to push some refs to <span class="string">'git@github.com:dengfuping/operating-system-and-xv6.git'</span></div><div class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></div><div class="line">hint: not have locally. This is usually caused by another repository pushing</div><div class="line">hint: to the same ref. You may want to first integrate the remote changes</div><div class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</div><div class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/aeb2a480f5634897.png" alt=""></p>
<p>出现错误的主要原因是我在 <code>Github</code> 新建远程仓库的时候创建了一个 <code>README.md</code> 文件，而这个文件则不在本地仓库目录中。</p>
<p>可以通过如下命令进行代码合并（其中 <code>pull = fetch + merge</code>）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull --rebase origin master</div></pre></td></tr></table></figure></p>
<p>执行上面代码后就可以看到本地代码库中多了 <code>README.md</code> 文件。此时再执行语句 <code>git push -u origin master</code> 即可完成代码上传到 <code>Github</code> 上。</p>
]]></content>
    </entry>
    
  
  
</search>
